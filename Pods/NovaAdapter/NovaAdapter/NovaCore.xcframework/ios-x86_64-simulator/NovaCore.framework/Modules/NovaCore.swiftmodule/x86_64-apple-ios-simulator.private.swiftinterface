// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NovaCore
import AVFoundation
import AdSupport
import AppTrackingTransparency
import CoreGraphics
import CoreMedia
import DeveloperToolsSupport
import Foundation
@_exported import NovaCore
import SafariServices
import StoreKit
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_Concurrency.MainActor @preconcurrency public class NovaAdsVideoLandingWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(model: NovaCore.NovaAdOpenActionDataModel)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
public enum NovaAdOpenActionKey : Swift.String {
  case launchBrowser
  case launchWebView
  case launchStore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NovaAppOpenAdViewActionKey : Swift.String {
  case adTapped
  case manualSkip
  case feedbackReport
  case launchBrowser
  case launchWebView
  case launchStore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SwiftUICore.Font {
  @_hasMissingDesignatedInitializers public class NovaFont {
    final public let display1: SwiftUICore.Font
    final public let display2: SwiftUICore.Font
    final public let headline1: SwiftUICore.Font
    final public let headline2: SwiftUICore.Font
    final public let headline3: SwiftUICore.Font
    final public let body1: SwiftUICore.Font
    final public let body2: SwiftUICore.Font
    final public let bodyTablet: SwiftUICore.Font
    final public let subtitle1: SwiftUICore.Font
    final public let subtitle2: SwiftUICore.Font
    final public let subtitle3: SwiftUICore.Font
    final public let caption1: SwiftUICore.Font
    final public let caption2: SwiftUICore.Font
    @objc deinit
  }
  public static let Nova: SwiftUICore.Font.NovaFont
}
extension UIKit.UIFont {
  @_hasMissingDesignatedInitializers public class NovaFont {
    final public let display1: UIKit.UIFont
    final public let display2: UIKit.UIFont
    final public let headline1: UIKit.UIFont
    final public let headline2: UIKit.UIFont
    final public let headline3: UIKit.UIFont
    final public let body1: UIKit.UIFont
    final public let body2: UIKit.UIFont
    final public let bodyTablet: UIKit.UIFont
    final public let subtitle1: UIKit.UIFont
    final public let subtitle2: UIKit.UIFont
    final public let subtitle3: UIKit.UIFont
    final public let caption1: UIKit.UIFont
    final public let caption2: UIKit.UIFont
    final public let deprecated16Heavy: UIKit.UIFont
    final public let deprecated16Semibold: UIKit.UIFont
    final public let deprecated16Medium: UIKit.UIFont
    final public let deprecated16Black: UIKit.UIFont
    final public let deprecated14Medium: UIKit.UIFont
    final public let deprecated14Bold: UIKit.UIFont
    final public let deprecated14Heavy: UIKit.UIFont
    final public let deprecated20Black: UIKit.UIFont
    final public let deprecated20Heavy: UIKit.UIFont
    final public let deprecated20Medium: UIKit.UIFont
    final public let deprecated20Semibold: UIKit.UIFont
    final public let deprecated20W900: UIKit.UIFont
    final public let deprecated24Heavy: UIKit.UIFont
    final public let deprecated24W900: UIKit.UIFont
    final public let deprecated24Black: UIKit.UIFont
    final public let deprecated24Bold: UIKit.UIFont
    final public let deprecated10Regular: UIKit.UIFont
    final public let deprecated10Medium: UIKit.UIFont
    final public let deprecated12Medium: UIKit.UIFont
    final public let deprecated12Bold: UIKit.UIFont
    final public let deprecated9Regular: UIKit.UIFont
    final public let deprecated15Regular: UIKit.UIFont
    @objc deinit
  }
  public static let Nova: UIKit.UIFont.NovaFont
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class NovaNativeAdMediaViewV2 : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var videoView: NovaCore.NovaNativeAdVideoView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc deinit
}
extension NovaCore.NovaNativeAdMediaViewV2 {
  @_Concurrency.MainActor @preconcurrency final public func config(with media: NovaCore.NovaNativeAdMedia)
  @_Concurrency.MainActor @preconcurrency final public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency final public func mediaStartShown()
  @_Concurrency.MainActor @preconcurrency final public func mediaEndShown()
}
@_hasMissingDesignatedInitializers public class NovaConstants {
  public static let shared: NovaCore.NovaConstants
  public var NovaEventHostUrl: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AppOpenAdResource {
  @objc deinit
}
public enum NovaVideoLogActionKey : Swift.String {
  case videoPlay
  case videoPlaying
  case videoEnd
  case videoPaused
  case videoFailed
  case videoLoadTime
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NovaVideoLogActionDataModel {
  public let docid: Swift.String
  public let timeElapsed: Swift.Int
  public let timeElapsedFloat: CoreFoundation.CGFloat
  public let progress: CoreFoundation.CGFloat
  public let duration: Swift.Int
  public let videoLoadDuration: Swift.Int
  public let source: Swift.String
  public let isLoadSuccess: Swift.Bool
  public let meta: Swift.String
  public let loadingTime: Swift.Int
  public let playStyle: NovaCore.NovaVideoPlayStyle
  public let reason: Swift.String
  public init(docid: Swift.String, timeElapsed: Swift.Int, timeElapsedFloat: CoreFoundation.CGFloat, progress: CoreFoundation.CGFloat, duration: Swift.Int, videoLoadDuration: Swift.Int, source: Swift.String, isLoadSuccess: Swift.Bool, meta: Swift.String, loadingTime: Swift.Int, playStyle: NovaCore.NovaVideoPlayStyle, reason: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class NovaIcon : ObjectiveC.NSObject {
  @objc deinit
}
public protocol IconName : Swift.CustomStringConvertible {
}
extension NovaCore.NovaIcon {
  @objc public enum NovaSystem : Swift.Int, Swift.CaseIterable {
    case arrowLeftOutline
    case bellFilled
    case bellOutline
    case breezeFilled
    case breezeOutline
    case cameraOutline
    case chartBarOutline
    case checkCircleFilled
    case checkCircleOutline
    case chevronDownFilled
    case chevronDownOutline
    case chevronLeftFilled
    case chevronLeftOutline
    case chevronRightFilled
    case chevronRightOutline
    case chevronUpFilled
    case clockOutline
    case crossFilled
    case crossOutline
    case crossCircleFilled
    case crossCircleOutline
    case ellipsisHorizontalOutline
    case ellipsisVerticalFilled
    case exclamationCircleOutline
    case exclamationTriangleOutline
    case globeOutline
    case hashtagOutline
    case heartOutline
    case imageOutline
    case linkOutline
    case locationOutline
    case moneyOutline
    case navigationArrowOutline
    case newsbreakOutline
    case peopleFilled
    case peopleOutline
    case playFilled
    case plusOutline
    case prohibitOutline
    case shareOutline
    case shieldErrorOutline
    case trashOutline
    case videoClipFilled
    case videoClipOutline
    case magicOutline
    case magicStarFilled
    case homeOutline
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [NovaCore.NovaIcon.NovaSystem]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [NovaCore.NovaIcon.NovaSystem] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension NovaCore.NovaIcon.NovaSystem : NovaCore.IconName {
  public var description: Swift.String {
    get
  }
}
public struct NovaUnifiedWebViewConfig {
  public let enableJSBridge: Swift.Bool
  public let enableNBUserAgent: Swift.Bool
  public let blockedURLPrefixes: [Swift.String]
  public let displayNavigationHeader: Swift.Bool
  public let navigationTitleText: Swift.String?
  public let goBackByUrlAllowed: Swift.Bool
  public let headers: [Swift.String : Swift.String]
  public init(enableJSBridge: Swift.Bool, enableNBUserAgent: Swift.Bool, blockedURLPrefixes: [Swift.String], displayNavigationHeader: Swift.Bool, navigationTitleText: Swift.String?, goBackByUrlAllowed: Swift.Bool, headers: [Swift.String : Swift.String])
}
extension UIKit.UIImage {
  public func tint(_ tintColor: UIKit.UIColor) -> UIKit.UIImage
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaAppOpenVerticalImageAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButtonArea: UIKit.UIView
  @objc deinit
}
public enum AdsMediaConstants {
  public static let iPadAspectRatio: Swift.Double
  public static let defaultAspectRatio: Swift.Double
  public static let verticalVideoDefaultAspectRatio: Swift.Double
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaWebViewNavigationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func config(viewModel: NovaCore.NovaWebViewNavigationViewModel)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func changeLeftButtonVisibility(isHidden: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class NovaAppOpenAdEndCardView : UIKit.UIView {
  @objc deinit
}
public protocol NovaJSBridgeHandling : AnyObject {
}
public enum NovaCreativeType : Swift.String {
  case businessProfile
  case fullImage
  case nativeImage
  case nativeVideo
  case sponsoredContent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol NovaAppOpenAdDelegate {
  @objc func appOpenAdDidDisplay(_ appOpenAd: NovaCore.NovaAppOpenAd)
  @objc func appOpenAdDidDismiss(_ appOpenAd: NovaCore.NovaAppOpenAd)
  @objc func appOpenAdDidLogClick(_ appOpenAd: NovaCore.NovaAppOpenAd)
  @objc optional func appOpenAdDidFailToDisplay(_ appOpenAd: NovaCore.NovaAppOpenAd)
}
public enum AdsThirdPartyMetricReporter {
  public static func logImpression(thirdPartyImpressionTrackingUrls: [Swift.String])
  public static func logClick(thirdPartyClickTrackingUrls: [Swift.String])
}
public enum NovaAppOpenAdResource {
  case image(UIKit.UIImage)
  case imageURL(Swift.String)
  case video(NovaCore.NovaNativeAdVideoInfo)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class NovaAppOpenAdViewController : UIKit.UIViewController {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func topRightCloseButtonStartCountDown(button: UIKit.UIButton, clickableArea: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func enableTopRightCloseButton(button: UIKit.UIButton, clickableArea: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
public struct NovaResponseDataModel : Swift.Codable {
  public let ads: [NovaCore.AdItem]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AdItem : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NovaAppOpenAdLayout : Swift.String, Swift.Codable {
  case horizontal
  case vertical
  case horizontalCancelTopRight
  case verticalCancelTopRight
  case endCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NovaAppOpenAdClickableComponent : Swift.String {
  case title
  case body
  case media
  case advertiserName
  case adTag
  case cta
  case icon
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaVideoProgressView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency public func setTrackView(hidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func configProgressColor(progressTintColor: UIKit.UIColor, trackTintColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func updateProgress(_ progress: Swift.Float)
  @_Concurrency.MainActor @preconcurrency public func shouldReceivePanGesture(with position: CoreFoundation.CGPoint) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class NovaAdMetricReporter : ObjectiveC.NSObject {
  public static func logAdImpression(thirdPartyImpressionTrackingUrls: [Swift.String], encryptedAdToken: Swift.String, adUnitId: Swift.String, startTimeInMs: Swift.Double? = nil, expirationTimeInMs: Swift.Double? = nil)
  public static func logAdClick(thirdPartyClickTrackingUrls: [Swift.String], encryptedAdToken: Swift.String, adUnitId: Swift.String, durationInMs: Swift.Int? = nil, clickArea: NovaCore.ClickableAdArea? = nil)
  public static func logAdSkip(reason: NovaCore.NovaAdSkipReason, encryptedAdToken: Swift.String, durationInMs: Swift.Int)
  @objc public static func logAdHide(reason: Swift.String, encryptedAdToken: Swift.String)
  @objc public static func logAdUnhide(encryptedAdToken: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension NovaCore.NovaAdMetricReporter {
  public static func convertNovaClickAreaNameToMetric(clickArea: Swift.String?) -> Swift.String?
}
public struct NovaAdMetricKeys {
  public static let START_MS: Swift.String
  public static let EXPIRATION_MS: Swift.String
  public static let CURRENT_MS: Swift.String
  public static let DURATION_MS: Swift.String
  public static let LATENCY_MS: Swift.String
  public static let VIDEO_LENGTH_MS: Swift.String
  public static let POSITION_MS: Swift.String
  public static let LOOP_COUNT: Swift.String
  public static let IS_PLAY_AUTOMATICALLY: Swift.String
  public static let IS_MUTE: Swift.String
  public static let IS_LOOP: Swift.String
  public static let AD_UNIT_ID: Swift.String
  public static let USER_ID: Swift.String
  public static let CLICK_AREA_NAME: Swift.String
  public static let ACTION: Swift.String
  public static let REASON: Swift.String
  public static let ERROR: Swift.String
  public static let OFFSET: Swift.String
  public static let EVENT_TYPE: Swift.String
  public static let ENCRYPTED_AD_TOKEN: Swift.String
  public static let EVENT_TIME: Swift.String
}
public protocol NovaUnifiedWebViewNavigationDelegate : ObjectiveC.NSObject {
  func openWebPage(_ url: Foundation.URL)
  func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  func webView(_ webView: WebKit.WKWebView, policyFor navigationAction: WebKit.WKNavigationAction) -> WebKit.WKNavigationActionPolicy?
  func webView(_ webView: WebKit.WKWebView, canRedirectTo url: Foundation.URL) -> Swift.Bool
  func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  func webViewInitialLoadDidRedirect(_ webView: WebKit.WKWebView)
  func webViewDidGoBackToInitialLoad(_ webView: WebKit.WKWebView)
}
extension NovaCore.NovaUnifiedWebViewNavigationDelegate {
  public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  public func webView(_ webView: WebKit.WKWebView, policyFor navigationAction: WebKit.WKNavigationAction) -> WebKit.WKNavigationActionPolicy?
  public func webView(_ webView: WebKit.WKWebView, canRedirectTo url: Foundation.URL) -> Swift.Bool
  public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
  public func webViewInitialLoadDidRedirect(_ webView: WebKit.WKWebView)
  public func webViewDidGoBackToInitialLoad(_ webView: WebKit.WKWebView)
}
@objc public protocol NovaNativeAdVideoDelegate {
  @objc optional func playerCurrentTimeDidChange(currentTime: Swift.Double, durationTime: Swift.Double)
  @objc optional func playerDidPlayToEndTime()
}
@_hasMissingDesignatedInitializers final public class NovaNativeAdVideoInfo : Swift.Codable {
  final public let cacheKey: Swift.String
  final public let coverUrlStr: Swift.String?
  final public let videoUrlStr: Swift.String
  final public let isVertical: Swift.Bool
  final public let isVideoClickable: Swift.Bool
  final public let isPlayOnLandingPage: Swift.Bool
  final public let isAuto: Swift.Bool
  final public let isMute: Swift.Bool
  final public let isLoop: Swift.Bool
  final public var state: NovaCore.NovaNativeAdVideoState? {
    get
    set
  }
  final public var didStart: Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct ActionModel {
  public let actionKey: Swift.String
  public let actionDataModel: Any
  public init(actionKey: Swift.String, actionDataModel: Any = EmptyActionDataModel())
}
extension NovaCore.ActionModel : Swift.Equatable {
  public static func == (lhs: NovaCore.ActionModel, rhs: NovaCore.ActionModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class NovaAdOpenActionHandleUtil {
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class NovaNativeAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var titleLabel: UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency public var bodyLabel: UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency public var advertiserLabel: UIKit.UILabel?
  @_Concurrency.MainActor @preconcurrency public var callToActionButton: UIKit.UIButton?
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency final public let mediaView: NovaCore.NovaNativeAdMediaView
  @_Concurrency.MainActor @preconcurrency public var novaNativeAdVideoDelegate: (any NovaCore.NovaNativeAdVideoDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var tappableViews: [UIKit.UIView]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var iABMetricReporter: NovaCore.IABMetricReporter? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(actionHandler: any NovaCore.ActionHandling, mediaView: NovaCore.NovaNativeAdMediaView? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency open func bindView(nativeAd: NovaCore.NovaNativeAdItem)
  @_Concurrency.MainActor @preconcurrency open func setUpView(nativeAd: NovaCore.NovaNativeAdItem)
  @_Concurrency.MainActor @preconcurrency public func prepareViewForInteraction(nativeAd: NovaCore.NovaNativeAdItem)
}
extension NovaCore.NovaNativeAdView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func register(_ nativeAd: NovaCore.NovaNativeAdItem)
  @_Concurrency.MainActor @preconcurrency public func unregisterAd()
  @_Concurrency.MainActor @preconcurrency public func seTappableView(view: UIKit.UIView)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class NovaAppOpenAdViewV3 : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let mediaView: NovaCore.NovaNativeAdMediaViewV2
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButtonArea: UIKit.UIView
  @objc deinit
}
extension NovaCore.NovaAppOpenAdViewV3 {
  @_Concurrency.MainActor @preconcurrency public func setupSubviews()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NovaNativeAdVideoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var didTapCloseButtonCallback: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var inInterstitial: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var videoPlayer: NovaCore.NovaVideoPlayer?
  @_Concurrency.MainActor @preconcurrency final public var userPausedAd: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var novaNativeAdVideoDelegate: (any NovaCore.NovaNativeAdVideoDelegate)?
  @_Concurrency.MainActor @preconcurrency final public var popOverCtaController: NovaCore.NovaAdPopOverCtaController?
  @_Concurrency.MainActor @preconcurrency public init(inLandingPage: Swift.Bool = false)
  @objc deinit
}
extension NovaCore.NovaNativeAdVideoView {
  @_Concurrency.MainActor @preconcurrency final public func config(videoInfo: NovaCore.NovaNativeAdVideoInfo, encryptedAdToken: Swift.String, iabReporter: NovaCore.IABMetricReporter?)
  @_Concurrency.MainActor @preconcurrency final public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency final public func getPlayerSuperview() -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency final public func setPlayerBackOnView(view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency final public func handleVideoOnScreen()
  @_Concurrency.MainActor @preconcurrency final public func handleVideoOffScreen()
}
extension NovaCore.NovaNativeAdVideoView {
  @objc @_Concurrency.MainActor @preconcurrency final public func didTapPlayButton()
  @objc @_Concurrency.MainActor @preconcurrency final public func didTabMuteButton()
}
extension NovaCore.NovaNativeAdVideoView : NovaCore.NovaVideoPlayerDelegate {
  @_Concurrency.MainActor @preconcurrency final public func playerReady(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func playerPlaybackStateDidChange(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func playerBufferTimeDidChange(_ bufferTime: Swift.Double)
  @_Concurrency.MainActor @preconcurrency final public func playerCurrentTimeDidChange(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func playerTimePassed60sAfterPlay(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func player(_ player: NovaCore.NovaPlayer, didFailWithError error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency final public func playerDidPlayToEndTime(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func playerPlaybackWillLoop(_ player: NovaCore.NovaPlayer)
  @_Concurrency.MainActor @preconcurrency final public func playerPlaybackDidLoop(_ player: NovaCore.NovaPlayer)
}
@objc public enum NovaAdType : Swift.Int {
  case appOpen
  case native
  case banner
  case nativeParallax
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NovaCore.NovaAdType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct NovaNativeAdMediaViewModel {
  public init(encryptedAdToken: Swift.String, imageUrlStr: Swift.String?, videoInfo: NovaCore.NovaNativeAdVideoInfo?)
}
extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var nova_safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public class var novawindowScenes: [UIKit.UIWindowScene] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public class var novasharedKeyWindow: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public class var novakeyRootViewController: UIKit.UIViewController? {
    get
  }
}
public struct NovaAdOpenActionDataModel {
  public init(url: Foundation.URL, clickTime: Swift.Double, ad: NovaCore.NovaBaseAd)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static func ignoreAutoresizing(_ views: [UIKit.UIView])
  @_Concurrency.MainActor @preconcurrency public static func ignoreAutoresizing(_ views: UIKit.UIView...)
  @_Concurrency.MainActor @preconcurrency public func addSubviews(_ views: [UIKit.UIView])
  @_Concurrency.MainActor @preconcurrency public func addSubviews(_ views: UIKit.UIView...)
  @_Concurrency.MainActor @preconcurrency public func addSubviewsAndIgnoreAutoResizing(_ views: [UIKit.UIView])
  @_Concurrency.MainActor @preconcurrency public func addSubviewsAndIgnoreAutoResizing(_ views: UIKit.UIView...)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static let minTapLength: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var minTapLength: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var adClickArea: NovaCore.ClickableAdArea? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nova_isFullyVisibleOnScreen: Swift.Bool {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var nova_isPartiallyVisibleOnScreen: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func novaisCheckedView() -> Swift.Bool
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func novasetShadow(x: Swift.Double, y: Swift.Double, b: Swift.Double, s: Swift.Double, color: UIKit.UIColor, alpha: Swift.Float)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func novapinConstraints() -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor @preconcurrency public func novapinToSuperView()
}
public enum ClickableAdArea : Swift.String {
  case icon
  case advertiser
  case sponsor
  case headline
  case body
  case cta
  case media
  case badge
  case shadow
  case like
  case comment
  case share
  case advertiser_endcard
  case body_endcard
  case cta_endcard
  case icon_endcard
  case blank_endcard
  case tap_to_try
  case playable
  case auto_jump
  case cta_popover
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum MetricEvent : Swift.Int, Swift.CaseIterable {
  case facebookLogin
  case feedbackTextSubmitted
  case articleFeedback
  case articleRating
  case adClick
  case adSlotImpression
  case adRevenueImpression
  case adDeDuplicated
  case adBlocked
  case adSendFeedback
  case adPaid
  case adWinnerDecided
  case loadItemsWithoutAds
  case adResponse
  case adRequest
  case adClickEmptyArea
  case appContentDisplayed
  case adCacheExpired
  case enterFullArticleWithAdSlot
  case enterFullArticleWithAdFilled
  case clickPushDoc
  case clickPushOthers
  case invalidPushContent
  case getPushContentFailed
  case clickDoc
  case enterNews
  case clickSocial
  case enterSocial
  case enterNewsByWebUrl
  case popBtnView
  case popBtnClick
  case novaLandingPageLaunchFailed
  case novaLandingPageStart
  case novaLandingPageTextLoad
  case novaLandingPageAllLoad
  case novaLandingPageClose
  case novaLandingPageJumpOut
  case novaLandingPageJumpIn
  case novaLandingPageResignActive
  case novaLandingPageAliveAfter5s
  case novaLandingPageRecycledAfter5s
  case prebidBannerPresentModal
  case imageDownloadReport
  case imageDownloadErrorReport
  case openApp
  case closeApp
  case firstOpen
  case tabBarViewTime
  case tabAddClick
  case tabManage
  case goTab2
  case topSearchBoxShow
  case topSearchBoxClick
  case systemPushNotificationAllowed
  case systemPushNotificationDenied
  case googleLogin
  case appleLogin
  case emailLogin
  case registerPush
  case detectApp
  case apiReport
  case networkError
  case negativeFeedback
  case shareViaEmail
  case shareViaSMS
  case shareViaWhatsapp
  case viewStream
  case channelViewTime
  case changeChannel
  case leaveNews
  case pageLoadDetail
  case clickVideo
  case videoPlay
  case videoPlaying
  case videoEnd
  case videoFailed
  case videoLoadTime
  case fullArticleFinishedLoading
  case pageLoadFailure
  case readFullArticle
  case followMediaAccount
  case unfollowMediaAccount
  case checkUserProfile
  case thumbUpDoc
  case thumbDownDoc
  case enterVideo
  case shareButton
  case shareDestination
  case shareSendResult
  case didGrantLocationPermission
  case didDenyLocationPermission
  case didLocationUndetermined
  case loadFeedReturnError
  case reactionDetailClick
  case showSearchHomePage
  case doSearch
  case fetchedSearchResults
  case searchResultClick
  case searchSortChange
  case fetchedNoResults
  case followWidgetExposure
  case clickHyperlink
  case autoLogin
  case getUserInfo
  case newSession
  case usageDuration
  case clickFeedArticleMoreButton
  case commentTopShow
  case commentAllShow
  case commentShow
  case commentReplyClick
  case commentReplyFinish
  case commentCommentClick
  case commentCommentFinish
  case commentShowRepliesClick
  case thumbUpComment
  case thumbDownComment
  case commentThreePointClick
  case commentShareClick
  case commentDuration
  case commentReportShow
  case commentReportReason
  case commentBlockUser
  case commentCollapsedClick
  case viewComment
  case postComment
  case postReply
  case leaveCommentsView
  case commentGuidelinesClick
  case ugcPinComment
  case noCommentViewShow
  case writeCommentButtonClick
  case notificationCommentShow
  case commentAppealClick
  case commentAppealComplete
  case negativeFeedbackShow
  case undoNegativeFeedbackClick
  case negativeFeedbackSubmit
  case showLocationPicker
  case clickPrimeLocationChange
  case clickAddMoreLocations
  case clickLocationSearchBar
  case setPrimeLocation
  case addLocationSearchSelect
  case removeLocation
  case moduleViewMore
  case moduleClick
  case feedActionPromptClick
  case feedActionPromptDismiss
  case checkedViewNew
  case topicFollow
  case topicUnfollow
  case topicsSelected
  case ugcEnterPostManagement
  case ugcCreateVideo
  case ugcLostPermission
  case ugcVideoOpenCamera
  case ugcDiscardPost
  case ugcVideoUpload
  case ugcCreateVideoCompleted
  case ugcEnterMetadata
  case ugcEnterDetailedLocation
  case ugcSelectedLocation
  case ugcSubmitPost
  case ugcSubmitPostFinished
  case ugcEnterFollowerList
  case ugcClickFollower
  case ugcViewPost
  case ugcDeletePost
  case showInboxTab
  case ugcClickActivityMessage
  case carouselCreateVideo
  case pushPromptClick
  case ugcCommentDropdown
  case profilePageEnter
  case likeDoc
  case unlikeDoc
  case summaryDoc
  case ugcEnterPrompt
  case ugcCheckPrompt
  case ugcCreateFromPrompt
  case pushStatusChange
  case clickPushChannel
  case clickPushWebUrl
  case beginSearchChannel
  case pushAlive
  case addChannels
  case removeChannels
  case streamRefresh
  case cancelPushDoc
  case safetyMapMarkersAgg
  case safetyMapMarkersScattered
  case safetyMapDuration
  case safetyMapAction
  case safetyMapNotificationOnBanner
  case safetyMapGpsOnBanner
  case safetyMapLocOpt
  case crimeReportDuration
  case shareCrimeReport
  case recAccountPage
  case recAccountYes
  case recAccountNo
  case fullArticleCrimeMapBtnClick
  case fullArticleCrimeMapBtnView
  case fullArticleCrimeMapImgClick
  case fullArticleCrimeMapImgView
  case fullArticleShareBtnView
  case fullArticleShareBtnFacebookClick
  case fullArticleShareBtnSmsClick
  case fullArticleShareBtnEmailClick
  case fullArticleShareBtnMessengerClick
  case fullArticleShareBtnCopyClick
  case elecNaviClick
  case elecStateSelect
  case elecStatePage
  case elecStateDone
  case elecCandClick
  case openShortcut
  case openSpotlight
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NovaCore.MetricEvent]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [NovaCore.MetricEvent] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension NovaCore.MetricEvent {
  public var shouldForwardToApmTool: Swift.Bool {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaAdPopOverCtaController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(passthroughViews: [UIKit.UIView])
  @_Concurrency.MainActor @preconcurrency public var rootViewController: UIKit.UIViewController?
  public enum State {
    case hide
    case pop(source: (UIKit.UIView, CoreFoundation.CGRect))
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func config(with title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func changeState(to state: NovaCore.NovaAdPopOverCtaController.State)
  @_Concurrency.MainActor @preconcurrency public var tappableView: UIKit.UIView {
    get
  }
  @objc deinit
}
extension NovaCore.NovaAdPopOverCtaController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func popoverPresentationControllerShouldDismissPopover(_ popoverPresentationController: UIKit.UIPopoverPresentationController) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationController(_ controller: UIKit.UIPresentationController, willPresentWithAdaptiveStyle style: UIKit.UIModalPresentationStyle, transitionCoordinator: (any UIKit.UIViewControllerTransitionCoordinator)?)
}
public enum InteractiveBannerType : Swift.String {
  case displayCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class NovaNativeAdInteractiveBanner {
  final public let type: NovaCore.InteractiveBannerType
  final public let imageUrl: Foundation.URL
  final public let displayTime: Dispatch.DispatchTimeInterval
  final public var hasShown: Swift.Bool
  public init(type: NovaCore.InteractiveBannerType, imageUrl: Foundation.URL, displayTime: Dispatch.DispatchTimeInterval, hasShown: Swift.Bool = false)
  @objc deinit
}
public struct NovaNativeAdVideoState {
  public let isMute: Swift.Bool
}
@_hasMissingDesignatedInitializers public class NovaAdVideoMetricReporter {
  public enum NovaAdEventPauseReason : Swift.String {
    case manual
    case auto
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ProgressPercentagePoint {
  }
  public struct ProgressDurationPoint {
  }
  @_hasMissingDesignatedInitializers public class LogRecord {
    @objc deinit
  }
  public static func makeRecord(encryptedAdToken: Swift.String)
  public static func logVideoError(encryptedAdToken: Swift.String, error: Swift.String, duration: Swift.Double)
  public static func logVideoStart(encryptedAdToken: Swift.String, videoInfo: NovaCore.NovaNativeAdVideoInfo?, startTime: Swift.Double?, configTime: Swift.Double?, novaVideoPlayer: NovaCore.NovaVideoPlayer?)
  public static func logVideoProgress(encryptedAdToken: Swift.String, percentage: Swift.Double, duration: Swift.Double)
  public static func logVideoPause(encryptedAdToken: Swift.String, duration: Swift.Double, reason: NovaCore.NovaAdVideoMetricReporter.NovaAdEventPauseReason, videoInfo: NovaCore.NovaNativeAdVideoInfo?, startTime: Swift.Double?, configTime: Swift.Double?, novaVideoPlayer: NovaCore.NovaVideoPlayer?)
  public static func logVideoResume(encryptedAdToken: Swift.String, duration: Swift.Double, videoInfo: NovaCore.NovaNativeAdVideoInfo?, startTime: Swift.Double?, configTime: Swift.Double?, novaVideoPlayer: NovaCore.NovaVideoPlayer?)
  public static func logVideoMute(encryptedAdToken: Swift.String, isMute: Swift.Bool)
  @objc deinit
}
@objc public class NovaUnifiedWebViewHost : ObjectiveC.NSObject {
  public init(config: NovaCore.NovaUnifiedWebViewConfig, jsBridgeHandlerMaster: NovaCore.NovaJSBridgeHandlerMaster?, navigationDelegate: (any NovaCore.NovaUnifiedWebViewNavigationDelegate)?)
  public func injectJavaScript(_ js: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime)
  public func webView() -> WebKit.WKWebView
  public func load(_ url: Foundation.URL, referer: Swift.String? = nil)
  public var scrollDepth: Swift.Double? {
    get
  }
  public var pageIndex: Swift.Int? {
    get
  }
  public func SafeAs<T, U>(_ object: T?, _ objectType: U.Type) -> U?
  @objc deinit
}
extension NovaCore.NovaUnifiedWebViewHost : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension NovaCore.NovaUnifiedWebViewHost : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, preferences: WebKit.WKWebpagePreferences, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy, WebKit.WKWebpagePreferences) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
}
extension NovaCore.NovaUnifiedWebViewHost : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
@_inheritsConvenienceInitializers @objc public class NovaVideoPlayerCacheHandler : ObjectiveC.NSObject {
  @objc public static let shared: NovaCore.NovaVideoPlayerCacheHandler
  public func getCachedVideoControllerForURL(_ url: Foundation.URL, cacheKey: Swift.String) -> NovaCore.NovaVideoPlayer?
  @objc public func getControllerToPreload(cacheKey: Swift.String, url: Foundation.URL)
  public func removePlayer(cacheKey: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaAppOpenVerticalVideoAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var viewController: UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let topRightCloseButtonArea: UIKit.UIView
  @objc deinit
}
extension NovaCore.NovaAppOpenVerticalVideoAdView : NovaCore.NovaNativeAdVideoDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func playerDidPlayToEndTime()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaNativeAdMediaViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var mediaView: NovaCore.NovaNativeAdMediaView
  @_Concurrency.MainActor @preconcurrency public init(mediaView: NovaCore.NovaNativeAdMediaView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NovaDedupeManager {
  public static let shared: NovaCore.NovaDedupeManager
  @objc deinit
}
extension NovaCore.NovaDedupeManager {
  final public func novaAdDidFill(_ novaAd: NovaCore.NovaBaseAd)
  final public func novaAdDidShow(_ novaAd: NovaCore.NovaBaseAd)
  final public func getServerDedupeKeys(first k: Swift.Int, prioritizedBy adUnitId: Swift.String) -> [Swift.String]
}
public enum NovaNativeAdImageResource {
  case imageURLStr(Swift.String)
  case image(UIKit.UIImage)
}
public struct NovaNativeAdVideoResource {
  public init(videoInfo: NovaCore.NovaNativeAdVideoInfo, adToken: Swift.String, reporter: NovaCore.IABMetricReporter?)
}
public enum NovaNativeAdMedia {
  case image(NovaCore.NovaNativeAdImageResource)
  case video(NovaCore.NovaNativeAdVideoResource)
}
@objc @_inheritsConvenienceInitializers public class NovaVideoPlayer : ObjectiveC.NSObject {
  weak public var delegate: (any NovaCore.NovaVideoPlayerDelegate)?
  final public let player: NovaCore.NovaPlayer
  @objc override dynamic public init()
  public func configDisplay(_ display: Swift.Bool)
  public func currentTime() -> CoreMedia.CMTime
  public func currentTimeInterval() -> Foundation.TimeInterval
  public func maximumTimeDuration() -> Foundation.TimeInterval
  public func isVideoPlaying() -> Swift.Bool
  public func isVideoLoading() -> Swift.Bool
  public func toggleVideoPlay()
  public func videoPlayedTimeElapsed() -> Foundation.TimeInterval
  public func getVideoStartTime() -> Foundation.Date?
  public func getCurrentProgress() -> Swift.Double
  public func getRealProgress() -> Swift.Double
  public func addUpLocalTimeElapsed()
  public func getVideoEndKind() -> NovaCore.NovaVideoEndKind
  public func getLoadingTimeElapsed() -> Swift.Int
  public func isValid() -> Swift.Bool
  @objc deinit
}
extension NovaCore.NovaVideoPlayer {
  public func isPlayerMuted() -> Swift.Bool
  public func setPlayerMute(_ mute: Swift.Bool)
  public func play()
  public func pause(endKind: NovaCore.NovaVideoEndKind)
  public func stop(endKind: NovaCore.NovaVideoEndKind)
  public func endPlay(endKind: NovaCore.NovaVideoEndKind)
  public func isPlaying(urlString: Swift.String) -> Swift.Bool
  public func seek(to time: CoreMedia.CMTime, completionHandler: ((Swift.Bool) -> Swift.Void)?)
  public func play(with info: NovaCore.NovaPlayInfo, actionHandler: (any NovaCore.ActionHandling)?, delegate: any NovaCore.NovaVideoPlayerDelegate)
  public func update(fillMode: AVFoundation.AVLayerVideoGravity)
  public func preload(with url: Foundation.URL)
  public func getPlayerView() -> UIKit.UIView
}
extension NovaCore.NovaVideoPlayer : NovaCore.NovaPlayerDelegate {
  public func playerReady(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackStateDidChange(_ player: NovaCore.NovaPlayer)
  public func playerBufferingStateDidChange(_ player: NovaCore.NovaPlayer)
  public func playerBufferTimeDidChange(_ bufferTime: Swift.Double)
  public func player(_ player: NovaCore.NovaPlayer, didFailWithError error: (any Swift.Error)?)
}
extension NovaCore.NovaVideoPlayer : NovaCore.NovaPlayerPlaybackDelegate {
  public func playerCurrentTimeDidChange(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackWillStartFromBeginning(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackDidEnd(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackWillLoop(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackDidLoop(_ player: NovaCore.NovaPlayer)
  public func playerDidPlayToEndTime(_ player: NovaCore.NovaPlayer)
}
@_hasMissingDesignatedInitializers public class NovaUIUtils {
  public static func setImage(from url: Foundation.URL, to imageView: UIKit.UIImageView, completion: @escaping () -> Swift.Void)
  @objc deinit
}
public enum NovaAdLaunchOption : Swift.String {
  case launchWebView
  case launchBrowser
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class NovaUnifiedWebViewBuilder {
  public static func buildWebViewHost(enableNBUserAgent: Swift.Bool, enableJSBridge: Swift.Bool = true, jsBridgeHandlers: [any NovaCore.NovaJSBridgeHandling] = [], blockedURLPrefixes: [Swift.String] = [], navigationDelegate: (any NovaCore.NovaUnifiedWebViewNavigationDelegate)? = nil, headers: [Swift.String : Swift.String] = [:]) -> NovaCore.NovaUnifiedWebViewHost
  @objc deinit
}
public struct EmptyActionDataModel {
  public init()
}
public let NovaPlayerErrorDomain: Swift.String
public enum NovaPlayerError : Swift.Error, Swift.CustomStringConvertible {
  case failed
  public var description: Swift.String {
    get
  }
  public static func == (a: NovaCore.NovaPlayerError, b: NovaCore.NovaPlayerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NovaPlayerDelegate : AnyObject {
  func playerReady(_ player: NovaCore.NovaPlayer)
  func playerPlaybackStateDidChange(_ player: NovaCore.NovaPlayer)
  func playerBufferingStateDidChange(_ player: NovaCore.NovaPlayer)
  func playerBufferTimeDidChange(_ bufferTime: Swift.Double)
  func player(_ player: NovaCore.NovaPlayer, didFailWithError error: (any Swift.Error)?)
}
public protocol NovaPlayerPlaybackDelegate : AnyObject {
  func playerCurrentTimeDidChange(_ player: NovaCore.NovaPlayer)
  func playerPlaybackWillStartFromBeginning(_ player: NovaCore.NovaPlayer)
  func playerPlaybackDidEnd(_ player: NovaCore.NovaPlayer)
  func playerPlaybackWillLoop(_ player: NovaCore.NovaPlayer)
  func playerPlaybackDidLoop(_ player: NovaCore.NovaPlayer)
  func playerDidPlayToEndTime(_ player: NovaCore.NovaPlayer)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class NovaPlayer : UIKit.UIViewController {
  public typealias FillMode = AVFoundation.AVLayerVideoGravity
  public enum PlaybackState : Swift.Int, Swift.CustomStringConvertible {
    case stopped
    case playing
    case paused
    case failed
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum BufferingState : Swift.Int, Swift.CustomStringConvertible {
    case unknown
    case ready
    case delayed
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency weak open var playerDelegate: (any NovaCore.NovaPlayerDelegate)?
  @_Concurrency.MainActor @preconcurrency weak open var playbackDelegate: (any NovaCore.NovaPlayerPlaybackDelegate)?
  @_Concurrency.MainActor @preconcurrency open var url: Foundation.URL? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var asset: AVFoundation.AVAsset? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var fillMode: NovaCore.NovaPlayer.FillMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var autoplay: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var muted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var volume: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var playbackPausesWhenResigningActive: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var playbackPausesWhenBackgrounded: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var playbackResumesWhenBecameActive: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var playbackResumesWhenEnteringForeground: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var isPlayingVideo: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var playbackLoops: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var loopCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency open var playbackFreezesAtEnd: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var playbackState: NovaCore.NovaPlayer.PlaybackState {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var bufferingState: NovaCore.NovaPlayer.BufferingState {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var bufferSizeInSeconds: Swift.Double
  @_Concurrency.MainActor @preconcurrency open var playbackEdgeTriggered: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var maximumDuration: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var currentTimeInterval: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var currentTime: CoreMedia.CMTime {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var naturalSize: CoreFoundation.CGSize {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var playerView: NovaCore.NovaPlayerView {
    get
  }
  @_Concurrency.MainActor @preconcurrency open func playerLayer() -> AVFoundation.AVPlayerLayer?
  @_Concurrency.MainActor @preconcurrency open var preferredPeakBitRate: Swift.Double {
    get
    set
  }
  @available(iOS 11.0, tvOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency open var preferredMaximumResolution: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
}
extension NovaCore.NovaPlayer {
  @_Concurrency.MainActor @preconcurrency public var totalDurationWatched: Foundation.TimeInterval {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setPlayImmediately(atRate rate: Swift.Float)
}
extension NovaCore.NovaPlayer {
  @_Concurrency.MainActor @preconcurrency open func playFromBeginning()
  @_Concurrency.MainActor @preconcurrency open func playFromCurrentTime()
  @_Concurrency.MainActor @preconcurrency open func pause()
  @_Concurrency.MainActor @preconcurrency open func stop()
  @_Concurrency.MainActor @preconcurrency open func seek(to time: CoreMedia.CMTime, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func seekToTime(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func takeSnapshot(completionHandler: ((_ image: UIKit.UIImage?, _ error: (any Swift.Error)?) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class NovaPlayerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var playerBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var playerFillMode: NovaCore.NovaPlayer.FillMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isReadyForDisplay: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum NovaAdUrlTransformer {
  public static func replaceMacro(in urlString: Swift.String) -> Swift.String
}
public protocol ActionHandling : AnyObject {
  func supportedActions() -> [Swift.String : any Any.Type]
  func performAction(actionModel: NovaCore.ActionModel)
}
public struct NovaWebViewNavigationViewModel {
  public let includingStatusBar: Swift.Bool
  public let title: Swift.String?
  public var titleFontSize: CoreFoundation.CGFloat
  public let hideLeftButton: Swift.Bool
  public let leftButtonIcon: UIKit.UIImage?
  public let rightButtonIcon: UIKit.UIImage?
  public let leftButtonTapActionHandler: (() -> Swift.Void)?
  public let rightButtonTapActionHandler: (() -> Swift.Void)?
  public init(includingStatusBar: Swift.Bool = true, title: Swift.String?, titleFontSize: CoreFoundation.CGFloat? = nil, hideLeftButton: Swift.Bool = false, leftButtonIcon: UIKit.UIImage? = nil, leftButtonTapActionHandler: @escaping () -> Swift.Void, rightButtonIcon: UIKit.UIImage? = nil, rightButtonTapActionHandler: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc final public class NovaNativeAdItem : NovaCore.NovaBaseAd {
  @objc final public let headline: Swift.String?
  @objc final public let body: Swift.String?
  final public let isImageClickable: Swift.Bool
  final public let videoInfo: NovaCore.NovaNativeAdVideoInfo?
  @objc final public let callToAction: Swift.String?
  @objc final public let advertiser: Swift.String?
  final public let creativeType: NovaCore.NovaCreativeType?
  final public let iconUrlStr: Swift.String?
  final public let addOnItem: NovaCore.NovaNativeAdInteractiveBanner?
  @objc weak final public var delegate: (any NovaCore.NovaNativeAdDelegate)?
  final public let appStoreId: Swift.String?
  @objc final public let eCPMInDollar: Foundation.Decimal
  @objc final public var cellIndexPath: Foundation.IndexPath?
  @objc final public var dedupUUID: Swift.String?
  @objc final public var impressionLatency: Swift.Double
  final public let isParallax: Swift.Bool
  @objc deinit
  @objc final public func downloadMedia()
}
public struct NovaAppOpenAdActionDataModel {
  public init(url: Foundation.URL, clickTime: Swift.Double, ad: NovaCore.NovaBaseAd)
}
public enum NovaAdBuilder {
  public static func buildNativeAd(adItem: NovaCore.AdItem, adUnitId: Swift.String, eCPMInDollar: Foundation.Decimal, isParallax: Swift.Bool = false) -> NovaCore.NovaNativeAdItem
  public static func buildAppOpenAds(adItems: [NovaCore.AdItem], adUnitId: Swift.String) -> [NovaCore.NovaAppOpenAd]
}
@_hasMissingDesignatedInitializers @objc public class NovaBaseAd : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let adUnitId: Swift.String
  @objc final public let requestId: Swift.String
  @objc final public let adId: Swift.String
  @objc final public let adSetId: Swift.String
  @objc final public let imageUrlStr: Swift.String?
  final public let ctrUrl: Foundation.URL?
  final public let thirdPartyViewTrackingUrls: [Swift.String]
  final public let thirdPartyImpressionTrackingUrls: [Swift.String]
  final public let thirdPartyClickTrackingUrls: [Swift.String]
  @objc final public let encryptedAdToken: Swift.String
  final public let priceInDollar: Swift.Double?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc public func priceInCents() -> Swift.Float
  @objc deinit
}
@objc public protocol NovaNativeAdDelegate {
  @objc func nativeAdDidLogImpression(_ nativeAd: NovaCore.NovaNativeAdItem)
  @objc func nativeAdDidLogClick(_ nativeAd: NovaCore.NovaNativeAdItem, clickAreaName: Swift.String)
  @objc func nativeAdDidFinishRender(_ nativeAd: NovaCore.NovaNativeAdItem)
  @objc func nativeAdRootViewController() -> UIKit.UIViewController?
}
public enum NovaAdSkipReason : Swift.String {
  case timeout
  case error
  case skipButton
  case backButton
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NovaVideoPlayStyle : Swift.String {
  case none
  case feed
  case immersiveFeed
  case previewFeed
  case adInFeed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NovaPlayInfo {
  public init(url: Foundation.URL, playLoops: Swift.Bool, videoDataModel: Any?, playStyle: NovaCore.NovaVideoPlayStyle, isMute: Swift.Bool, disableGesture: Swift.Bool, enableLogging: Swift.Bool = true)
}
public protocol NovaVideoPlayerDelegate : ObjectiveC.NSObjectProtocol {
  func playerReady(_ player: NovaCore.NovaPlayer)
  func playerPlaybackStateDidChange(_ player: NovaCore.NovaPlayer)
  func playerBufferTimeDidChange(_ bufferTime: Swift.Double)
  func playerCurrentTimeDidChange(_ player: NovaCore.NovaPlayer)
  func playerTimePassed60sAfterPlay(_ player: NovaCore.NovaPlayer)
  func player(_ player: NovaCore.NovaPlayer, didFailWithError error: (any Swift.Error)?)
  func playerPlaybackWillLoop(_ player: NovaCore.NovaPlayer)
  func playerPlaybackDidLoop(_ player: NovaCore.NovaPlayer)
  func playerDidPlayToEndTime(_ player: NovaCore.NovaPlayer)
}
public enum NovaVideoEndKind : Swift.String {
  case none
  case pause
  case stopLoadingCache
  case stopAutoPlayInFeed
  case prepareForReuse
  case seek
  case close
  case scroll
  case pull
  case pageInvisible
  public func loggingString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class NovaVideoPlayerController : ObjectiveC.NSObject {
  final public let progressBackgroundBar: NovaCore.NovaVideoProgressView
  @objc override dynamic public init()
  public func configDisplay(_ display: Swift.Bool)
  public func configPlayImage(image: UIKit.UIImage?, size: CoreFoundation.CGSize)
  public func currentTimeInterval() -> Foundation.TimeInterval
  public func isVideoPlaying() -> Swift.Bool
  public func toggleVideoPlay()
  public func videoPlayedTimeElapsed() -> Foundation.TimeInterval
  @objc deinit
}
extension NovaCore.NovaVideoPlayerController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension NovaCore.NovaVideoPlayerController {
  public func play()
  public func pause(endKind: NovaCore.NovaVideoEndKind)
  public func stop(endKind: NovaCore.NovaVideoEndKind)
  public func endPlay(endKind: NovaCore.NovaVideoEndKind)
  public func isPlaying(urlString: Swift.String) -> Swift.Bool
  public func seek(to time: CoreMedia.CMTime, completionHandler: ((Swift.Bool) -> Swift.Void)?)
  public func play(with info: NovaCore.NovaPlayInfo, actionHandler: (any NovaCore.ActionHandling)?, delegate: any NovaCore.NovaVideoPlayerDelegate)
  public func update(fillMode: AVFoundation.AVLayerVideoGravity)
  public func preload(with url: Foundation.URL)
  public func getPlayerView() -> UIKit.UIView
}
extension NovaCore.NovaVideoPlayerController : NovaCore.NovaPlayerDelegate {
  public func playerReady(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackStateDidChange(_ player: NovaCore.NovaPlayer)
  public func playerBufferingStateDidChange(_ player: NovaCore.NovaPlayer)
  public func playerBufferTimeDidChange(_ bufferTime: Swift.Double)
  public func player(_ player: NovaCore.NovaPlayer, didFailWithError error: (any Swift.Error)?)
}
extension NovaCore.NovaVideoPlayerController : NovaCore.NovaPlayerPlaybackDelegate {
  public func playerDidPlayToEndTime(_ player: NovaCore.NovaPlayer)
  public func playerCurrentTimeDidChange(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackWillStartFromBeginning(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackDidEnd(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackWillLoop(_ player: NovaCore.NovaPlayer)
  public func playerPlaybackDidLoop(_ player: NovaCore.NovaPlayer)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class NovaAdsLandingWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var initialLoadDidRedirectTo: ((WebKit.WKWebView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var didGoBackToInitialLoad: ((WebKit.WKWebView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var webViewDidScroll: ((UIKit.UIScrollView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var webViewDidEndDragging: ((UIKit.UIScrollView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(dataModel: NovaCore.NovaAdOpenActionDataModel, navigationModel: NovaCore.NovaWebViewNavigationViewModel? = nil, navigationHeight: CoreFoundation.CGFloat? = nil)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func changeLeftButtonOnNavigation(isHidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func changeWebViewTappable(isEnable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setWebView(offset: CoreFoundation.CGPoint)
}
extension NovaCore.NovaAdsLandingWebViewController : NovaCore.NovaUnifiedWebViewNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency public func openWebPage(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, policyFor navigationAction: WebKit.WKNavigationAction) -> WebKit.WKNavigationActionPolicy?
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency public func webViewInitialLoadDidRedirect(_ webView: WebKit.WKWebView)
  @_Concurrency.MainActor @preconcurrency public func webViewDidGoBackToInitialLoad(_ webView: WebKit.WKWebView)
}
extension NovaCore.NovaAdsLandingWebViewController : NovaCore.NovaWebViewBottomViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func bottomViewDidTapBackButton()
  @_Concurrency.MainActor @preconcurrency public func bottomViewDidTapForwardButton()
}
extension NovaCore.NovaAdsLandingWebViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
}
public class IABMetricReporter {
  public init()
  public func startSession(adView: UIKit.UIView, contentUrl: Swift.String, thirdPartyViewTrackingUrls: [Swift.String], hasVideo: Swift.Bool)
  public func logImpression()
  public func logLoaded()
  public func stopSession()
  public func logVideoStart(duration: CoreFoundation.CGFloat, volume: CoreFoundation.CGFloat)
  public func logVideoProgress(percentage: Swift.Double)
  public func logVideoPause()
  public func logVideoResume()
  public func logVideoVolumeChange(to volume: CoreFoundation.CGFloat)
  @objc deinit
}
public protocol NovaWebViewBottomViewDelegate : AnyObject {
  func bottomViewDidTapBackButton()
  func bottomViewDidTapForwardButton()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class NovaWebViewBottomView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any NovaCore.NovaWebViewBottomViewDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension NovaCore.NovaWebViewBottomView {
  @_Concurrency.MainActor @preconcurrency public func configButton(canGoBack: Swift.Bool? = nil, canGoForward: Swift.Bool? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NovaNativeAdMediaView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let videoView: NovaCore.NovaNativeAdVideoView
  @_Concurrency.MainActor @preconcurrency final public var novaNativeAdVideoDelegate: (any NovaCore.NovaNativeAdVideoDelegate)?
  @objc deinit
  @_Concurrency.MainActor @preconcurrency final public func setNovaNativeAdVideoDelegate(delegate: any NovaCore.NovaNativeAdVideoDelegate)
}
extension NovaCore.NovaNativeAdMediaView {
  @_Concurrency.MainActor @preconcurrency final public func config(with viewModel: NovaCore.NovaNativeAdMediaViewModel, iabReporter: NovaCore.IABMetricReporter?, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency final public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency final public func updateVideoStateOnScroll(containerFrame: CoreFoundation.CGRect, cellFrame: CoreFoundation.CGRect, offset: CoreFoundation.CGPoint, inset: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor @preconcurrency final public func updateVideoStateOnScroll()
  @_Concurrency.MainActor @preconcurrency final public func updateVideoDisplayState(fullyDisplayed: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency final public func willResignActive()
  @objc @_Concurrency.MainActor @preconcurrency final public func didBecomeActive()
  @objc @_Concurrency.MainActor @preconcurrency final public func handleVideoOnScreen()
}
final public class NovaJSBridgeHandlerMaster {
  public init(jsBridgeHandlers: [any NovaCore.NovaJSBridgeHandling])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class NovaAppOpenAd : NovaCore.NovaBaseAd {
  final public let creativeType: NovaCore.NovaCreativeType?
  final public let launchOption: Swift.String?
  final public let startTimeInMs: Swift.Double?
  final public let expirationTimeInMs: Swift.Double?
  final public let headline: Swift.String?
  final public let body: Swift.String?
  final public let callToAction: Swift.String?
  final public let advertiser: Swift.String?
  final public let videoInfo: NovaCore.NovaNativeAdVideoInfo?
  final public let isVerticalImage: Swift.Bool?
  final public let isImageClickable: Swift.Bool?
  final public let closeCountDownTimeSecond: Swift.Int?
  final public let clickableComponents: [Swift.String]?
  final public let iconUrl: Swift.String?
  final public var image: UIKit.UIImage?
  final public let appStoreId: Swift.String?
  @objc weak final public var delegate: (any NovaCore.NovaAppOpenAdDelegate)?
  final public let novaAppOpenAdLayout: NovaCore.NovaAppOpenAdLayout?
  override final public func encode(to encoder: any Swift.Encoder) throws
  final public func present(rootViewController: UIKit.UIViewController)
  final public func preloadAdImage(completion: @escaping (UIKit.UIImage?) -> Swift.Void)
  final public func requestToDisplay(rootViewController: UIKit.UIViewController, adResource: NovaCore.NovaAppOpenAdResource)
  @objc deinit
}
@objc final public class NovaAdOpenActionHandler : ObjectiveC.NSObject {
  public init(viewController: UIKit.UIViewController?)
  @objc deinit
}
extension NovaCore.NovaAdOpenActionHandler : NovaCore.ActionHandling {
  final public func supportedActions() -> [Swift.String : any Any.Type]
  final public func performAction(actionModel: NovaCore.ActionModel)
  final public func SafeAs<T, U>(_ object: T?, _ objectType: U.Type) -> U?
}
@objc public class NovaAppOpenAdViewActionHandler : ObjectiveC.NSObject {
  public init(viewController: UIKit.UIViewController)
  @objc deinit
}
extension NovaCore.NovaAppOpenAdViewActionHandler : NovaCore.ActionHandling {
  public func supportedActions() -> [Swift.String : any Any.Type]
  public func performAction(actionModel: NovaCore.ActionModel)
}
extension NovaCore.NovaAppOpenAdViewActionHandler {
  public func SafeAs<T, U>(_ object: T?, _ objectType: U.Type) -> U?
}
@objc @_inheritsConvenienceInitializers final public class ActionHandlerMaster : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(actionHandlers: [any NovaCore.ActionHandling])
  final public func addActionHandlers(actionHandlers: [any NovaCore.ActionHandling])
  @objc deinit
}
extension NovaCore.ActionHandlerMaster : NovaCore.ActionHandling {
  final public func supportedActions() -> [Swift.String : any Any.Type]
  final public func performAction(actionModel: NovaCore.ActionModel)
}
extension UIKit.UIColor {
  @objc convenience dynamic public init(light: UIKit.UIColor, dark: UIKit.UIColor)
  convenience public init?(light: Swift.String, dark: Swift.String)
  convenience public init?(red: Swift.Int, green: Swift.Int, blue: Swift.Int, alpha: CoreFoundation.CGFloat = 1)
  convenience public init?(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1)
  convenience public init?(ARGB: Swift.String)
  public var rgba: (red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) {
    get
  }
  public var hsba: (hue: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, brightness: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) {
    get
  }
  public var htmlRGB: Swift.String {
    get
  }
  public var htmlRGBA: Swift.String {
    get
  }
  public class var DefaultButton: UIKit.UIColor {
    get
  }
  public class var PressedButton: UIKit.UIColor {
    get
  }
  public class var DefaultButtonIcon: UIKit.UIColor {
    get
  }
  public class var PrimaryButtonBackground: UIKit.UIColor {
    get
  }
  public class var PrimaryButtonText: UIKit.UIColor {
    get
  }
  public class var AIPrimaryText: UIKit.UIColor {
    get
  }
  public class var AISecondaryText: UIKit.UIColor {
    get
  }
  public class var AITertiaryText: UIKit.UIColor {
    get
  }
  public class var AIPrimarySurface: UIKit.UIColor {
    get
  }
  public class var AILocalGPT: UIKit.UIColor {
    get
  }
  public class var AILocalGPTBackground: UIKit.UIColor {
    get
  }
}
extension NovaCore.NovaAdOpenActionKey : Swift.Equatable {}
extension NovaCore.NovaAdOpenActionKey : Swift.Hashable {}
extension NovaCore.NovaAdOpenActionKey : Swift.RawRepresentable {}
extension NovaCore.NovaAppOpenAdViewActionKey : Swift.Equatable {}
extension NovaCore.NovaAppOpenAdViewActionKey : Swift.Hashable {}
extension NovaCore.NovaAppOpenAdViewActionKey : Swift.RawRepresentable {}
extension NovaCore.NovaVideoLogActionKey : Swift.Equatable {}
extension NovaCore.NovaVideoLogActionKey : Swift.Hashable {}
extension NovaCore.NovaVideoLogActionKey : Swift.RawRepresentable {}
extension NovaCore.NovaIcon.NovaSystem : Swift.Equatable {}
extension NovaCore.NovaIcon.NovaSystem : Swift.Hashable {}
extension NovaCore.NovaIcon.NovaSystem : Swift.RawRepresentable {}
extension NovaCore.NovaCreativeType : Swift.Equatable {}
extension NovaCore.NovaCreativeType : Swift.Hashable {}
extension NovaCore.NovaCreativeType : Swift.RawRepresentable {}
extension NovaCore.NovaAppOpenAdLayout : Swift.Equatable {}
extension NovaCore.NovaAppOpenAdLayout : Swift.Hashable {}
extension NovaCore.NovaAppOpenAdLayout : Swift.RawRepresentable {}
extension NovaCore.NovaAppOpenAdClickableComponent : Swift.Equatable {}
extension NovaCore.NovaAppOpenAdClickableComponent : Swift.Hashable {}
extension NovaCore.NovaAppOpenAdClickableComponent : Swift.RawRepresentable {}
extension NovaCore.NovaAdType : Swift.Equatable {}
extension NovaCore.NovaAdType : Swift.Hashable {}
extension NovaCore.NovaAdType : Swift.RawRepresentable {}
extension NovaCore.ClickableAdArea : Swift.Equatable {}
extension NovaCore.ClickableAdArea : Swift.Hashable {}
extension NovaCore.ClickableAdArea : Swift.RawRepresentable {}
extension NovaCore.MetricEvent : Swift.Equatable {}
extension NovaCore.MetricEvent : Swift.Hashable {}
extension NovaCore.MetricEvent : Swift.RawRepresentable {}
extension NovaCore.InteractiveBannerType : Swift.Equatable {}
extension NovaCore.InteractiveBannerType : Swift.Hashable {}
extension NovaCore.InteractiveBannerType : Swift.RawRepresentable {}
extension NovaCore.NovaAdVideoMetricReporter.NovaAdEventPauseReason : Swift.Equatable {}
extension NovaCore.NovaAdVideoMetricReporter.NovaAdEventPauseReason : Swift.Hashable {}
extension NovaCore.NovaAdVideoMetricReporter.NovaAdEventPauseReason : Swift.RawRepresentable {}
extension NovaCore.NovaAdLaunchOption : Swift.Equatable {}
extension NovaCore.NovaAdLaunchOption : Swift.Hashable {}
extension NovaCore.NovaAdLaunchOption : Swift.RawRepresentable {}
extension NovaCore.NovaPlayerError : Swift.Equatable {}
extension NovaCore.NovaPlayerError : Swift.Hashable {}
extension NovaCore.NovaPlayer.PlaybackState : Swift.Equatable {}
extension NovaCore.NovaPlayer.PlaybackState : Swift.Hashable {}
extension NovaCore.NovaPlayer.PlaybackState : Swift.RawRepresentable {}
extension NovaCore.NovaPlayer.BufferingState : Swift.Equatable {}
extension NovaCore.NovaPlayer.BufferingState : Swift.Hashable {}
extension NovaCore.NovaPlayer.BufferingState : Swift.RawRepresentable {}
extension NovaCore.NovaAdSkipReason : Swift.Equatable {}
extension NovaCore.NovaAdSkipReason : Swift.Hashable {}
extension NovaCore.NovaAdSkipReason : Swift.RawRepresentable {}
extension NovaCore.NovaVideoPlayStyle : Swift.Equatable {}
extension NovaCore.NovaVideoPlayStyle : Swift.Hashable {}
extension NovaCore.NovaVideoPlayStyle : Swift.RawRepresentable {}
extension NovaCore.NovaVideoEndKind : Swift.Equatable {}
extension NovaCore.NovaVideoEndKind : Swift.Hashable {}
extension NovaCore.NovaVideoEndKind : Swift.RawRepresentable {}

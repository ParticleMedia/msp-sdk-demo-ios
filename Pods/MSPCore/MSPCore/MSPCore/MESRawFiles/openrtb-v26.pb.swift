// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: openrtb/openrtb-v26.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ***** OpenRTB Core enums ****************************************************
enum Com_Google_Openrtb_AuctionType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case firstPrice // = 1
  case secondPrice // = 2
  case fixedPrice // = 3

  init() {
    self = .firstPrice
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .firstPrice
    case 2: self = .secondPrice
    case 3: self = .fixedPrice
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .firstPrice: return 1
    case .secondPrice: return 2
    case .fixedPrice: return 3
    }
  }

}

/// OpenRTB 2.0: types of ads that can be accepted by the exchange unless
/// restricted by publisher site settings.
enum Com_Google_Openrtb_BannerAdType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// "Usually mobile".
  case xhtmlTextAd // = 1

  /// "Usually mobile".
  case xhtmlBannerAd // = 2

  /// Javascript must be valid XHTML (ie, script tags included).
  case javascriptAd // = 3

  /// Iframe.
  case iframe // = 4

  init() {
    self = .xhtmlTextAd
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .xhtmlTextAd
    case 2: self = .xhtmlBannerAd
    case 3: self = .javascriptAd
    case 4: self = .iframe
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .xhtmlTextAd: return 1
    case .xhtmlBannerAd: return 2
    case .javascriptAd: return 3
    case .iframe: return 4
    }
  }

}

/// OpenRTB 2.0: The following table specifies a standard list of creative
/// attributes that can describe an ad being served or serve as restrictions
/// of thereof.
enum Com_Google_Openrtb_CreativeAttribute: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case audioAutoPlay // = 1
  case audioUserInitiated // = 2
  case expandableAutomatic // = 3
  case expandableClickInitiated // = 4
  case expandableRolloverInitiated // = 5
  case videoInBannerAutoPlay // = 6
  case videoInBannerUserInitiated // = 7

  /// Pop (for example, Over, Under, or upon Exit).
  case pop // = 8
  case provocativeOrSuggestive // = 9

  /// Defined as "Shaky, Flashing, Flickering, Extreme Animation, Smileys".
  case annoying // = 10
  case surveys // = 11
  case textOnly // = 12

  /// For example, embedded games.
  case userInteractive // = 13
  case windowsDialogOrAlertStyle // = 14
  case hasAudioOnOffButton // = 15

  /// Ad provides skip button (for example, VPAID-rendered skip button
  /// on pre-roll video).
  case adCanBeSkipped // = 16

  /// Adobe Flash
  case flash // = 17

  /// Responsive, sizeless and fluid. Dynamically resizes to environment.
  case responsive // = 18

  /// Placeholders
  case placeholderAttr53 // = 53

  init() {
    self = .audioAutoPlay
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .audioAutoPlay
    case 2: self = .audioUserInitiated
    case 3: self = .expandableAutomatic
    case 4: self = .expandableClickInitiated
    case 5: self = .expandableRolloverInitiated
    case 6: self = .videoInBannerAutoPlay
    case 7: self = .videoInBannerUserInitiated
    case 8: self = .pop
    case 9: self = .provocativeOrSuggestive
    case 10: self = .annoying
    case 11: self = .surveys
    case 12: self = .textOnly
    case 13: self = .userInteractive
    case 14: self = .windowsDialogOrAlertStyle
    case 15: self = .hasAudioOnOffButton
    case 16: self = .adCanBeSkipped
    case 17: self = .flash
    case 18: self = .responsive
    case 53: self = .placeholderAttr53
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .audioAutoPlay: return 1
    case .audioUserInitiated: return 2
    case .expandableAutomatic: return 3
    case .expandableClickInitiated: return 4
    case .expandableRolloverInitiated: return 5
    case .videoInBannerAutoPlay: return 6
    case .videoInBannerUserInitiated: return 7
    case .pop: return 8
    case .provocativeOrSuggestive: return 9
    case .annoying: return 10
    case .surveys: return 11
    case .textOnly: return 12
    case .userInteractive: return 13
    case .windowsDialogOrAlertStyle: return 14
    case .hasAudioOnOffButton: return 15
    case .adCanBeSkipped: return 16
    case .flash: return 17
    case .responsive: return 18
    case .placeholderAttr53: return 53
    }
  }

}

/// OpenRTB 2.0: The following table is a list of API frameworks supported
/// by the publisher. Note that MRAID-1 is a subset of MRAID-2.
/// In OpenRTB 2.1 and prior, value "3" was "MRAID". However, not all
/// MRAID capable APIs understand MRAID-2 features and as such the only
/// safe interpretation of value "3" is MRAID-1. In OpenRTB 2.2, this was
/// made explicit and MRAID-2 has been added as value "5".
enum Com_Google_Openrtb_APIFramework: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Video Player-Ad Interface Definition Version 1.0. See
  /// https://iabtechlab.com/wp-content/uploads/2016/03/VPAID_1.0_Final.pdf
  case vpaid1 // = 1

  /// Video Player-Ad Interface Definition Version 2.0. See
  /// https://iabtechlab.com/wp-content/uploads/2016/04/VPAID_2_0_Final_04-10-2012.pdf
  case vpaid2 // = 2

  /// Mobile Rich Media Ad Interface Definitions Version 1.0. See
  /// https://www.iab.com/guidelines/mraid/.
  case mraid1 // = 3

  /// Open Rich Media Mobile Advertising. See
  /// https://code.google.com/archive/p/ormma/
  case ormma // = 4

  /// Mobile Rich Media Ad Interface Definitions Version 2.0. See
  /// https://www.iab.com/guidelines/mraid/.
  case mraid2 // = 5

  /// Mobile Rich Media Ad Interface Definitions Version 3.0. See
  /// https://www.iab.com/guidelines/mraid/.
  case mraid3 // = 6

  /// Open Measurement Interface Definition Version 1.0. See
  /// https://iabtechlab.com/standards/open-measurement-sdk/.
  case omid1 // = 7

  /// Secure Interactive Media Interface Definition Version 1.0.
  /// See https://iabtechlab.com/simid/.
  case simid10 // = 8

  /// Secure Interactive Media Interface Definition Version 1.1.
  /// See https://iabtechlab.com/simid/.
  case simid11 // = 9

  init() {
    self = .vpaid1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .vpaid1
    case 2: self = .vpaid2
    case 3: self = .mraid1
    case 4: self = .ormma
    case 5: self = .mraid2
    case 6: self = .mraid3
    case 7: self = .omid1
    case 8: self = .simid10
    case 9: self = .simid11
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .vpaid1: return 1
    case .vpaid2: return 2
    case .mraid1: return 3
    case .ormma: return 4
    case .mraid2: return 5
    case .mraid3: return 6
    case .omid1: return 7
    case .simid10: return 8
    case .simid11: return 9
    }
  }

}

/// OpenRTB 2.0: The following table specifies the position of the ad as a
/// relative measure of visibility or prominence.
///
/// This OpenRTB table has values derived from the IAB Quality Assurance
/// Guidelines (QAG). Practitioners should keep in sync with updates to the
/// QAG values as published on IAB.net. Values "3" - "6" apply to apps
/// per the mobile addendum to QAG version 1.5.
enum Com_Google_Openrtb_AdPosition: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case aboveTheFold // = 1

  /// Fixed position.
  case locked // = 2
  case belowTheFold // = 3

  /// Horizontal slot that sticks on the top of the screen when user scrolls.
  case header // = 4

  /// Horizontal slot that sticks on the bottom of the screen when user scrolls.
  case footer // = 5

  /// Sidebar that sticks on screen when user scrolls.
  case sidebar // = 6
  case fullscreen // = 7

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .aboveTheFold
    case 2: self = .locked
    case 3: self = .belowTheFold
    case 4: self = .header
    case 5: self = .footer
    case 6: self = .sidebar
    case 7: self = .fullscreen
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .aboveTheFold: return 1
    case .locked: return 2
    case .belowTheFold: return 3
    case .header: return 4
    case .footer: return 5
    case .sidebar: return 6
    case .fullscreen: return 7
    }
  }

}

/// OpenRTB 2.0: The following table indicates the options for video
/// linearity. "In-stream" or "linear" video refers to pre-roll, post-roll,
/// or mid-roll video ads where the user is forced to watch ad in order to
/// see the video content. "Overlay" or "non-linear" refer to ads that are
/// shown on top of the video content.
///
/// This field is optional. The following is the interpretation of the
/// bidder based upon presence or absence of the field in the bid request:
/// - If no value is set, any ad (linear or not) can be present
///   in the response.
/// - If a value is set, only ads of the corresponding type can be present
///   in the response.
///
/// This OpenRTB table has values derived from the IAB Quality Assurance
/// Guidelines (QAG). Practitioners should keep in sync with updates to the
/// QAG values as published on IAB.net.
enum Com_Google_Openrtb_VideoLinearity: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Linear/In-stream
  case linear // = 1

  /// Non-linear/Overlay
  case nonLinear // = 2

  init() {
    self = .linear
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .linear
    case 2: self = .nonLinear
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .linear: return 1
    case .nonLinear: return 2
    }
  }

}

/// OpenRTB 2.0: The following table lists the options for the various
/// bid response protocols that could be supported by an exchange.
enum Com_Google_Openrtb_Protocol: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case vast10 // = 1
  case vast20 // = 2
  case vast30 // = 3
  case vast10Wrapper // = 4
  case vast20Wrapper // = 5
  case vast30Wrapper // = 6
  case vast40 // = 7
  case vast40Wrapper // = 8
  case daast10 // = 9
  case daast10Wrapper // = 10
  case vast41 // = 11
  case vast41Wrapper // = 12
  case vast42 // = 13
  case vast42Wrapper // = 14

  init() {
    self = .vast10
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .vast10
    case 2: self = .vast20
    case 3: self = .vast30
    case 4: self = .vast10Wrapper
    case 5: self = .vast20Wrapper
    case 6: self = .vast30Wrapper
    case 7: self = .vast40
    case 8: self = .vast40Wrapper
    case 9: self = .daast10
    case 10: self = .daast10Wrapper
    case 11: self = .vast41
    case 12: self = .vast41Wrapper
    case 13: self = .vast42
    case 14: self = .vast42Wrapper
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .vast10: return 1
    case .vast20: return 2
    case .vast30: return 3
    case .vast10Wrapper: return 4
    case .vast20Wrapper: return 5
    case .vast30Wrapper: return 6
    case .vast40: return 7
    case .vast40Wrapper: return 8
    case .daast10: return 9
    case .daast10Wrapper: return 10
    case .vast41: return 11
    case .vast41Wrapper: return 12
    case .vast42: return 13
    case .vast42Wrapper: return 14
    }
  }

}

/// OpenRTB 2.0: The following table lists the various playback methods.
enum Com_Google_Openrtb_PlaybackMethod: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Initiates on Page Load with Sound On.
  case autoPlaySoundOn // = 1

  /// Initiates on Page Load with Sound Off by Default.
  case autoPlaySoundOff // = 2

  /// Initiates on Click with Sound On.
  case clickToPlay // = 3

  /// Initiates on Mouse-Over with Sound On.
  case mouseOver // = 4

  /// Initiates on Entering Viewport with Sound On.
  case enterSoundOn // = 5

  /// Initiates on Entering Viewport with Sound Off by Default.
  case enterSoundOff // = 6

  /// Media playback is set to play additional media automatically without
  /// user interaction. The media player will keep playing additional media
  /// (playlist or generated) for the user until the user actively stops this
  /// from happening.
  case continuous // = 7

  init() {
    self = .autoPlaySoundOn
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .autoPlaySoundOn
    case 2: self = .autoPlaySoundOff
    case 3: self = .clickToPlay
    case 4: self = .mouseOver
    case 5: self = .enterSoundOn
    case 6: self = .enterSoundOff
    case 7: self = .continuous
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .autoPlaySoundOn: return 1
    case .autoPlaySoundOff: return 2
    case .clickToPlay: return 3
    case .mouseOver: return 4
    case .enterSoundOn: return 5
    case .enterSoundOff: return 6
    case .continuous: return 7
    }
  }

}

/// OpenRTB 2.0: The following table lists the various options for the
/// audio/video start delay. If the start delay value is greater than 0,
/// then the position is mid-roll and the value indicates the start delay.
enum Com_Google_Openrtb_StartDelay: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case preRoll // = 0
  case genericMidRoll // = -1
  case genericPostRoll // = -2

  init() {
    self = .preRoll
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -2: self = .genericPostRoll
    case -1: self = .genericMidRoll
    case 0: self = .preRoll
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .genericPostRoll: return -2
    case .genericMidRoll: return -1
    case .preRoll: return 0
    }
  }

}

/// OpenRTB 2.5: The following table lists the various types of video placements
/// derived largely from the IAB Digital Video Guidelines.
enum Com_Google_Openrtb_VideoPlacementType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// The video placement is not defined.
  /// Default value.
  case undefinedVideoPlacement // = 0

  /// Played before, during or after the streaming video content
  /// that the consumer has requested.
  /// For example: Pre-roll, Mid-roll, Post-roll.
  case inStreamPlacement // = 1

  /// Exists within a web banner that leverages the banner space
  /// to deliver a video experience as opposed to another static
  /// or rich media format.
  /// The format relies on the existence of display ad inventory
  /// on the page for its delivery.
  case inBannerPlacement // = 2

  /// Loads and plays dynamically between paragraphs of editorial content;
  /// existing as a standalone branded message.
  case inArticlePlacement // = 3

  /// In-Feed - Found in content, social, or product feeds.
  case inFeedPlacement // = 4

  /// Interstitial/Slider/Floating.
  /// Covers the entire or a portion of screen area,
  /// but is always on screen while displayed
  /// (for example, cannot be scrolled out of view).
  /// Note that a full-screen interstitial (for example, in mobile)
  /// can be distinguished from a floating/slider unit by the imp.instl field.
  case floatingPlacement // = 5

  init() {
    self = .undefinedVideoPlacement
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefinedVideoPlacement
    case 1: self = .inStreamPlacement
    case 2: self = .inBannerPlacement
    case 3: self = .inArticlePlacement
    case 4: self = .inFeedPlacement
    case 5: self = .floatingPlacement
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .undefinedVideoPlacement: return 0
    case .inStreamPlacement: return 1
    case .inBannerPlacement: return 2
    case .inArticlePlacement: return 3
    case .inFeedPlacement: return 4
    case .floatingPlacement: return 5
    }
  }

}

/// Possible video placement types. See:
/// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/AdCOM%20v1.0%20FINAL.md#list--plcmt-subtypes---video-
enum Com_Google_Openrtb_Plcmt: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0

  /// Pre-roll, mid-roll, and post-roll ads that are played before, during or
  /// after the streaming video content that the consumer has requested. Instream
  /// video must be set to “sound on” by default at player start, or have
  /// explicitly clear user intent to watch the video content. While there may be
  /// other content surrounding the player, the video content must be the focus
  /// of the user’s visit. It should remain the primary content on the page and
  /// the only video player in-view capable of audio when playing. If the player
  /// converts to floating/sticky, subsequent ad calls should accurately convey
  /// the updated player size.
  case instream // = 1

  /// Pre-roll, mid-roll, and post-roll ads that are played before, during, or
  /// after streaming video content. The video player loads and plays before,
  /// between, or after paragraphs of text or graphical content, and starts
  /// playing only when it enters the viewport. Accompanying content should only
  /// start playback upon entering the viewport. It may convert to a
  /// floating/sticky player as it scrolls off the page.
  case accompanyingContent // = 2

  /// Video ads that are played without video content. During playback, it must
  /// be the primary focus of the page and take up the majority of the viewport
  /// and cannot be scrolled out of view. This can be in placements like in-app
  /// video or slideshows.
  case interstitial // = 3

  /// Video ads that are played without streaming video content. This can be in
  /// placements like slideshows, native feeds, in-content or sticky/floating.
  case noContentStandalone // = 4

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .instream
    case 2: self = .accompanyingContent
    case 3: self = .interstitial
    case 4: self = .noContentStandalone
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .instream: return 1
    case .accompanyingContent: return 2
    case .interstitial: return 3
    case .noContentStandalone: return 4
    }
  }

}

/// OpenRTB 2.5: The various modes for when playback terminates.
enum Com_Google_Openrtb_PlaybackCessationMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// On Video Completion or when Terminated by User
  case completionOrUser // = 1

  /// On Leaving Viewport or when Terminated by User
  case leavingOrUser // = 2

  /// On Leaving Viewport Continues as a Floating/Slider Unit until
  /// Video Completion or when Terminated by User
  case leavingContinuesOrUser // = 3

  init() {
    self = .completionOrUser
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .completionOrUser
    case 2: self = .leavingOrUser
    case 3: self = .leavingContinuesOrUser
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .completionOrUser: return 1
    case .leavingOrUser: return 2
    case .leavingContinuesOrUser: return 3
    }
  }

}

/// OpenRTB 2.6: Slot Position in Pod.
enum Com_Google_Openrtb_SlotPositionInPod: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Any position in the pod.
  case slotPositionPodAny // = 0

  /// Last position in the pod.
  case slotPositionPodLast // = -1

  /// First position in the pod.
  case slotPositionPodFirst // = 1

  /// First or last position in the pod.
  case slotPositionPodFirstOrLast // = 2

  init() {
    self = .slotPositionPodAny
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .slotPositionPodLast
    case 0: self = .slotPositionPodAny
    case 1: self = .slotPositionPodFirst
    case 2: self = .slotPositionPodFirstOrLast
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .slotPositionPodLast: return -1
    case .slotPositionPodAny: return 0
    case .slotPositionPodFirst: return 1
    case .slotPositionPodFirstOrLast: return 2
    }
  }

}

/// OpenRTB 2.6: The values for the pod sequence field, for use in audio and
/// video content streams with one or more ad pods.
enum Com_Google_Openrtb_PodSequence: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Any pod in the content stream
  case any // = 0

  /// Last pod in the content stream
  case last // = -1

  /// First pod in the content stream
  case first // = 1

  init() {
    self = .any
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .last
    case 0: self = .any
    case 1: self = .first
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .last: return -1
    case .any: return 0
    case .first: return 1
    }
  }

}

/// OpenRTB 2.0: The following table lists the various options for the
/// type of device connectivity.
enum Com_Google_Openrtb_ConnectionType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case connectionUnknown // = 0

  /// Ethernet; Wired Connection
  case ethernet // = 1

  /// WiFi
  case wifi // = 2

  /// Mobile Network - Unknown Generation
  case cellUnknown // = 3

  /// Mobile Network - 2G
  case cell2G // = 4

  /// Mobile Network - 3G
  case cell3G // = 5

  /// Mobile Network - 4G
  case cell4G // = 6

  /// Mobile Network - 5G
  case cell5G // = 7

  init() {
    self = .connectionUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .connectionUnknown
    case 1: self = .ethernet
    case 2: self = .wifi
    case 3: self = .cellUnknown
    case 4: self = .cell2G
    case 5: self = .cell3G
    case 6: self = .cell4G
    case 7: self = .cell5G
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .connectionUnknown: return 0
    case .ethernet: return 1
    case .wifi: return 2
    case .cellUnknown: return 3
    case .cell2G: return 4
    case .cell3G: return 5
    case .cell4G: return 6
    case .cell5G: return 7
    }
  }

}

/// OpenRTB 2.0: The following table lists the directions in which an
/// expandable ad may expand, given the positioning of the ad unit on the
/// page and constraints imposed by the content.
enum Com_Google_Openrtb_ExpandableDirection: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case left // = 1
  case right // = 2
  case up // = 3
  case down // = 4
  case expandableFullscreen // = 5

  /// Resize/Minimize (make smaller).
  case resizeMinimize // = 6

  init() {
    self = .left
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .left
    case 2: self = .right
    case 3: self = .up
    case 4: self = .down
    case 5: self = .expandableFullscreen
    case 6: self = .resizeMinimize
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .left: return 1
    case .right: return 2
    case .up: return 3
    case .down: return 4
    case .expandableFullscreen: return 5
    case .resizeMinimize: return 6
    }
  }

}

/// OpenRTB 2.0: The following table lists the various options for the
/// delivery of video content. These values are defined by the IAB -
/// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/main/AdCOM%20v1.0%20FINAL.md#list--delivery-methods-.
enum Com_Google_Openrtb_ContentDeliveryMethod: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Content is transferred continuously by the network; clients receive
  /// real-time content for playback while connected. Example: broadcast TV.
  case streaming // = 1

  /// Content is transferred incrementally as client's playback requires.
  /// Example: on-demand movies, podcasts, or music.
  case progressive // = 2

  /// Content should be transferred completely prior to use/playback.
  /// Example: content downloaded to the user's device for offline
  /// consumption.
  case download // = 3

  init() {
    self = .streaming
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .streaming
    case 2: self = .progressive
    case 3: self = .download
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .streaming: return 1
    case .progressive: return 2
    case .download: return 3
    }
  }

}

/// OpenRTB 2.0: The following table lists the various options for
/// indicating the type of content in which the impression will appear.
///
/// This OpenRTB table has values derived from the IAB Quality Assurance
/// Guidelines (QAG). Practitioners should keep in sync with updates to the
/// QAG values as published on IAB.net.
enum Com_Google_Openrtb_ContentContext: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case video // = 1
  case game // = 2
  case music // = 3
  case application // = 4
  case text // = 5
  case other // = 6
  case contextUnknown // = 7

  init() {
    self = .video
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .video
    case 2: self = .game
    case 3: self = .music
    case 4: self = .application
    case 5: self = .text
    case 6: self = .other
    case 7: self = .contextUnknown
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .video: return 1
    case .game: return 2
    case .music: return 3
    case .application: return 4
    case .text: return 5
    case .other: return 6
    case .contextUnknown: return 7
    }
  }

}

/// OpenRTB 2.0: The following table lists the options for content quality.
/// These values are defined by the IAB -
/// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/main/AdCOM%20v1.0%20FINAL.md#list--production-qualities-.
enum Com_Google_Openrtb_ProductionQuality: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case qualityUnknown // = 0

  /// Content that is usually created or produced by media and entertainment
  /// companies using professional-grade equipment, talent, and production
  /// crews that hold or maintain the rights for distribution and syndication.
  case professional // = 1

  /// Consumer or user-generated content that has professional or industrial
  /// qualities (e.g. shot with professional-grade equipment, using
  /// professional talent, etc.).
  case prosumer // = 2

  /// Publicly available video content that is created or produced by
  /// end users.
  case userGenerated // = 3

  init() {
    self = .qualityUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .qualityUnknown
    case 1: self = .professional
    case 2: self = .prosumer
    case 3: self = .userGenerated
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .qualityUnknown: return 0
    case .professional: return 1
    case .prosumer: return 2
    case .userGenerated: return 3
    }
  }

}

/// OpenRTB 2.0: The following table lists the options to indicate how the
/// geographic information was determined.
enum Com_Google_Openrtb_LocationType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// GPS / Location Services.
  case gpsLocation // = 1

  /// IP Geolocation.
  case ip // = 2

  /// User-provided, for example, registration data.
  case userProvided // = 3

  init() {
    self = .gpsLocation
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .gpsLocation
    case 2: self = .ip
    case 3: self = .userProvided
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .gpsLocation: return 1
    case .ip: return 2
    case .userProvided: return 3
    }
  }

}

/// OpenRTB 2.4: The following table lists the services and/or vendors used for
/// resolving IP addresses to geolocations.
enum Com_Google_Openrtb_LocationService: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case ip2Location // = 1
  case neustar // = 2
  case maxmind // = 3
  case netacuity // = 4

  init() {
    self = .ip2Location
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .ip2Location
    case 2: self = .neustar
    case 3: self = .maxmind
    case 4: self = .netacuity
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .ip2Location: return 1
    case .neustar: return 2
    case .maxmind: return 3
    case .netacuity: return 4
    }
  }

}

/// OpenRTB 2.0: The following table lists the type of device from which the
/// impression originated.
///
/// OpenRTB version 2.2 of the specification added distinct values for Mobile
/// and Tablet. It is recommended that any bidder adding support for 2.2
/// treat a value of 1 as an acceptable alias of 4 & 5.
///
/// This OpenRTB table has values derived from the IAB Quality Assurance
/// Guidelines (QAG). Practitioners should keep in sync with updates to the
/// QAG values as published on IAB.net.
enum Com_Google_Openrtb_DeviceType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Mobile (OpenRTB 2.2+: obsolete, alias for PHONE or TABLET).
  case mobile // = 1

  /// Personal Computer.
  case personalComputer // = 2

  /// Connected TV.
  case connectedTv // = 3

  /// Phone.
  case highendPhone // = 4

  /// Tablet.
  case tablet // = 5

  /// Connected device.
  case connectedDevice // = 6

  /// Set top box.
  case setTopBox // = 7

  /// Out-of-home advertising, for example digital billboards.
  case oohDevice // = 8

  init() {
    self = .mobile
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .mobile
    case 2: self = .personalComputer
    case 3: self = .connectedTv
    case 4: self = .highendPhone
    case 5: self = .tablet
    case 6: self = .connectedDevice
    case 7: self = .setTopBox
    case 8: self = .oohDevice
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .mobile: return 1
    case .personalComputer: return 2
    case .connectedTv: return 3
    case .highendPhone: return 4
    case .tablet: return 5
    case .connectedDevice: return 6
    case .setTopBox: return 7
    case .oohDevice: return 8
    }
  }

}

/// OpenRTB 2.1: The following table lists the options for the
/// video quality. These values are defined by the IAB -
/// http://www.iab.net/media/file/long-form-video-final.pdf.
enum Com_Google_Openrtb_CompanionType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case `static` // = 1
  case html // = 2
  case companionIframe // = 3

  init() {
    self = .static
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .static
    case 2: self = .html
    case 3: self = .companionIframe
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .static: return 1
    case .html: return 2
    case .companionIframe: return 3
    }
  }

}

/// OpenRTB 2.1: The following table lists the media ratings used in
/// describing content based on the QAG categorization.
/// Refer to http://www.iab.net/ne_guidelines for more information.
enum Com_Google_Openrtb_QAGMediaRating: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case allAudiences // = 1
  case everyoneOver12 // = 2
  case mature // = 3

  init() {
    self = .allAudiences
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .allAudiences
    case 2: self = .everyoneOver12
    case 3: self = .mature
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .allAudiences: return 1
    case .everyoneOver12: return 2
    case .mature: return 3
    }
  }

}

/// OpenRTB 2.2: The following table lists the options for a bidder to signal
/// the exchange as to why it did not offer a bid for the impression.
enum Com_Google_Openrtb_NoBidReason: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknownError // = 0
  case technicalError // = 1
  case invalidRequest // = 2
  case knownWebSpider // = 3
  case suspectedNonhumanTraffic // = 4
  case cloudDatacenterProxyip // = 5
  case unsupportedDevice // = 6
  case blockedPublisher // = 7
  case unmatchedUser // = 8
  case dailyReaderCap // = 9
  case dailyDomainCap // = 10

  init() {
    self = .unknownError
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownError
    case 1: self = .technicalError
    case 2: self = .invalidRequest
    case 3: self = .knownWebSpider
    case 4: self = .suspectedNonhumanTraffic
    case 5: self = .cloudDatacenterProxyip
    case 6: self = .unsupportedDevice
    case 7: self = .blockedPublisher
    case 8: self = .unmatchedUser
    case 9: self = .dailyReaderCap
    case 10: self = .dailyDomainCap
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownError: return 0
    case .technicalError: return 1
    case .invalidRequest: return 2
    case .knownWebSpider: return 3
    case .suspectedNonhumanTraffic: return 4
    case .cloudDatacenterProxyip: return 5
    case .unsupportedDevice: return 6
    case .blockedPublisher: return 7
    case .unmatchedUser: return 8
    case .dailyReaderCap: return 9
    case .dailyDomainCap: return 10
    }
  }

}

/// OpenRTB 2.5: The following table lists the options for an exchange
/// to inform a bidder as to the reason why they did not win an impression.
enum Com_Google_Openrtb_LossReason: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case bidWon // = 0
  case internalError // = 1
  case impExpired // = 2
  case invalidBid // = 3
  case invalidDealID // = 4
  case invalidAuctionID // = 5
  case invalidAdomain // = 6
  case missingMarkup // = 7
  case missingCreativeID // = 8
  case missingPrice // = 9
  case missingMinCreativeApprovalData // = 10
  case bidBelowFloor // = 100
  case bidBelowDealFloor // = 101
  case lostHigherBid // = 102
  case lostPmpDeal // = 103
  case seatBlocked // = 104
  case creativeReasonUnknown // = 200
  case creativePending // = 201
  case creativeDisapproved // = 202
  case creativeSize // = 203
  case creativeFormat // = 204
  case creativeAdvertiserExclusion // = 205
  case creativeAppExclusion // = 206
  case creativeNotSecure // = 207
  case creativeLanguageExclusion // = 208
  case creativeCategoryExclusion // = 209
  case creativeAttributeExclusion // = 210
  case creativeAdtypeExclusion // = 211
  case creativeAnimationLong // = 212
  case creativeNotAllowedPmp // = 213

  init() {
    self = .bidWon
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .bidWon
    case 1: self = .internalError
    case 2: self = .impExpired
    case 3: self = .invalidBid
    case 4: self = .invalidDealID
    case 5: self = .invalidAuctionID
    case 6: self = .invalidAdomain
    case 7: self = .missingMarkup
    case 8: self = .missingCreativeID
    case 9: self = .missingPrice
    case 10: self = .missingMinCreativeApprovalData
    case 100: self = .bidBelowFloor
    case 101: self = .bidBelowDealFloor
    case 102: self = .lostHigherBid
    case 103: self = .lostPmpDeal
    case 104: self = .seatBlocked
    case 200: self = .creativeReasonUnknown
    case 201: self = .creativePending
    case 202: self = .creativeDisapproved
    case 203: self = .creativeSize
    case 204: self = .creativeFormat
    case 205: self = .creativeAdvertiserExclusion
    case 206: self = .creativeAppExclusion
    case 207: self = .creativeNotSecure
    case 208: self = .creativeLanguageExclusion
    case 209: self = .creativeCategoryExclusion
    case 210: self = .creativeAttributeExclusion
    case 211: self = .creativeAdtypeExclusion
    case 212: self = .creativeAnimationLong
    case 213: self = .creativeNotAllowedPmp
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .bidWon: return 0
    case .internalError: return 1
    case .impExpired: return 2
    case .invalidBid: return 3
    case .invalidDealID: return 4
    case .invalidAuctionID: return 5
    case .invalidAdomain: return 6
    case .missingMarkup: return 7
    case .missingCreativeID: return 8
    case .missingPrice: return 9
    case .missingMinCreativeApprovalData: return 10
    case .bidBelowFloor: return 100
    case .bidBelowDealFloor: return 101
    case .lostHigherBid: return 102
    case .lostPmpDeal: return 103
    case .seatBlocked: return 104
    case .creativeReasonUnknown: return 200
    case .creativePending: return 201
    case .creativeDisapproved: return 202
    case .creativeSize: return 203
    case .creativeFormat: return 204
    case .creativeAdvertiserExclusion: return 205
    case .creativeAppExclusion: return 206
    case .creativeNotSecure: return 207
    case .creativeLanguageExclusion: return 208
    case .creativeCategoryExclusion: return 209
    case .creativeAttributeExclusion: return 210
    case .creativeAdtypeExclusion: return 211
    case .creativeAnimationLong: return 212
    case .creativeNotAllowedPmp: return 213
    }
  }

}

/// OpenRTB 2.4: The following table lists the types of feeds,
/// typically for audio. These values are defined by the IAB -
/// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/AdCOM%20v1.0%20FINAL.md#list--feed-types-.
enum Com_Google_Openrtb_FeedType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Music streaming service.
  case musicService // = 1

  /// Live content broadcast over the air but also available through online
  /// streaming.
  case broadcast // = 2

  /// Original, pre-recorded content distributed as episodes in a series.
  case podcast // = 3

  init() {
    self = .musicService
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .musicService
    case 2: self = .broadcast
    case 3: self = .podcast
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .musicService: return 1
    case .broadcast: return 2
    case .podcast: return 3
    }
  }

}

/// OpenRTB 2.4: The following table lists the types of volume normalization
/// modes, typically for audio.
enum Com_Google_Openrtb_VolumeNormalizationMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case none // = 0
  case averageVolume // = 1
  case peakVolume // = 2
  case loudness // = 3
  case customVolume // = 4

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .averageVolume
    case 2: self = .peakVolume
    case 3: self = .loudness
    case 4: self = .customVolume
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .averageVolume: return 1
    case .peakVolume: return 2
    case .loudness: return 3
    case .customVolume: return 4
    }
  }

}

/// Possible sources for User-Agent data.
enum Com_Google_Openrtb_UserAgentSource: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknownSource // = 0

  /// User-Agent Client Hints (only low-entropy headers were available).
  case clientHintsLowEntropy // = 1

  /// User-Agent Client Hints (with high-entropy headers available).
  case clientHintsHighEntropy // = 2

  /// Parsed from User-Agent header.
  case userAgentString // = 3

  init() {
    self = .unknownSource
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownSource
    case 1: self = .clientHintsLowEntropy
    case 2: self = .clientHintsHighEntropy
    case 3: self = .userAgentString
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownSource: return 0
    case .clientHintsLowEntropy: return 1
    case .clientHintsHighEntropy: return 2
    case .userAgentString: return 3
    }
  }

}

/// OpenRTB 2.6: Creative markup types.
enum Com_Google_Openrtb_CreativeMarkupType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Ad markup returned as HTML code in response to the BidRequest.imp.banner
  /// object specification.
  case creativeMarkupBanner // = 1

  /// VAST URL or inline VAST XML document returned that represents a video ad in
  /// response to the BidRequest.imp.video object specification.
  case creativeMarkupVideo // = 2

  /// VAST URL or inline VAST XML document that represents an audio ad returned
  /// in response to the BidRequest.imp.audio object specification.
  case creativeMarkupAudio // = 3

  /// Native markup response object returned as per for the BidRequest.imp.native
  /// object specification.
  case creativeMarkupNative // = 4

  init() {
    self = .creativeMarkupBanner
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .creativeMarkupBanner
    case 2: self = .creativeMarkupVideo
    case 3: self = .creativeMarkupAudio
    case 4: self = .creativeMarkupNative
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .creativeMarkupBanner: return 1
    case .creativeMarkupVideo: return 2
    case .creativeMarkupAudio: return 3
    case .creativeMarkupNative: return 4
    }
  }

}

/// OpenRTB 2.6: Server-side ad insertion type.
enum Com_Google_Openrtb_ServerSideAdInsertionType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Status unknown.
  case unknown // = 0

  /// All clientside (not server-side).
  case clientSideOnly // = 1

  /// Assets stitched server-side but tracking pixels fired client-side.
  case serverSideStitchedClientTracker // = 2

  /// All server-side.
  case serverSideOnly // = 3

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .clientSideOnly
    case 2: self = .serverSideStitchedClientTracker
    case 3: self = .serverSideOnly
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .clientSideOnly: return 1
    case .serverSideStitchedClientTracker: return 2
    case .serverSideOnly: return 3
    }
  }

}

/// OpenRTB 2.6: The user agent types a user identifier is from.
/// Not supported by Google.
enum Com_Google_Openrtb_AgentType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// An ID which is tied to a specific web browser or device (cookie-based,
  /// probabilistic, or other).
  case browserOrDevice // = 1

  /// In-app impressions, which will typically contain a type of device ID
  /// (or rather, the privacy-compliant versions of device IDs).
  case inAppImpression // = 2

  /// An identifier that is the same across devices.
  case stableID // = 3

  init() {
    self = .browserOrDevice
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .browserOrDevice
    case 2: self = .inAppImpression
    case 3: self = .stableID
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .browserOrDevice: return 1
    case .inAppImpression: return 2
    case .stableID: return 3
    }
  }

}

/// OpenRTB 2.6: The options for taxonomies that can be used to describe content,
/// audience, and ad creative categories.
enum Com_Google_Openrtb_CategoryTaxonomy: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// DEPRECATED in OpenRTB 2.6+.
  /// IAB Tech Lab Content Category Taxonomy 1.0.
  ///
  /// NOTE: This enum value was marked as deprecated in the .proto file
  case iabContent10 // = 1

  /// DEPRECATED in OpenRTB 2.6+.
  /// IAB Tech Lab Content Category Taxonomy 2.0.
  ///
  /// NOTE: This enum value was marked as deprecated in the .proto file
  case iabContent20 // = 2

  /// IAB Tech Lab Ad Product Taxonomy 1.0. See:
  /// https://iabtechlab.com/wp-content/uploads/2020/10/IABTL-Ad-Product-Taxonomy-1.0-Final.xlsx
  case iabProduct10 // = 3

  /// IAB Tech Lab Audience Taxonomy 1.1. See:
  /// https://iabtechlab.com/standards/audience-taxonomy/
  case iabAudience11 // = 4

  /// IAB Tech Lab Content Taxonomy 2.1. See:
  /// https://iabtechlab.com/standards/content-taxonomy/
  case iabContent21 // = 5

  /// IAB Tech Lab Content Taxonomy 2.2. See:
  /// https://iabtechlab.com/standards/content-taxonomy/
  case iabContent22 // = 6

  /// Exchange-specific values above 500.
  ///
  /// Chromium Topics API taxonomy. See:
  /// https://github.com/patcg-individual-drafts/topics/blob/main/taxonomy_v1.md
  case chromeTopics // = 600

  init() {
    self = .iabContent10
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .iabContent10
    case 2: self = .iabContent20
    case 3: self = .iabProduct10
    case 4: self = .iabAudience11
    case 5: self = .iabContent21
    case 6: self = .iabContent22
    case 600: self = .chromeTopics
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .iabContent10: return 1
    case .iabContent20: return 2
    case .iabProduct10: return 3
    case .iabAudience11: return 4
    case .iabContent21: return 5
    case .iabContent22: return 6
    case .chromeTopics: return 600
    }
  }

}

/// ***** OpenRTB Native enums **************************************************
///
/// DEPRECATED in OpenRTB Native 1.1, REMOVED in 1.2+.
enum Com_Google_Openrtb_LayoutId: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case contentWall // = 1
  case appWall // = 2
  case newsFeed // = 3
  case chatList // = 4
  case carousel // = 5
  case contentStream // = 6
  case grid // = 7

  init() {
    self = .contentWall
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .contentWall
    case 2: self = .appWall
    case 3: self = .newsFeed
    case 4: self = .chatList
    case 5: self = .carousel
    case 6: self = .contentStream
    case 7: self = .grid
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .contentWall: return 1
    case .appWall: return 2
    case .newsFeed: return 3
    case .chatList: return 4
    case .carousel: return 5
    case .contentStream: return 6
    case .grid: return 7
    }
  }

}

/// DEPRECATED in OpenRTB Native 1.1, REMOVED in 1.2+.
enum Com_Google_Openrtb_AdUnitId: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case paidSearchUnit // = 1
  case recommendationWidget // = 2
  case promotedListing // = 3
  case iabInAdNative // = 4
  case custom // = 5

  init() {
    self = .paidSearchUnit
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .paidSearchUnit
    case 2: self = .recommendationWidget
    case 3: self = .promotedListing
    case 4: self = .iabInAdNative
    case 5: self = .custom
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .paidSearchUnit: return 1
    case .recommendationWidget: return 2
    case .promotedListing: return 3
    case .iabInAdNative: return 4
    case .custom: return 5
    }
  }

}

/// OpenRTB Native 1.1: The context in which the ad appears - what type
/// of content is surrounding the ad on the page at a high level.
/// This maps directly to the new Deep Dive on In-Feed Ad Units.
/// This denotes the primary context, but does not imply other content
/// may not exist on the page - for example, it's expected that most
/// content platforms have some social components.
enum Com_Google_Openrtb_ContextType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Content-centric context such as newsfeed, article, image gallery,
  /// video gallery, or similar.
  case content // = 1

  /// Social-centric context such as social network feed, email,
  /// chat, or similar.
  case social // = 2

  /// Product context such as product listings, details, recommendations,
  /// reviews, or similar.
  case product // = 3

  init() {
    self = .content
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .content
    case 2: self = .social
    case 3: self = .product
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .content: return 1
    case .social: return 2
    case .product: return 3
    }
  }

}

/// OpenRTB Native 1.1: Next-level context in which the ad appears.
/// Again this reflects the primary context, and does not imply no presence
/// of other elements. For example, an article is likely to contain images
/// but is still first and foremost an article. SubType should only be
/// combined with the primary context type as indicated (ie for a context
/// type of 1, only context subtypes that start with 1 are valid).
enum Com_Google_Openrtb_ContextSubtype: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case contentGeneralOrMixed // = 10
  case contentArticle // = 11
  case contentVideo // = 12
  case contentAudio // = 13
  case contentImage // = 14
  case contentUserGenerated // = 15
  case socialGeneral // = 20
  case socialEmail // = 21
  case socialChatIm // = 22
  case productSelling // = 30
  case productMarketplace // = 31
  case productReview // = 32

  init() {
    self = .contentGeneralOrMixed
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 10: self = .contentGeneralOrMixed
    case 11: self = .contentArticle
    case 12: self = .contentVideo
    case 13: self = .contentAudio
    case 14: self = .contentImage
    case 15: self = .contentUserGenerated
    case 20: self = .socialGeneral
    case 21: self = .socialEmail
    case 22: self = .socialChatIm
    case 30: self = .productSelling
    case 31: self = .productMarketplace
    case 32: self = .productReview
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .contentGeneralOrMixed: return 10
    case .contentArticle: return 11
    case .contentVideo: return 12
    case .contentAudio: return 13
    case .contentImage: return 14
    case .contentUserGenerated: return 15
    case .socialGeneral: return 20
    case .socialEmail: return 21
    case .socialChatIm: return 22
    case .productSelling: return 30
    case .productMarketplace: return 31
    case .productReview: return 32
    }
  }

}

/// OpenRTB Native 1.1: The FORMAT of the ad you are purchasing,
/// separate from the surrounding context.
enum Com_Google_Openrtb_PlacementType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// In the feed of content - for example as an item inside the organic
  /// feed/grid/listing/carousel.
  case inFeed // = 1

  /// In the atomic unit of the content - IE in the article page
  /// or single image page.
  case atomicUnit // = 2

  /// Outside the core content - for example in the ads section on the
  /// right rail, as a banner-style placement near the content, or another
  /// placement type.
  case outside // = 3

  /// Recommendation widget, most commonly presented below
  /// the article content.
  case recommendation // = 4

  init() {
    self = .inFeed
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .inFeed
    case 2: self = .atomicUnit
    case 3: self = .outside
    case 4: self = .recommendation
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .inFeed: return 1
    case .atomicUnit: return 2
    case .outside: return 3
    case .recommendation: return 4
    }
  }

}

/// OpenRTB Native 1.0: Common asset element types of native advertising.
/// This list is non-exhaustive and intended to be extended by the buyers
/// and sellers as the format evolves. An implementing exchange may not
/// support all asset variants or introduce new ones unique to that system.
enum Com_Google_Openrtb_DataAssetType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Sponsored By message where response should contain the brand name
  /// of the sponsor.
  /// Format: Text; Max length: 25 or longer.
  case sponsored // = 1

  /// Descriptive text associated with the product or service being advertised.
  /// Format: Text; Max length: 140 or longer.
  case desc // = 2

  /// Rating of the product being offered to the user.
  /// For example an app's rating in an app store from 0-5.
  /// Format: Number (1-5 digits) formatted as string.
  case rating // = 3

  /// Number of social ratings or "likes" of product being offered to the user.
  /// Format: Number formatted as string.
  case likes // = 4

  /// Number downloads/installs of this product.
  /// Format: Number formatted as string.
  case downloads // = 5

  /// Price for product / app / in-app purchase.
  /// Value should include currency symbol in localised format.
  /// Format: Number formatted as string.
  case price // = 6

  /// Sale price that can be used together with price to indicate a discounted
  /// price compared to a regular price. Value should include currency symbol
  /// in localised format.
  /// Format: Number formatted as string.
  case saleprice // = 7

  /// Phone number.
  /// Format: Formatted string.
  case phone // = 8

  /// Address.
  /// Format: Text.
  case address // = 9

  /// Additional descriptive text associated with the product or service
  /// being advertised.
  /// Format: Text.
  case desc2 // = 10

  /// Display URL for the text ad.
  /// Format: Text.
  case displayurl // = 11

  /// Text describing a 'call to action' button for the destination URL.
  /// Format: Text.
  case ctatext // = 12

  init() {
    self = .sponsored
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .sponsored
    case 2: self = .desc
    case 3: self = .rating
    case 4: self = .likes
    case 5: self = .downloads
    case 6: self = .price
    case 7: self = .saleprice
    case 8: self = .phone
    case 9: self = .address
    case 10: self = .desc2
    case 11: self = .displayurl
    case 12: self = .ctatext
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .sponsored: return 1
    case .desc: return 2
    case .rating: return 3
    case .likes: return 4
    case .downloads: return 5
    case .price: return 6
    case .saleprice: return 7
    case .phone: return 8
    case .address: return 9
    case .desc2: return 10
    case .displayurl: return 11
    case .ctatext: return 12
    }
  }

}

/// OpenRTB Native 1.0: Common image asset element types of native advertising
/// at the time of writing this spec. This list is non-exhaustive and intended
/// to be extended by the buyers and sellers as the format evolves.
enum Com_Google_Openrtb_ImageAssetType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Icon image.
  /// Max height: at least 50; Aspect ratio: 1:1.
  case icon // = 1

  /// DEPRECATED in OpenRTB Native 1.2+. Prefer type <code>ICON</code>.
  /// Logo image for the brand/app.
  ///
  /// NOTE: This enum value was marked as deprecated in the .proto file
  case logo // = 2

  /// Large image preview for the ad.
  /// At least one of 2 size variants required:
  /// Small Variant: max height: 200+, max width: 200+, 267, or 382,
  ///                aspect ratio: 1:1, 4:3, or 1.91:1.
  /// Large Variant: max height: 627+, max width: 627+, 836, or 1198,
  ///                aspect ratio: 1:1, 4:3, or 1.91:1.
  case main // = 3

  init() {
    self = .icon
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .icon
    case 2: self = .logo
    case 3: self = .main
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .icon: return 1
    case .logo: return 2
    case .main: return 3
    }
  }

}

/// OpenRTB Native 1.2.
enum Com_Google_Openrtb_EventType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Impression
  case impression // = 1

  /// Visible impression using MRC definition at 50% in view for 1 second.
  case viewableMrc50 // = 2

  /// 100% in view for 1 second (ie GroupM standard).
  case viewableMrc100 // = 3

  /// Visible impression for video using MRC definition at 50% in view
  /// for 2 seconds.
  case viewableVideo50 // = 4

  init() {
    self = .impression
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .impression
    case 2: self = .viewableMrc50
    case 3: self = .viewableMrc100
    case 4: self = .viewableVideo50
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .impression: return 1
    case .viewableMrc50: return 2
    case .viewableMrc100: return 3
    case .viewableVideo50: return 4
    }
  }

}

/// OpenRTB Native 1.2.
enum Com_Google_Openrtb_EventTrackingMethod: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Image-pixel tracking - URL provided will be insterted as a 1x1 pixel at the
  /// time of the event.
  case img // = 1

  /// Javascript-based tracking - URL provided will be insterted as a js tag at
  /// the time of the event.
  case js // = 2

  init() {
    self = .img
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .img
    case 2: self = .js
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .img: return 1
    case .js: return 2
    }
  }

}

/// OpenRTB extensions ("ext" fields in the spec & JSON representation)
/// are represented here by Protocol Buffer extensions. This proto only
/// reserves the range of IDs 100-9999 at every extensible object.
/// Reserved ranges:
///   100-199:   Reserved for Google.
///   200-299:   Reserved for IAB's formal standard extensions.
///   300-999:   Free for use with other exchanges or projects.
///   1000-1999: Reserved for Google.
///   2000-9999: Free for use with other exchanges or projects.
///
/// OpenRTB 2.0: The top-level bid request object contains a globally unique
/// bid request or auction ID. This id attribute is required as is at least one
/// impression object (Section 3.2.2). Other attributes in this top-level object
/// establish rules and restrictions that apply to all impressions being offered.
///
/// There are also several subordinate objects that provide detailed data to
/// potential buyers. Among these are the Site and App objects, which describe
/// the type of published media in which the impression(s) appear.
/// These objects are highly recommended, but only one applies to a given
/// bid request depending on whether the media is browser-based web content
/// or a non-browser application, respectively.
struct Com_Google_Openrtb_BidRequest: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var distributionchannelOneof: OneOf_DistributionchannelOneof? {
    get {return _storage._distributionchannelOneof}
    set {_uniqueStorage()._distributionchannelOneof = newValue}
  }

  /// Information about the publisher's website. Only applicable and
  /// recommended for websites.
  /// Supported by Google.
  var site: Com_Google_Openrtb_BidRequest.Site {
    get {
      if case .site(let v)? = _storage._distributionchannelOneof {return v}
      return Com_Google_Openrtb_BidRequest.Site()
    }
    set {_uniqueStorage()._distributionchannelOneof = .site(newValue)}
  }

  /// Information about the publisher's app
  /// (non-browser applications). Only applicable and recommended for apps.
  /// Supported by Google.
  var app: Com_Google_Openrtb_BidRequest.App {
    get {
      if case .app(let v)? = _storage._distributionchannelOneof {return v}
      return Com_Google_Openrtb_BidRequest.App()
    }
    set {_uniqueStorage()._distributionchannelOneof = .app(newValue)}
  }

  /// Unique ID of the bid request, provided by the exchange.
  /// REQUIRED by the OpenRTB specification.
  /// Supported by Google.
  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  /// Array of Imp objects (Section 3.2.2) representing the impressions offered.
  /// At least 1 Imp object is required.
  /// Supported by Google.
  var imp: [Com_Google_Openrtb_BidRequest.Imp] {
    get {return _storage._imp}
    set {_uniqueStorage()._imp = newValue}
  }

  /// Information about the device the impression will be delivered to.
  /// Supported by Google.
  var device: Com_Google_Openrtb_BidRequest.Device {
    get {return _storage._device ?? Com_Google_Openrtb_BidRequest.Device()}
    set {_uniqueStorage()._device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return _storage._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {_uniqueStorage()._device = nil}

  /// A Regs object (Section 3.2.16) that specifies any industry, legal,
  /// or governmental regulations in force for this request.
  /// Supported by Google.
  var regs: Com_Google_Openrtb_BidRequest.Regs {
    get {return _storage._regs ?? Com_Google_Openrtb_BidRequest.Regs()}
    set {_uniqueStorage()._regs = newValue}
  }
  /// Returns true if `regs` has been explicitly set.
  var hasRegs: Bool {return _storage._regs != nil}
  /// Clears the value of `regs`. Subsequent reads from it will return its default value.
  mutating func clearRegs() {_uniqueStorage()._regs = nil}

  /// Information about the user of the device or the advertising audience.
  /// Supported by Google.
  var user: Com_Google_Openrtb_BidRequest.User {
    get {return _storage._user ?? Com_Google_Openrtb_BidRequest.User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  /// Auction type: one of FIRST_PRICE or SECOND_PRICE.
  /// Supported by Google.
  var at: Com_Google_Openrtb_AuctionType {
    get {return _storage._at ?? .secondPrice}
    set {_uniqueStorage()._at = newValue}
  }
  /// Returns true if `at` has been explicitly set.
  var hasAt: Bool {return _storage._at != nil}
  /// Clears the value of `at`. Subsequent reads from it will return its default value.
  mutating func clearAt() {_uniqueStorage()._at = nil}

  /// Maximum time in milliseconds to submit a bid to avoid timeout.
  /// This value is commonly communicated offline.
  /// Supported by Google.
  var tmax: Int32 {
    get {return _storage._tmax ?? 0}
    set {_uniqueStorage()._tmax = newValue}
  }
  /// Returns true if `tmax` has been explicitly set.
  var hasTmax: Bool {return _storage._tmax != nil}
  /// Clears the value of `tmax`. Subsequent reads from it will return its default value.
  mutating func clearTmax() {_uniqueStorage()._tmax = nil}

  /// Allowlist of buyer seats (for example, advertisers, agencies) that can bid
  /// on this impression. IDs of seats and knowledge of the buyer's customers to
  /// which they refer must be coordinated between bidders and the exchange a
  /// priori. Omission implies no seat restrictions.
  /// Supported by Google.
  var wseat: [String] {
    get {return _storage._wseat}
    set {_uniqueStorage()._wseat = newValue}
  }

  /// Indicates if Exchange can verify that the impressions offered
  /// represent all of the impressions available in context (for example, all on
  /// the web page, all video spots such as pre/mid/post roll) to support
  /// road-blocking. false = no or unknown, true = yes, the impressions offered
  /// represent all that are available.
  /// Not supported by Google.
  var allimps: Bool {
    get {return _storage._allimps ?? false}
    set {_uniqueStorage()._allimps = newValue}
  }
  /// Returns true if `allimps` has been explicitly set.
  var hasAllimps: Bool {return _storage._allimps != nil}
  /// Clears the value of `allimps`. Subsequent reads from it will return its default value.
  mutating func clearAllimps() {_uniqueStorage()._allimps = nil}

  /// Array of allowed currencies for bids on this bid request using ISO-4217
  /// alpha codes. Recommended only if the exchange accepts multiple currencies.
  /// Supported by Google.
  var cur: [String] {
    get {return _storage._cur}
    set {_uniqueStorage()._cur = newValue}
  }

  /// Blocked advertiser categories using the IAB content categories.
  /// The taxonomy to be used is defined by the cattax field.
  /// Supported by Google.
  var bcat: [String] {
    get {return _storage._bcat}
    set {_uniqueStorage()._bcat = newValue}
  }

  /// The taxonomy in use for bcat.
  /// Not supported by Google.
  var cattax: Com_Google_Openrtb_CategoryTaxonomy {
    get {return _storage._cattax ?? .iabContent10}
    set {_uniqueStorage()._cattax = newValue}
  }
  /// Returns true if `cattax` has been explicitly set.
  var hasCattax: Bool {return _storage._cattax != nil}
  /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
  mutating func clearCattax() {_uniqueStorage()._cattax = nil}

  /// Block list of advertisers by their domains (for example, "ford.com").
  /// Not supported by Google.
  var badv: [String] {
    get {return _storage._badv}
    set {_uniqueStorage()._badv = newValue}
  }

  /// Block list of applications by their platform-specific exchange
  /// independent application identifiers. On Android, these should
  /// be bundle or package names (for example, com.foo.mygame).
  /// On iOS, these are numeric IDs.
  /// Supported by Google.
  var bapp: [String] {
    get {return _storage._bapp}
    set {_uniqueStorage()._bapp = newValue}
  }

  /// Indicator of test mode in which auctions are not billable,
  /// where false = live mode, true = test mode.
  /// Supported by Google.
  var test: Bool {
    get {return _storage._test ?? false}
    set {_uniqueStorage()._test = newValue}
  }
  /// Returns true if `test` has been explicitly set.
  var hasTest: Bool {return _storage._test != nil}
  /// Clears the value of `test`. Subsequent reads from it will return its default value.
  mutating func clearTest() {_uniqueStorage()._test = nil}

  /// Block list of buyer seats (for example, advertisers, agencies) restricted
  /// from bidding on this impression. IDs of seats and knowledge
  /// of the buyer's customers to which they refer must be
  /// coordinated between bidders and the exchange a priori.
  /// At most, only one of wseat and bseat should be used in the
  /// same request. Omission of both implies no seat restrictions.
  /// Supported by Google.
  var bseat: [String] {
    get {return _storage._bseat}
    set {_uniqueStorage()._bseat = newValue}
  }

  /// Allowed list of languages for creatives using ISO-639-1-alpha-2.
  /// Omission implies no specific restrictions, but buyers would be
  /// advised to consider language attribute in the Device and/or
  /// Content objects if available.
  /// Only one of wlang or wlangb should be present.
  /// Supported by Google.
  var wlang: [String] {
    get {return _storage._wlang}
    set {_uniqueStorage()._wlang = newValue}
  }

  /// Allowed list of languages for creatives using IETF BCP 47I.
  /// Omission implies no specific restrictions, but buyers would be
  /// advised to consider language attribute in the Device and/or
  /// Content objects if available.
  /// Only one of wlang or wlangb should be present.
  /// Not supported by Google.
  var wlangb: [String] {
    get {return _storage._wlangb}
    set {_uniqueStorage()._wlangb = newValue}
  }

  /// A Source object (Section 3.2.2) that provides data about the
  /// inventory source and which entity makes the final decision.
  /// Supported by Google.
  var source: Com_Google_Openrtb_BidRequest.Source {
    get {return _storage._source ?? Com_Google_Openrtb_BidRequest.Source()}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {_uniqueStorage()._source = nil}

  var ext: String {
    get {return _storage._ext ?? String()}
    set {_uniqueStorage()._ext = newValue}
  }
  /// Returns true if `ext` has been explicitly set.
  var hasExt: Bool {return _storage._ext != nil}
  /// Clears the value of `ext`. Subsequent reads from it will return its default value.
  mutating func clearExt() {_uniqueStorage()._ext = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_DistributionchannelOneof: Equatable, Sendable {
    /// Information about the publisher's website. Only applicable and
    /// recommended for websites.
    /// Supported by Google.
    case site(Com_Google_Openrtb_BidRequest.Site)
    /// Information about the publisher's app
    /// (non-browser applications). Only applicable and recommended for apps.
    /// Supported by Google.
    case app(Com_Google_Openrtb_BidRequest.App)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .site: return {
        guard case .site(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .app: return {
        guard case .app(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      }
    }

  }

  /// OpenRTB 2.0: This object describes an ad placement or impression
  /// being auctioned. A single bid request can include multiple Imp objects,
  /// a use case for which might be an exchange that supports selling all
  /// ad positions on a given page. Each Imp object has a required ID so that
  /// bids can reference them individually.
  ///
  /// The presence of Banner (Section 3.2.3), Video (Section 3.2.4),
  /// and/or Native (Section 3.2.5) objects subordinate to the Imp object
  /// indicates the type of impression being offered. The publisher can choose
  /// one such type which is the typical case or mix them at their discretion.
  /// Any given bid for the impression must conform to one of the offered types.
  struct Imp: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A unique identifier for this impression within the context of the bid
    /// request (typically, value starts with 1, and increments up to n
    /// for n impressions).
    /// Supported by Google.
    var id: String {
      get {return _storage._id ?? String()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// A Banner object (Section 3.2.3); required if this impression is
    /// offered as a banner ad opportunity.
    /// Supported by Google.
    var banner: Com_Google_Openrtb_BidRequest.Imp.Banner {
      get {return _storage._banner ?? Com_Google_Openrtb_BidRequest.Imp.Banner()}
      set {_uniqueStorage()._banner = newValue}
    }
    /// Returns true if `banner` has been explicitly set.
    var hasBanner: Bool {return _storage._banner != nil}
    /// Clears the value of `banner`. Subsequent reads from it will return its default value.
    mutating func clearBanner() {_uniqueStorage()._banner = nil}

    /// A Video object (Section 3.2.4); required if this impression is
    /// offered as a video ad opportunity.
    /// Supported by Google.
    var video: Com_Google_Openrtb_BidRequest.Imp.Video {
      get {return _storage._video ?? Com_Google_Openrtb_BidRequest.Imp.Video()}
      set {_uniqueStorage()._video = newValue}
    }
    /// Returns true if `video` has been explicitly set.
    var hasVideo: Bool {return _storage._video != nil}
    /// Clears the value of `video`. Subsequent reads from it will return its default value.
    mutating func clearVideo() {_uniqueStorage()._video = nil}

    /// An Audio object; required if this impression is offered
    /// as an audio ad opportunity.
    /// Supported by Google.
    var audio: Com_Google_Openrtb_BidRequest.Imp.Audio {
      get {return _storage._audio ?? Com_Google_Openrtb_BidRequest.Imp.Audio()}
      set {_uniqueStorage()._audio = newValue}
    }
    /// Returns true if `audio` has been explicitly set.
    var hasAudio: Bool {return _storage._audio != nil}
    /// Clears the value of `audio`. Subsequent reads from it will return its default value.
    mutating func clearAudio() {_uniqueStorage()._audio = nil}

    /// Name of ad mediation partner, SDK technology, or player responsible
    /// for rendering ad (typically video or mobile). Used by some ad servers
    /// to customize ad code by partner. Recommended for video and/or apps.
    /// Supported by Google.
    var displaymanager: String {
      get {return _storage._displaymanager ?? String()}
      set {_uniqueStorage()._displaymanager = newValue}
    }
    /// Returns true if `displaymanager` has been explicitly set.
    var hasDisplaymanager: Bool {return _storage._displaymanager != nil}
    /// Clears the value of `displaymanager`. Subsequent reads from it will return its default value.
    mutating func clearDisplaymanager() {_uniqueStorage()._displaymanager = nil}

    /// Version of ad mediation partner, SDK technology, or player responsible
    /// for rendering ad (typically video or mobile). Used by some ad servers
    /// to customize ad code by partner. Recommended for video and/or apps.
    /// Not supported by Google.
    var displaymanagerver: String {
      get {return _storage._displaymanagerver ?? String()}
      set {_uniqueStorage()._displaymanagerver = newValue}
    }
    /// Returns true if `displaymanagerver` has been explicitly set.
    var hasDisplaymanagerver: Bool {return _storage._displaymanagerver != nil}
    /// Clears the value of `displaymanagerver`. Subsequent reads from it will return its default value.
    mutating func clearDisplaymanagerver() {_uniqueStorage()._displaymanagerver = nil}

    /// true = the ad is interstitial or full screen, false = not interstitial.
    /// Supported by Google.
    var instl: Bool {
      get {return _storage._instl ?? false}
      set {_uniqueStorage()._instl = newValue}
    }
    /// Returns true if `instl` has been explicitly set.
    var hasInstl: Bool {return _storage._instl != nil}
    /// Clears the value of `instl`. Subsequent reads from it will return its default value.
    mutating func clearInstl() {_uniqueStorage()._instl = nil}

    /// Identifier for specific ad placement or ad tag that was used to
    /// initiate the auction. This can be useful for debugging of any issues,
    /// or for optimization by the buyer.
    /// Supported by Google.
    var tagid: String {
      get {return _storage._tagid ?? String()}
      set {_uniqueStorage()._tagid = newValue}
    }
    /// Returns true if `tagid` has been explicitly set.
    var hasTagid: Bool {return _storage._tagid != nil}
    /// Clears the value of `tagid`. Subsequent reads from it will return its default value.
    mutating func clearTagid() {_uniqueStorage()._tagid = nil}

    /// Minimum bid for this impression expressed in CPM.
    /// Supported by Google.
    var bidfloor: Double {
      get {return _storage._bidfloor ?? 0}
      set {_uniqueStorage()._bidfloor = newValue}
    }
    /// Returns true if `bidfloor` has been explicitly set.
    var hasBidfloor: Bool {return _storage._bidfloor != nil}
    /// Clears the value of `bidfloor`. Subsequent reads from it will return its default value.
    mutating func clearBidfloor() {_uniqueStorage()._bidfloor = nil}

    /// Currency specified using ISO-4217 alpha codes. This may be different
    /// from bid currency returned by bidder if this is allowed by the exchange.
    /// Supported by Google.
    var bidfloorcur: String {
      get {return _storage._bidfloorcur ?? "USD"}
      set {_uniqueStorage()._bidfloorcur = newValue}
    }
    /// Returns true if `bidfloorcur` has been explicitly set.
    var hasBidfloorcur: Bool {return _storage._bidfloorcur != nil}
    /// Clears the value of `bidfloorcur`. Subsequent reads from it will return its default value.
    mutating func clearBidfloorcur() {_uniqueStorage()._bidfloorcur = nil}

    /// Indicates the type of browser opened upon clicking the
    /// creative in an app, where false = embedded, true = native.
    /// Note that the Safari View Controller in iOS 9.x devices is considered
    /// a native browser for purposes of this attribute.
    /// Supported by Google.
    var clickbrowser: Bool {
      get {return _storage._clickbrowser ?? false}
      set {_uniqueStorage()._clickbrowser = newValue}
    }
    /// Returns true if `clickbrowser` has been explicitly set.
    var hasClickbrowser: Bool {return _storage._clickbrowser != nil}
    /// Clears the value of `clickbrowser`. Subsequent reads from it will return its default value.
    mutating func clearClickbrowser() {_uniqueStorage()._clickbrowser = nil}

    /// Indicates if the impression requires secure HTTPS URL creative
    /// assets and markup. If omitted, the secure state is unknown, but
    /// non-secure HTTP support can be assumed.
    /// Supported by Google.
    var secure: Bool {
      get {return _storage._secure ?? false}
      set {_uniqueStorage()._secure = newValue}
    }
    /// Returns true if `secure` has been explicitly set.
    var hasSecure: Bool {return _storage._secure != nil}
    /// Clears the value of `secure`. Subsequent reads from it will return its default value.
    mutating func clearSecure() {_uniqueStorage()._secure = nil}

    /// Array of exchange-specific names of supported iframe busters.
    /// Not supported by Google.
    var iframebuster: [String] {
      get {return _storage._iframebuster}
      set {_uniqueStorage()._iframebuster = newValue}
    }

    /// Indicates whether the user receives a reward for viewing the ad.
    /// Typically video ad implementations allow users to read an additional news
    /// article for free, receive an extra life in a game, or get a sponsored
    /// ad-free music session. The reward is typically distributed after the
    /// video ad is completed.
    /// Supported by Google.
    var rwdd: Bool {
      get {return _storage._rwdd ?? false}
      set {_uniqueStorage()._rwdd = newValue}
    }
    /// Returns true if `rwdd` has been explicitly set.
    var hasRwdd: Bool {return _storage._rwdd != nil}
    /// Clears the value of `rwdd`. Subsequent reads from it will return its default value.
    mutating func clearRwdd() {_uniqueStorage()._rwdd = nil}

    /// Indicates if server-side ad insertion (e.g., stitching an ad into an
    /// audio or video stream) is in use and the impact of this on asset
    /// and tracker retrieval.
    /// Not supported by Google.
    var ssai: Com_Google_Openrtb_ServerSideAdInsertionType {
      get {return _storage._ssai ?? .unknown}
      set {_uniqueStorage()._ssai = newValue}
    }
    /// Returns true if `ssai` has been explicitly set.
    var hasSsai: Bool {return _storage._ssai != nil}
    /// Clears the value of `ssai`. Subsequent reads from it will return its default value.
    mutating func clearSsai() {_uniqueStorage()._ssai = nil}

    /// A Pmp object (Section 3.2.17) containing any private marketplace deals
    /// in effect for this impression.
    /// Supported by Google.
    var pmp: Com_Google_Openrtb_BidRequest.Imp.Pmp {
      get {return _storage._pmp ?? Com_Google_Openrtb_BidRequest.Imp.Pmp()}
      set {_uniqueStorage()._pmp = newValue}
    }
    /// Returns true if `pmp` has been explicitly set.
    var hasPmp: Bool {return _storage._pmp != nil}
    /// Clears the value of `pmp`. Subsequent reads from it will return its default value.
    mutating func clearPmp() {_uniqueStorage()._pmp = nil}

    /// A Native object (Section 3.2.5); required if this impression is
    /// offered as a native ad opportunity.
    /// Supported by Google.
    var native: Com_Google_Openrtb_BidRequest.Imp.Native {
      get {return _storage._native ?? Com_Google_Openrtb_BidRequest.Imp.Native()}
      set {_uniqueStorage()._native = newValue}
    }
    /// Returns true if `native` has been explicitly set.
    var hasNative: Bool {return _storage._native != nil}
    /// Clears the value of `native`. Subsequent reads from it will return its default value.
    mutating func clearNative() {_uniqueStorage()._native = nil}

    /// Advisory as to the number of seconds that may elapse
    /// between the auction and the actual impression.
    /// Supported by Google.
    var exp: Int32 {
      get {return _storage._exp ?? 0}
      set {_uniqueStorage()._exp = newValue}
    }
    /// Returns true if `exp` has been explicitly set.
    var hasExp: Bool {return _storage._exp != nil}
    /// Clears the value of `exp`. Subsequent reads from it will return its default value.
    mutating func clearExp() {_uniqueStorage()._exp = nil}

    /// An array of Metric object (Section 3.2.5).
    /// Supported by Google.
    var metric: [Com_Google_Openrtb_BidRequest.Imp.Metric] {
      get {return _storage._metric}
      set {_uniqueStorage()._metric = newValue}
    }

    var ext: String {
      get {return _storage._ext ?? String()}
      set {_uniqueStorage()._ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return _storage._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {_uniqueStorage()._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// OpenRTB 2.0: This object represents the most general type of
    /// impression. Although the term "banner" may have very specific meaning
    /// in other contexts, here it can be many things including a simple static
    /// image, an expandable ad unit, or even in-banner video (refer to the Video
    /// object in Section 3.2.4 for the more generalized and full featured video
    /// ad units). An array of Banner objects can also appear within the Video
    /// to describe optional companion ads defined in the VAST specification.
    ///
    /// The presence of a Banner as a subordinate of the Imp object indicates
    /// that this impression is offered as a banner type impression.
    /// At the publisher's discretion, that same impression may also be offered
    /// as video and/or native by also including as Imp subordinates the Video
    /// and/or Native objects, respectively. However, any given bid for the
    /// impression must conform to one of the offered types.
    struct Banner: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Exact width in device-independent pixels (DIPS); recommended if no
      /// format objects are specified.
      /// Supported by Google.
      var w: Int32 {
        get {return _w ?? 0}
        set {_w = newValue}
      }
      /// Returns true if `w` has been explicitly set.
      var hasW: Bool {return self._w != nil}
      /// Clears the value of `w`. Subsequent reads from it will return its default value.
      mutating func clearW() {self._w = nil}

      /// Exact height in device-independent pixels (DIPS); recommended if no
      /// format objects are specified.
      /// Supported by Google.
      var h: Int32 {
        get {return _h ?? 0}
        set {_h = newValue}
      }
      /// Returns true if `h` has been explicitly set.
      var hasH: Bool {return self._h != nil}
      /// Clears the value of `h`. Subsequent reads from it will return its default value.
      mutating func clearH() {self._h = nil}

      /// Array of format objects representing the banner sizes permitted.
      /// If none are specified, then use of the h and w attributes
      /// is highly recommended.
      /// Supported by Google.
      var format: [Com_Google_Openrtb_BidRequest.Imp.Banner.Format] = []

      /// Unique identifier for this banner object. Recommended when Banner
      /// objects are used with a Video object (Section 3.2.4) to represent
      /// an array of companion ads. Values usually start at 1 and increase
      /// with each object; should be unique within an impression.
      /// Not supported by Google.
      var id: String {
        get {return _id ?? String()}
        set {_id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return self._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {self._id = nil}

      /// Ad position on screen.
      /// Supported by Google.
      var pos: Com_Google_Openrtb_AdPosition {
        get {return _pos ?? .unknown}
        set {_pos = newValue}
      }
      /// Returns true if `pos` has been explicitly set.
      var hasPos: Bool {return self._pos != nil}
      /// Clears the value of `pos`. Subsequent reads from it will return its default value.
      mutating func clearPos() {self._pos = nil}

      /// Blocked banner ad types.
      /// Not supported by Google.
      var btype: [Com_Google_Openrtb_BannerAdType] = []

      /// Blocked creative attributes.
      /// Supported by Google.
      var battr: [Com_Google_Openrtb_CreativeAttribute] = []

      /// Allowlist of content MIME types supported. Popular MIME types include,
      /// but are not limited to "image/jpg", "image/gif" and
      /// "application/x-shockwave-flash".
      /// Supported by Google.
      var mimes: [String] = []

      /// Specify if the banner is delivered in the top frame (true)
      /// or in an iframe (false).
      /// Supported by Google.
      var topframe: Bool {
        get {return _topframe ?? false}
        set {_topframe = newValue}
      }
      /// Returns true if `topframe` has been explicitly set.
      var hasTopframe: Bool {return self._topframe != nil}
      /// Clears the value of `topframe`. Subsequent reads from it will return its default value.
      mutating func clearTopframe() {self._topframe = nil}

      /// Directions in which the banner may expand.
      /// Supported by Google.
      var expdir: [Com_Google_Openrtb_ExpandableDirection] = []

      /// List of supported API frameworks for this impression.
      /// If an API is not explicitly listed, it is assumed not to be supported.
      /// Supported by Google.
      var api: [Com_Google_Openrtb_APIFramework] = []

      /// Relevant only for Banner objects used with a Video object
      /// (Section 3.2.7) in an array of companion ads. Indicates the
      /// companion banner rendering mode relative to the associated
      /// video, where false = concurrent, true = end-card.
      /// Supported by Google.
      var vcm: Bool {
        get {return _vcm ?? false}
        set {_vcm = newValue}
      }
      /// Returns true if `vcm` has been explicitly set.
      var hasVcm: Bool {return self._vcm != nil}
      /// Clears the value of `vcm`. Subsequent reads from it will return its default value.
      mutating func clearVcm() {self._vcm = nil}

      /// DEPRECATED in OpenRTB 2.4+, REMOVED in 2.6+; prefer the field format.
      /// Maximum width in device independent pixels (DIPS).
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var wmax: Int32 {
        get {return _wmax ?? 0}
        set {_wmax = newValue}
      }
      /// Returns true if `wmax` has been explicitly set.
      var hasWmax: Bool {return self._wmax != nil}
      /// Clears the value of `wmax`. Subsequent reads from it will return its default value.
      mutating func clearWmax() {self._wmax = nil}

      /// DEPRECATED in OpenRTB 2.4+, REMOVED in 2.6+; prefer the field format.
      /// Maximum height in device independent pixels (DIPS).
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var hmax: Int32 {
        get {return _hmax ?? 0}
        set {_hmax = newValue}
      }
      /// Returns true if `hmax` has been explicitly set.
      var hasHmax: Bool {return self._hmax != nil}
      /// Clears the value of `hmax`. Subsequent reads from it will return its default value.
      mutating func clearHmax() {self._hmax = nil}

      /// DEPRECATED in OpenRTB 2.4+, REMOVED in 2.6+; prefer the field format.
      /// Minimum width in device independent pixels (DIPS).
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var wmin: Int32 {
        get {return _wmin ?? 0}
        set {_wmin = newValue}
      }
      /// Returns true if `wmin` has been explicitly set.
      var hasWmin: Bool {return self._wmin != nil}
      /// Clears the value of `wmin`. Subsequent reads from it will return its default value.
      mutating func clearWmin() {self._wmin = nil}

      /// DEPRECATED in OpenRTB 2.4+, REMOVED in 2.6+; prefer the field format.
      /// Minimum height in device independent pixels (DIPS).
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var hmin: Int32 {
        get {return _hmin ?? 0}
        set {_hmin = newValue}
      }
      /// Returns true if `hmin` has been explicitly set.
      var hasHmin: Bool {return self._hmin != nil}
      /// Clears the value of `hmin`. Subsequent reads from it will return its default value.
      mutating func clearHmin() {self._hmin = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// OpenRTB 2.4: This object represents an allowed size (
      /// height and width combination) for a banner impression.
      /// These are typically used in an array for an impression where
      /// multiple sizes are permitted.
      struct Format: SwiftProtobuf.ExtensibleMessage, Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Width in device independent pixels (DIPS).
        /// Supported by Google.
        var w: Int32 {
          get {return _w ?? 0}
          set {_w = newValue}
        }
        /// Returns true if `w` has been explicitly set.
        var hasW: Bool {return self._w != nil}
        /// Clears the value of `w`. Subsequent reads from it will return its default value.
        mutating func clearW() {self._w = nil}

        /// Height in device independent pixels (DIPS).
        /// Supported by Google.
        var h: Int32 {
          get {return _h ?? 0}
          set {_h = newValue}
        }
        /// Returns true if `h` has been explicitly set.
        var hasH: Bool {return self._h != nil}
        /// Clears the value of `h`. Subsequent reads from it will return its default value.
        mutating func clearH() {self._h = nil}

        /// Relative width when expressing size as a ratio.
        /// Not supported by Google.
        var wratio: Int32 {
          get {return _wratio ?? 0}
          set {_wratio = newValue}
        }
        /// Returns true if `wratio` has been explicitly set.
        var hasWratio: Bool {return self._wratio != nil}
        /// Clears the value of `wratio`. Subsequent reads from it will return its default value.
        mutating func clearWratio() {self._wratio = nil}

        /// Relative height when expressing size as a ratio.
        /// Not supported by Google.
        var hratio: Int32 {
          get {return _hratio ?? 0}
          set {_hratio = newValue}
        }
        /// Returns true if `hratio` has been explicitly set.
        var hasHratio: Bool {return self._hratio != nil}
        /// Clears the value of `hratio`. Subsequent reads from it will return its default value.
        mutating func clearHratio() {self._hratio = nil}

        /// The minimum width in device independent pixels (DIPS) at
        /// which the ad will be displayed when the size is expressed as a ratio.
        /// Not supported by Google.
        var wmin: Int32 {
          get {return _wmin ?? 0}
          set {_wmin = newValue}
        }
        /// Returns true if `wmin` has been explicitly set.
        var hasWmin: Bool {return self._wmin != nil}
        /// Clears the value of `wmin`. Subsequent reads from it will return its default value.
        mutating func clearWmin() {self._wmin = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
        fileprivate var _w: Int32? = nil
        fileprivate var _h: Int32? = nil
        fileprivate var _wratio: Int32? = nil
        fileprivate var _hratio: Int32? = nil
        fileprivate var _wmin: Int32? = nil
      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _w: Int32? = nil
      fileprivate var _h: Int32? = nil
      fileprivate var _id: String? = nil
      fileprivate var _pos: Com_Google_Openrtb_AdPosition? = nil
      fileprivate var _topframe: Bool? = nil
      fileprivate var _vcm: Bool? = nil
      fileprivate var _wmax: Int32? = nil
      fileprivate var _hmax: Int32? = nil
      fileprivate var _wmin: Int32? = nil
      fileprivate var _hmin: Int32? = nil
    }

    /// OpenRTB 2.0: This object represents an in-stream video impression.
    /// Many of the fields are non-essential for minimally viable transactions,
    /// but are included to offer fine control when needed. Video in OpenRTB
    /// generally assumes compliance with the VAST standard. As such, the notion
    /// of companion ads is supported by optionally including an array of Banner
    /// objects (refer to the Banner object in Section 3.2.3) that define these
    /// companion ads.
    ///
    /// The presence of a Video as a subordinate of the Imp object indicates
    /// that this impression is offered as a video type impression. At the
    /// publisher's discretion, that same impression may also be offered as
    /// banner and/or native by also including as Imp subordinates the Banner
    /// and/or Native objects, respectively. However, any given bid for the
    /// impression must conform to one of the offered types.
    struct Video: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Allowlist of content MIME types supported. Popular MIME types include,
      /// but are not limited to "image/jpg", "image/gif" and
      /// "application/x-shockwave-flash".
      /// REQUIRED by the OpenRTB specification: at least 1 element.
      /// Supported by Google.
      var mimes: [String] {
        get {return _storage._mimes}
        set {_uniqueStorage()._mimes = newValue}
      }

      /// Minimum video ad duration in seconds.
      /// This field is mutually exclusive with rqddurs; only one of
      /// minduration and rqddurs may be in a bid request.
      /// Supported by Google.
      var minduration: Int32 {
        get {return _storage._minduration ?? 0}
        set {_uniqueStorage()._minduration = newValue}
      }
      /// Returns true if `minduration` has been explicitly set.
      var hasMinduration: Bool {return _storage._minduration != nil}
      /// Clears the value of `minduration`. Subsequent reads from it will return its default value.
      mutating func clearMinduration() {_uniqueStorage()._minduration = nil}

      /// Maximum video ad duration in seconds.
      /// This field is mutually exclusive with rqddurs; only one of
      /// maxduration and rqddurs may be in a bid request.
      /// Supported by Google.
      var maxduration: Int32 {
        get {return _storage._maxduration ?? 0}
        set {_uniqueStorage()._maxduration = newValue}
      }
      /// Returns true if `maxduration` has been explicitly set.
      var hasMaxduration: Bool {return _storage._maxduration != nil}
      /// Clears the value of `maxduration`. Subsequent reads from it will return its default value.
      mutating func clearMaxduration() {_uniqueStorage()._maxduration = nil}

      /// Indicates the start delay in seconds for pre-roll, mid-roll, or
      /// post-roll ad placements.
      /// Refer to enum StartDelay for generic values.
      /// Supported by Google.
      var startdelay: Int32 {
        get {return _storage._startdelay ?? 0}
        set {_uniqueStorage()._startdelay = newValue}
      }
      /// Returns true if `startdelay` has been explicitly set.
      var hasStartdelay: Bool {return _storage._startdelay != nil}
      /// Clears the value of `startdelay`. Subsequent reads from it will return its default value.
      mutating func clearStartdelay() {_uniqueStorage()._startdelay = nil}

      /// Indicates the maximum number of ads that may be served into a
      /// "dynamic" video ad pod (where the precise number of ads is not
      /// predetermined by the seller).
      /// This field is currently only supported by Google for
      /// rewarded video pods requests.
      var maxseq: Int32 {
        get {return _storage._maxseq ?? 0}
        set {_uniqueStorage()._maxseq = newValue}
      }
      /// Returns true if `maxseq` has been explicitly set.
      var hasMaxseq: Bool {return _storage._maxseq != nil}
      /// Clears the value of `maxseq`. Subsequent reads from it will return its default value.
      mutating func clearMaxseq() {_uniqueStorage()._maxseq = nil}

      /// Indicates the total amount of time in seconds that advertisers may
      /// fill for a "dynamic" video ad pod, or the dynamic portion of a
      /// "hybrid" ad pod. This field is required only for the dynamic
      /// portion(s) of video ad pods. This field refers to the length of the
      /// entire ad break, whereas minduration/maxduration/rqddurs are
      /// constraints relating to the slots that make up the pod.
      /// This field is currently only supported for rewarded video pods
      /// requests.
      var poddur: Int32 {
        get {return _storage._poddur ?? 0}
        set {_uniqueStorage()._poddur = newValue}
      }
      /// Returns true if `poddur` has been explicitly set.
      var hasPoddur: Bool {return _storage._poddur != nil}
      /// Clears the value of `poddur`. Subsequent reads from it will return its default value.
      mutating func clearPoddur() {_uniqueStorage()._poddur = nil}

      /// Array of supported video bid response protocols.
      /// At least one supported protocol must be specified.
      /// Supported by Google.
      var protocols: [Com_Google_Openrtb_Protocol] {
        get {return _storage._protocols}
        set {_uniqueStorage()._protocols = newValue}
      }

      /// Width of the video player in device independent pixels (DIPS).
      /// Supported by Google.
      var w: Int32 {
        get {return _storage._w ?? 0}
        set {_uniqueStorage()._w = newValue}
      }
      /// Returns true if `w` has been explicitly set.
      var hasW: Bool {return _storage._w != nil}
      /// Clears the value of `w`. Subsequent reads from it will return its default value.
      mutating func clearW() {_uniqueStorage()._w = nil}

      /// Height of the video player in device independent pixels (DIPS).
      /// Supported by Google.
      var h: Int32 {
        get {return _storage._h ?? 0}
        set {_uniqueStorage()._h = newValue}
      }
      /// Returns true if `h` has been explicitly set.
      var hasH: Bool {return _storage._h != nil}
      /// Clears the value of `h`. Subsequent reads from it will return its default value.
      mutating func clearH() {_uniqueStorage()._h = nil}

      /// Unique identifier indicating that an impression opportunity
      /// belongs to a video ad pod. If multiple impression opportunities
      /// within a bid request share the same podid, this indicates that
      /// those impression opportunities belong to the same video ad pod.
      /// Not supported by Google.
      var podid: String {
        get {return _storage._podid ?? String()}
        set {_uniqueStorage()._podid = newValue}
      }
      /// Returns true if `podid` has been explicitly set.
      var hasPodid: Bool {return _storage._podid != nil}
      /// Clears the value of `podid`. Subsequent reads from it will return its default value.
      mutating func clearPodid() {_uniqueStorage()._podid = nil}

      /// The sequence (position) of the video ad pod within a content stream.
      /// Not supported by Google.
      var podseq: Com_Google_Openrtb_PodSequence {
        get {return _storage._podseq ?? .any}
        set {_uniqueStorage()._podseq = newValue}
      }
      /// Returns true if `podseq` has been explicitly set.
      var hasPodseq: Bool {return _storage._podseq != nil}
      /// Clears the value of `podseq`. Subsequent reads from it will return its default value.
      mutating func clearPodseq() {_uniqueStorage()._podseq = nil}

      /// Precise acceptable durations for video creatives in
      /// seconds. This field specifically targets the Live TV use case
      /// where non-exact ad durations would result in undesirable ‘dead air’.
      /// This field is mutually exclusive with minduration and maxduration;
      /// if rqddurs is specified, minduration and maxduration must not be
      /// specified and the other way around.
      /// Not supported by Google.
      var rqddurs: [Int32] {
        get {return _storage._rqddurs}
        set {_uniqueStorage()._rqddurs = newValue}
      }

      /// Deprecated. This will be removed in January 2025 per the IAB here:
      /// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/main/AdCOM%20v1.0%20FINAL.md#list--placement-subtypes---video-
      /// Placement type for the impression.
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var placement: Com_Google_Openrtb_VideoPlacementType {
        get {return _storage._placement ?? .undefinedVideoPlacement}
        set {_uniqueStorage()._placement = newValue}
      }
      /// Returns true if `placement` has been explicitly set.
      var hasPlacement: Bool {return _storage._placement != nil}
      /// Clears the value of `placement`. Subsequent reads from it will return its default value.
      mutating func clearPlacement() {_uniqueStorage()._placement = nil}

      /// Video placement type declared by the publisher for this impression.
      /// Introduced in OpenRTB 2.6 to reflect updated industry definitions
      /// around different types of video ad placements. This field supersedes
      /// the Video.placement field. May be unset if the publisher did not
      /// declare a video placement type.
      /// Supported by Google.
      var plcmt: Com_Google_Openrtb_Plcmt {
        get {return _storage._plcmt ?? .unknown}
        set {_uniqueStorage()._plcmt = newValue}
      }
      /// Returns true if `plcmt` has been explicitly set.
      var hasPlcmt: Bool {return _storage._plcmt != nil}
      /// Clears the value of `plcmt`. Subsequent reads from it will return its default value.
      mutating func clearPlcmt() {_uniqueStorage()._plcmt = nil}

      /// Indicates if the impression must be linear or nonlinear. If none
      /// specified, assume all are allowed.
      /// Supported by Google.
      var linearity: Com_Google_Openrtb_VideoLinearity {
        get {return _storage._linearity ?? .linear}
        set {_uniqueStorage()._linearity = newValue}
      }
      /// Returns true if `linearity` has been explicitly set.
      var hasLinearity: Bool {return _storage._linearity != nil}
      /// Clears the value of `linearity`. Subsequent reads from it will return its default value.
      mutating func clearLinearity() {_uniqueStorage()._linearity = nil}

      /// Indicates if the player will allow the video to be skipped.
      /// If a bidder sends markup/creative that is itself skippable, the
      /// Bid object should include the attr array with an element of
      /// AD_CAN_BE_SKIPPED indicating skippable video.
      /// Supported by Google.
      var skip: Bool {
        get {return _storage._skip ?? false}
        set {_uniqueStorage()._skip = newValue}
      }
      /// Returns true if `skip` has been explicitly set.
      var hasSkip: Bool {return _storage._skip != nil}
      /// Clears the value of `skip`. Subsequent reads from it will return its default value.
      mutating func clearSkip() {_uniqueStorage()._skip = nil}

      /// Videos of total duration greater than this number of seconds
      /// can be skippable; only applicable if the ad is skippable.
      /// Not supported by Google.
      var skipmin: Int32 {
        get {return _storage._skipmin ?? 0}
        set {_uniqueStorage()._skipmin = newValue}
      }
      /// Returns true if `skipmin` has been explicitly set.
      var hasSkipmin: Bool {return _storage._skipmin != nil}
      /// Clears the value of `skipmin`. Subsequent reads from it will return its default value.
      mutating func clearSkipmin() {_uniqueStorage()._skipmin = nil}

      /// Number of seconds a video must play before skipping is
      /// enabled; only applicable if the ad is skippable.
      /// Not supported by Google.
      var skipafter: Int32 {
        get {return _storage._skipafter ?? 0}
        set {_uniqueStorage()._skipafter = newValue}
      }
      /// Returns true if `skipafter` has been explicitly set.
      var hasSkipafter: Bool {return _storage._skipafter != nil}
      /// Clears the value of `skipafter`. Subsequent reads from it will return its default value.
      mutating func clearSkipafter() {_uniqueStorage()._skipafter = nil}

      /// DEPRECATED in OpenRTB 2.6+; prefer the field podseq.
      /// If multiple ad impressions are offered in the same bid request,
      /// the sequence number will allow for the coordinated delivery of
      /// multiple creatives.
      /// Not supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var sequence: Int32 {
        get {return _storage._sequence ?? 1}
        set {_uniqueStorage()._sequence = newValue}
      }
      /// Returns true if `sequence` has been explicitly set.
      var hasSequence: Bool {return _storage._sequence != nil}
      /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
      mutating func clearSequence() {_uniqueStorage()._sequence = nil}

      /// For video ad pods, this value indicates that the seller can
      /// guarantee delivery against the indicated slot position in the pod.
      /// Not supported by Google.
      var slotinpod: Com_Google_Openrtb_SlotPositionInPod {
        get {return _storage._slotinpod ?? .slotPositionPodAny}
        set {_uniqueStorage()._slotinpod = newValue}
      }
      /// Returns true if `slotinpod` has been explicitly set.
      var hasSlotinpod: Bool {return _storage._slotinpod != nil}
      /// Clears the value of `slotinpod`. Subsequent reads from it will return its default value.
      mutating func clearSlotinpod() {_uniqueStorage()._slotinpod = nil}

      /// Minimum CPM per second. This is a price floor for the
      /// "dynamic" portion of a video ad pod, relative to the duration
      /// of bids an advertiser may submit.
      /// Not supported by Google.
      var mincpmpersec: Double {
        get {return _storage._mincpmpersec ?? 0}
        set {_uniqueStorage()._mincpmpersec = newValue}
      }
      /// Returns true if `mincpmpersec` has been explicitly set.
      var hasMincpmpersec: Bool {return _storage._mincpmpersec != nil}
      /// Clears the value of `mincpmpersec`. Subsequent reads from it will return its default value.
      mutating func clearMincpmpersec() {_uniqueStorage()._mincpmpersec = nil}

      /// Blocked creative attributes.
      /// Supported by Google.
      var battr: [Com_Google_Openrtb_CreativeAttribute] {
        get {return _storage._battr}
        set {_uniqueStorage()._battr = newValue}
      }

      /// Maximum extended video ad duration, if extension is allowed.
      /// If blank or 0, extension is not allowed. If -1, extension is allowed,
      /// and there is no time limit imposed. If greater than 0, then the value
      /// represents the number of seconds of extended play supported beyond
      /// the maxduration value.
      /// Not supported by Google.
      var maxextended: Int32 {
        get {return _storage._maxextended ?? 0}
        set {_uniqueStorage()._maxextended = newValue}
      }
      /// Returns true if `maxextended` has been explicitly set.
      var hasMaxextended: Bool {return _storage._maxextended != nil}
      /// Clears the value of `maxextended`. Subsequent reads from it will return its default value.
      mutating func clearMaxextended() {_uniqueStorage()._maxextended = nil}

      /// Minimum bit rate in Kbps.
      /// Not supported by Google.
      var minbitrate: Int32 {
        get {return _storage._minbitrate ?? 0}
        set {_uniqueStorage()._minbitrate = newValue}
      }
      /// Returns true if `minbitrate` has been explicitly set.
      var hasMinbitrate: Bool {return _storage._minbitrate != nil}
      /// Clears the value of `minbitrate`. Subsequent reads from it will return its default value.
      mutating func clearMinbitrate() {_uniqueStorage()._minbitrate = nil}

      /// Maximum bit rate in Kbps.
      /// Not supported by Google.
      var maxbitrate: Int32 {
        get {return _storage._maxbitrate ?? 0}
        set {_uniqueStorage()._maxbitrate = newValue}
      }
      /// Returns true if `maxbitrate` has been explicitly set.
      var hasMaxbitrate: Bool {return _storage._maxbitrate != nil}
      /// Clears the value of `maxbitrate`. Subsequent reads from it will return its default value.
      mutating func clearMaxbitrate() {_uniqueStorage()._maxbitrate = nil}

      /// Indicates if letter-boxing of 4:3 content into a 16:9 window is
      /// allowed.
      /// Not supported by Google.
      var boxingallowed: Bool {
        get {return _storage._boxingallowed ?? true}
        set {_uniqueStorage()._boxingallowed = newValue}
      }
      /// Returns true if `boxingallowed` has been explicitly set.
      var hasBoxingallowed: Bool {return _storage._boxingallowed != nil}
      /// Clears the value of `boxingallowed`. Subsequent reads from it will return its default value.
      mutating func clearBoxingallowed() {_uniqueStorage()._boxingallowed = nil}

      /// Playback methods that may be in use. If none are specified, any
      /// method may be used. Only one method is typically used in practice.
      /// As a result, this array may be converted to an integer in a future
      /// version of the specification. It is strongly advised to use only
      /// the first element of this array in preparation for this change.
      /// Supported by Google.
      var playbackmethod: [Com_Google_Openrtb_PlaybackMethod] {
        get {return _storage._playbackmethod}
        set {_uniqueStorage()._playbackmethod = newValue}
      }

      /// The event that causes playback to end.
      /// Supported by Google.
      var playbackend: Com_Google_Openrtb_PlaybackCessationMode {
        get {return _storage._playbackend ?? .completionOrUser}
        set {_uniqueStorage()._playbackend = newValue}
      }
      /// Returns true if `playbackend` has been explicitly set.
      var hasPlaybackend: Bool {return _storage._playbackend != nil}
      /// Clears the value of `playbackend`. Subsequent reads from it will return its default value.
      mutating func clearPlaybackend() {_uniqueStorage()._playbackend = nil}

      /// Supported delivery methods (for example, streaming, progressive).
      /// Supported by Google.
      var delivery: [Com_Google_Openrtb_ContentDeliveryMethod] {
        get {return _storage._delivery}
        set {_uniqueStorage()._delivery = newValue}
      }

      /// Ad position on screen.
      /// Supported by Google.
      var pos: Com_Google_Openrtb_AdPosition {
        get {return _storage._pos ?? .unknown}
        set {_uniqueStorage()._pos = newValue}
      }
      /// Returns true if `pos` has been explicitly set.
      var hasPos: Bool {return _storage._pos != nil}
      /// Clears the value of `pos`. Subsequent reads from it will return its default value.
      mutating func clearPos() {_uniqueStorage()._pos = nil}

      /// Array of Banner objects (Section 3.2.3) if companion ads are available.
      /// Supported by Google.
      var companionad: [Com_Google_Openrtb_BidRequest.Imp.Banner] {
        get {return _storage._companionad}
        set {_uniqueStorage()._companionad = newValue}
      }

      /// List of supported API frameworks for this impression.
      /// If an API is not explicitly listed, it is assumed not to be supported.
      /// Supported by Google.
      var api: [Com_Google_Openrtb_APIFramework] {
        get {return _storage._api}
        set {_uniqueStorage()._api = newValue}
      }

      /// Supported VAST companion ad types. Recommended if companion Banner
      /// objects are included through the companionad array.
      /// Supported by Google.
      var companiontype: [Com_Google_Openrtb_CompanionType] {
        get {return _storage._companiontype}
        set {_uniqueStorage()._companiontype = newValue}
      }

      /// DEPRECATED in OpenRTB 2.3+, REMOVED in 2.6.
      /// Use the field <code>protocols</code>.
      /// Not supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var `protocol`: Com_Google_Openrtb_Protocol {
        get {return _storage._protocol ?? .vast10}
        set {_uniqueStorage()._protocol = newValue}
      }
      /// Returns true if ``protocol`` has been explicitly set.
      var hasProtocol: Bool {return _storage._protocol != nil}
      /// Clears the value of ``protocol``. Subsequent reads from it will return its default value.
      mutating func clearProtocol() {_uniqueStorage()._protocol = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _storage = _StorageClass.defaultInstance
    }

    /// This object represents an audio type impression. Many of the fields
    /// are non-essential for minimally viable transactions, but are included
    /// to offer fine control when needed. Audio in OpenRTB generally assumes
    /// compliance with the DAAST standard. As such, the notion of companion
    /// ads is supported by optionally including an array of Banner objects
    /// that define these companion ads.
    ///
    /// The presence of a Audio as a subordinate of the Imp object indicates
    /// that this impression is offered as an audio type impression.
    /// At the publisher's discretion, that same impression may also be offered
    /// as banner, video, and/or native by also including as Imp subordinates
    /// objects of those types. However, any given bid for the impression must
    /// conform to one of the offered types.
    struct Audio: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Content MIME types supported (for example, "audio/mp4").
      /// REQUIRED by the OpenRTB specification: at least 1 element.
      /// Supported by Google.
      var mimes: [String] {
        get {return _storage._mimes}
        set {_uniqueStorage()._mimes = newValue}
      }

      /// Minimum audio ad duration in seconds.
      /// This field is mutually exclusive with rqddurs; only one of minduration
      /// and rqddurs may be in a bid request.
      /// Supported by Google.
      var minduration: Int32 {
        get {return _storage._minduration ?? 0}
        set {_uniqueStorage()._minduration = newValue}
      }
      /// Returns true if `minduration` has been explicitly set.
      var hasMinduration: Bool {return _storage._minduration != nil}
      /// Clears the value of `minduration`. Subsequent reads from it will return its default value.
      mutating func clearMinduration() {_uniqueStorage()._minduration = nil}

      /// Maximum audio ad duration in seconds.
      /// This field is mutually exclusive with rqddurs; only one of maxduration
      /// and rqddurs may be in a bid request.
      /// Supported by Google.
      var maxduration: Int32 {
        get {return _storage._maxduration ?? 0}
        set {_uniqueStorage()._maxduration = newValue}
      }
      /// Returns true if `maxduration` has been explicitly set.
      var hasMaxduration: Bool {return _storage._maxduration != nil}
      /// Clears the value of `maxduration`. Subsequent reads from it will return its default value.
      mutating func clearMaxduration() {_uniqueStorage()._maxduration = nil}

      /// Indicates the total amount of time in seconds that advertisers may
      /// fill for a "dynamic" audio ad pod, or the dynamic portion of a
      /// "hybrid" ad pod. This field is required only for the dynamic
      /// portion(s) of audio ad pods. This field refers to the length of the
      /// entire ad break, whereas minduration/maxduration/rqddurs are
      /// constraints relating to the slots that make up the pod.
      /// Not supported by Google.
      var poddur: Int32 {
        get {return _storage._poddur ?? 0}
        set {_uniqueStorage()._poddur = newValue}
      }
      /// Returns true if `poddur` has been explicitly set.
      var hasPoddur: Bool {return _storage._poddur != nil}
      /// Clears the value of `poddur`. Subsequent reads from it will return its default value.
      mutating func clearPoddur() {_uniqueStorage()._poddur = nil}

      /// Array of supported audio protocols.
      /// Supported by Google.
      var protocols: [Com_Google_Openrtb_Protocol] {
        get {return _storage._protocols}
        set {_uniqueStorage()._protocols = newValue}
      }

      /// Indicates the start delay in seconds for pre-roll, mid-roll, or
      /// post-roll ad placements.
      /// Refer to enum StartDelay for generic values.
      /// Supported by Google.
      var startdelay: Int32 {
        get {return _storage._startdelay ?? 0}
        set {_uniqueStorage()._startdelay = newValue}
      }
      /// Returns true if `startdelay` has been explicitly set.
      var hasStartdelay: Bool {return _storage._startdelay != nil}
      /// Clears the value of `startdelay`. Subsequent reads from it will return its default value.
      mutating func clearStartdelay() {_uniqueStorage()._startdelay = nil}

      /// Precise acceptable durations for audio creatives in seconds.
      /// This field specifically targets the live audio/radio use case where
      /// non-exact ad durations would result in undesirable ‘dead air’.
      /// This field is mutually exclusive with minduration and
      /// maxduration; if rqddurs is specified, minduration and
      /// maxduration must not be specified and the other way around.
      /// Not supported by Google.
      var rqddurs: [Int32] {
        get {return _storage._rqddurs}
        set {_uniqueStorage()._rqddurs = newValue}
      }

      /// Unique identifier indicating that an impression opportunity
      /// belongs to an audio ad pod. If multiple impression opportunities
      /// within a bid request share the same podid, this indicates that
      /// those impression opportunities belong to the same audio ad pod.
      /// Not supported by Google.
      var podid: String {
        get {return _storage._podid ?? String()}
        set {_uniqueStorage()._podid = newValue}
      }
      /// Returns true if `podid` has been explicitly set.
      var hasPodid: Bool {return _storage._podid != nil}
      /// Clears the value of `podid`. Subsequent reads from it will return its default value.
      mutating func clearPodid() {_uniqueStorage()._podid = nil}

      /// The sequence (position) of the audio ad pod within a content stream.
      /// Not supported by Google.
      var podseq: Com_Google_Openrtb_PodSequence {
        get {return _storage._podseq ?? .any}
        set {_uniqueStorage()._podseq = newValue}
      }
      /// Returns true if `podseq` has been explicitly set.
      var hasPodseq: Bool {return _storage._podseq != nil}
      /// Clears the value of `podseq`. Subsequent reads from it will return its default value.
      mutating func clearPodseq() {_uniqueStorage()._podseq = nil}

      /// DEPRECATED in OpenRTB 2.6+; prefer the field podseq.
      /// If multiple ad impressions are offered in the same bid request,
      /// the sequence number will allow for the coordinated delivery of
      /// multiple creatives.
      /// Not supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var sequence: Int32 {
        get {return _storage._sequence ?? 1}
        set {_uniqueStorage()._sequence = newValue}
      }
      /// Returns true if `sequence` has been explicitly set.
      var hasSequence: Bool {return _storage._sequence != nil}
      /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
      mutating func clearSequence() {_uniqueStorage()._sequence = nil}

      /// For audio ad pods, this value indicates that the seller can
      /// guarantee delivery against the indicated sequence.
      /// Not supported by Google.
      var slotinpod: Com_Google_Openrtb_SlotPositionInPod {
        get {return _storage._slotinpod ?? .slotPositionPodAny}
        set {_uniqueStorage()._slotinpod = newValue}
      }
      /// Returns true if `slotinpod` has been explicitly set.
      var hasSlotinpod: Bool {return _storage._slotinpod != nil}
      /// Clears the value of `slotinpod`. Subsequent reads from it will return its default value.
      mutating func clearSlotinpod() {_uniqueStorage()._slotinpod = nil}

      /// Minimum CPM per second. This is a price floor for the
      /// "dynamic" portion of an audio ad pod, relative to the duration
      /// of bids an advertiser may submit.
      /// Not supported by Google.
      var mincpmpersec: Double {
        get {return _storage._mincpmpersec ?? 0}
        set {_uniqueStorage()._mincpmpersec = newValue}
      }
      /// Returns true if `mincpmpersec` has been explicitly set.
      var hasMincpmpersec: Bool {return _storage._mincpmpersec != nil}
      /// Clears the value of `mincpmpersec`. Subsequent reads from it will return its default value.
      mutating func clearMincpmpersec() {_uniqueStorage()._mincpmpersec = nil}

      /// Blocked creative attributes.
      /// Supported by Google.
      var battr: [Com_Google_Openrtb_CreativeAttribute] {
        get {return _storage._battr}
        set {_uniqueStorage()._battr = newValue}
      }

      /// Maximum extended video ad duration, if extension is allowed.
      /// If blank or 0, extension is not allowed. If -1, extension is allowed,
      /// and there is no time limit imposed. If greater than 0, then the value
      /// represents the number of seconds of extended play supported beyond
      /// the maxduration value.
      /// Not supported by Google.
      var maxextended: Int32 {
        get {return _storage._maxextended ?? 0}
        set {_uniqueStorage()._maxextended = newValue}
      }
      /// Returns true if `maxextended` has been explicitly set.
      var hasMaxextended: Bool {return _storage._maxextended != nil}
      /// Clears the value of `maxextended`. Subsequent reads from it will return its default value.
      mutating func clearMaxextended() {_uniqueStorage()._maxextended = nil}

      /// Minimum bit rate in Kbps.
      /// Not supported by Google.
      var minbitrate: Int32 {
        get {return _storage._minbitrate ?? 0}
        set {_uniqueStorage()._minbitrate = newValue}
      }
      /// Returns true if `minbitrate` has been explicitly set.
      var hasMinbitrate: Bool {return _storage._minbitrate != nil}
      /// Clears the value of `minbitrate`. Subsequent reads from it will return its default value.
      mutating func clearMinbitrate() {_uniqueStorage()._minbitrate = nil}

      /// Maximum bit rate in Kbps.
      /// Not supported by Google.
      var maxbitrate: Int32 {
        get {return _storage._maxbitrate ?? 0}
        set {_uniqueStorage()._maxbitrate = newValue}
      }
      /// Returns true if `maxbitrate` has been explicitly set.
      var hasMaxbitrate: Bool {return _storage._maxbitrate != nil}
      /// Clears the value of `maxbitrate`. Subsequent reads from it will return its default value.
      mutating func clearMaxbitrate() {_uniqueStorage()._maxbitrate = nil}

      /// Supported delivery methods (for example, streaming, progressive).
      /// Supported by Google.
      var delivery: [Com_Google_Openrtb_ContentDeliveryMethod] {
        get {return _storage._delivery}
        set {_uniqueStorage()._delivery = newValue}
      }

      /// Array of Banner objects if companion ads are available.
      /// Supported by Google.
      var companionad: [Com_Google_Openrtb_BidRequest.Imp.Banner] {
        get {return _storage._companionad}
        set {_uniqueStorage()._companionad = newValue}
      }

      /// List of supported API frameworks for this impression.
      /// If an API is not explicitly listed, it is assumed not to be supported.
      /// Supported by Google.
      var api: [Com_Google_Openrtb_APIFramework] {
        get {return _storage._api}
        set {_uniqueStorage()._api = newValue}
      }

      /// Supported DAAST companion ad types. Recommended if companion Banner
      /// objects are included through the companionad array.
      /// Supported by Google.
      var companiontype: [Com_Google_Openrtb_CompanionType] {
        get {return _storage._companiontype}
        set {_uniqueStorage()._companiontype = newValue}
      }

      /// The maximum number of ads that can be played in an ad pod.
      /// Not supported by Google.
      var maxseq: Int32 {
        get {return _storage._maxseq ?? 0}
        set {_uniqueStorage()._maxseq = newValue}
      }
      /// Returns true if `maxseq` has been explicitly set.
      var hasMaxseq: Bool {return _storage._maxseq != nil}
      /// Clears the value of `maxseq`. Subsequent reads from it will return its default value.
      mutating func clearMaxseq() {_uniqueStorage()._maxseq = nil}

      /// Type of audio feed.
      /// Supported by Google.
      var feed: Com_Google_Openrtb_FeedType {
        get {return _storage._feed ?? .musicService}
        set {_uniqueStorage()._feed = newValue}
      }
      /// Returns true if `feed` has been explicitly set.
      var hasFeed: Bool {return _storage._feed != nil}
      /// Clears the value of `feed`. Subsequent reads from it will return its default value.
      mutating func clearFeed() {_uniqueStorage()._feed = nil}

      /// Indicates if the ad is stitched with audio content or delivered
      /// independently.
      /// Not supported by Google.
      var stitched: Bool {
        get {return _storage._stitched ?? false}
        set {_uniqueStorage()._stitched = newValue}
      }
      /// Returns true if `stitched` has been explicitly set.
      var hasStitched: Bool {return _storage._stitched != nil}
      /// Clears the value of `stitched`. Subsequent reads from it will return its default value.
      mutating func clearStitched() {_uniqueStorage()._stitched = nil}

      /// Volume normalization mode.
      /// Not supported by Google.
      var nvol: Com_Google_Openrtb_VolumeNormalizationMode {
        get {return _storage._nvol ?? .none}
        set {_uniqueStorage()._nvol = newValue}
      }
      /// Returns true if `nvol` has been explicitly set.
      var hasNvol: Bool {return _storage._nvol != nil}
      /// Clears the value of `nvol`. Subsequent reads from it will return its default value.
      mutating func clearNvol() {_uniqueStorage()._nvol = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _storage = _StorageClass.defaultInstance
    }

    /// OpenRTB 2.2: This object is the private marketplace container for
    /// direct deals between buyers and sellers that may pertain to this
    /// impression. The actual deals are represented as a collection of
    /// Deal objects. Refer to Section 7.2 for more details.
    struct Pmp: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Indicator of auction eligibility to seats named in the Direct Deals
      /// object, where false = all bids are accepted, true = bids are restricted
      /// to the deals specified and the terms thereof.
      /// Supported by Google.
      var privateAuction: Bool {
        get {return _privateAuction ?? false}
        set {_privateAuction = newValue}
      }
      /// Returns true if `privateAuction` has been explicitly set.
      var hasPrivateAuction: Bool {return self._privateAuction != nil}
      /// Clears the value of `privateAuction`. Subsequent reads from it will return its default value.
      mutating func clearPrivateAuction() {self._privateAuction = nil}

      /// Array of Deal (Section 3.2.18) objects that convey the specific deals
      /// applicable to this impression.
      /// Supported by Google.
      var deals: [Com_Google_Openrtb_BidRequest.Imp.Pmp.Deal] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// OpenRTB 2.2: This object constitutes a specific deal that was struck
      /// a priori between a buyer and a seller. Its presence with the Pmp
      /// collection indicates that this impression is available under the terms
      /// of that deal. Refer to Section 7.2 for more details.
      struct Deal: SwiftProtobuf.ExtensibleMessage, Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// A unique identifier for the direct deal.
        /// REQUIRED by the OpenRTB specification.
        /// Supported by Google.
        var id: String {
          get {return _id ?? String()}
          set {_id = newValue}
        }
        /// Returns true if `id` has been explicitly set.
        var hasID: Bool {return self._id != nil}
        /// Clears the value of `id`. Subsequent reads from it will return its default value.
        mutating func clearID() {self._id = nil}

        /// Minimum bid for this impression expressed in CPM.
        /// Supported by Google.
        var bidfloor: Double {
          get {return _bidfloor ?? 0}
          set {_bidfloor = newValue}
        }
        /// Returns true if `bidfloor` has been explicitly set.
        var hasBidfloor: Bool {return self._bidfloor != nil}
        /// Clears the value of `bidfloor`. Subsequent reads from it will return its default value.
        mutating func clearBidfloor() {self._bidfloor = nil}

        /// Currency specified using ISO-4217 alpha codes. This may be different
        /// from bid currency returned by bidder if this is allowed
        /// by the exchange.
        /// Supported by Google.
        var bidfloorcur: String {
          get {return _bidfloorcur ?? "USD"}
          set {_bidfloorcur = newValue}
        }
        /// Returns true if `bidfloorcur` has been explicitly set.
        var hasBidfloorcur: Bool {return self._bidfloorcur != nil}
        /// Clears the value of `bidfloorcur`. Subsequent reads from it will return its default value.
        mutating func clearBidfloorcur() {self._bidfloorcur = nil}

        /// Allowlist of buyer seats (for example, advertisers, agencies) that
        /// can bid on this deal. IDs of seats and knowledge of the buyer's
        /// customers to which they refer must be coordinated between bidders and
        /// the exchange a priori. Omission implies no seat restrictions.
        /// Supported by Google.
        var wseat: [String] = []

        /// Array of advertiser domains (for example, advertiser.com) allowed to
        /// bid on this deal. Omission implies no advertiser restrictions.
        /// Not supported by Google.
        var wadomain: [String] = []

        /// Optional override of the overall auction type of the bid request.
        /// Supports the additional value FIXED_PRICE: the value passed in
        /// bidfloor is the agreed upon deal price.
        /// Supported by Google.
        var at: Com_Google_Openrtb_AuctionType {
          get {return _at ?? .firstPrice}
          set {_at = newValue}
        }
        /// Returns true if `at` has been explicitly set.
        var hasAt: Bool {return self._at != nil}
        /// Clears the value of `at`. Subsequent reads from it will return its default value.
        mutating func clearAt() {self._at = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
        fileprivate var _id: String? = nil
        fileprivate var _bidfloor: Double? = nil
        fileprivate var _bidfloorcur: String? = nil
        fileprivate var _at: Com_Google_Openrtb_AuctionType? = nil
      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _privateAuction: Bool? = nil
    }

    /// OpenRTB 2.3: This object represents a native type impression.
    /// Native ad units are intended to blend seamlessly into the surrounding
    /// content (for example, a sponsored Twitter or Facebook post). As such, the
    /// response must be well-structured to afford the publisher fine-grained
    /// control over rendering.
    ///
    /// The Native Subcommittee has developed a companion specification to
    /// OpenRTB called the Native Ad Specification. It defines the request
    /// parameters and response markup structure of native ad units.
    /// This object provides the means of transporting request parameters as an
    /// opaque string so that the specific parameters can evolve separately
    /// under the auspices of the Native Ad Specification. Similarly, the
    /// ad markup served will be structured according to that specification.
    ///
    /// The presence of a Native as a subordinate of the Imp object indicates
    /// that this impression is offered as a native type impression.
    /// At the publisher's discretion, that same impression may also be offered
    /// as banner and/or video by also including as Imp subordinates the Banner
    /// and/or Video objects, respectively. However, any given bid for the
    /// impression must conform to one of the offered types.
    struct Native: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var requestOneof: Com_Google_Openrtb_BidRequest.Imp.Native.OneOf_RequestOneof? = nil

      /// Request payload complying with the Native Ad Specification.
      /// Exactly one of {request, request_native} should be used;
      /// this is the OpenRTB-compliant field for JSON serialization.
      var request: String {
        get {
          if case .request(let v)? = requestOneof {return v}
          return String()
        }
        set {requestOneof = .request(newValue)}
      }

      /// Request payload complying with the Native Ad Specification.
      /// Exactly one of {request, request_native} should be used;
      /// this is an alternate field preferred for Protobuf serialization.
      var requestNative: Com_Google_Openrtb_NativeRequest {
        get {
          if case .requestNative(let v)? = requestOneof {return v}
          return Com_Google_Openrtb_NativeRequest()
        }
        set {requestOneof = .requestNative(newValue)}
      }

      /// Version of the Native Ad Specification to which request complies.
      var ver: String {
        get {return _ver ?? String()}
        set {_ver = newValue}
      }
      /// Returns true if `ver` has been explicitly set.
      var hasVer: Bool {return self._ver != nil}
      /// Clears the value of `ver`. Subsequent reads from it will return its default value.
      mutating func clearVer() {self._ver = nil}

      /// List of supported API frameworks for this impression.
      /// If an API is not explicitly listed, it is assumed not to be supported.
      var api: [Com_Google_Openrtb_APIFramework] = []

      /// Blocked creative attributes.
      var battr: [Com_Google_Openrtb_CreativeAttribute] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum OneOf_RequestOneof: Equatable, Sendable {
        /// Request payload complying with the Native Ad Specification.
        /// Exactly one of {request, request_native} should be used;
        /// this is the OpenRTB-compliant field for JSON serialization.
        case request(String)
        /// Request payload complying with the Native Ad Specification.
        /// Exactly one of {request, request_native} should be used;
        /// this is an alternate field preferred for Protobuf serialization.
        case requestNative(Com_Google_Openrtb_NativeRequest)

        fileprivate var isInitialized: Bool {
          guard case .requestNative(let v) = self else {return true}
          return v.isInitialized
        }

      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _ver: String? = nil
    }

    /// OpenRTB 2.5: This object is associated with an impression as
    /// an array of metrics. These metrics can offer insight into
    /// the impression to assist with decisioning such as average recent
    /// viewability, click-through rate, or another metric. Each metric is
    /// identified by its type, reports the value of the metric, and optionally
    /// identifies the source or vendor measuring the value.
    struct Metric: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Type of metric being presented using exchange curated string
      /// names which should be published to bidders a priori.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var type: String {
        get {return _type ?? String()}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      /// Number representing the value of the metric.
      /// Probabilities must be in the range 0.0 - 1.0.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var value: Double {
        get {return _value ?? 0}
        set {_value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      var hasValue: Bool {return self._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
      mutating func clearValue() {self._value = nil}

      /// Source of the value using exchange curated string names
      /// which should be published to bidders a priori.
      /// If the exchange itself is the source versus a third party,
      /// "EXCHANGE" is recommended.
      /// Supported by Google.
      var vendor: String {
        get {return _vendor ?? String()}
        set {_vendor = newValue}
      }
      /// Returns true if `vendor` has been explicitly set.
      var hasVendor: Bool {return self._vendor != nil}
      /// Clears the value of `vendor`. Subsequent reads from it will return its default value.
      mutating func clearVendor() {self._vendor = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _type: String? = nil
      fileprivate var _value: Double? = nil
      fileprivate var _vendor: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.0: This object describes the publisher of the media in which
  /// the ad will be displayed. The publisher is typically the seller
  /// in an OpenRTB transaction.
  struct Publisher: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Exchange-specific publisher ID.
    /// Supported by Google.
    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    /// Publisher name (may be aliased at publisher's request).
    /// Not supported by Google.
    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    /// The taxonomy in use for cat.
    /// Not supported by Google.
    var cattax: Com_Google_Openrtb_CategoryTaxonomy {
      get {return _cattax ?? .iabContent10}
      set {_cattax = newValue}
    }
    /// Returns true if `cattax` has been explicitly set.
    var hasCattax: Bool {return self._cattax != nil}
    /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
    mutating func clearCattax() {self._cattax = nil}

    /// Array of IAB content categories that describe the publisher.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var cat: [String] = []

    /// Highest level domain of the publisher (for example, "publisher.com").
    /// Not supported by Google.
    var domain: String {
      get {return _domain ?? String()}
      set {_domain = newValue}
    }
    /// Returns true if `domain` has been explicitly set.
    var hasDomain: Bool {return self._domain != nil}
    /// Clears the value of `domain`. Subsequent reads from it will return its default value.
    mutating func clearDomain() {self._domain = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _id: String? = nil
    fileprivate var _name: String? = nil
    fileprivate var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    fileprivate var _domain: String? = nil
  }

  /// OpenRTB 2.0: This object describes the content in which the impression
  /// will appear, which may be syndicated or non-syndicated content.
  /// This object may be useful when syndicated content contains impressions and
  /// does not necessarily match the publisher's general content.
  /// The exchange might or might not have knowledge of the page where the
  /// content is running, as a result of the syndication method.
  /// For example might be a video impression embedded in an iframe on an
  /// unknown web property or device.
  struct Content: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID uniquely identifying the content.
    /// Not supported by Google.
    var id: String {
      get {return _storage._id ?? String()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// Content episode number (typically applies to video content).
    /// Not supported by Google.
    var episode: Int32 {
      get {return _storage._episode ?? 0}
      set {_uniqueStorage()._episode = newValue}
    }
    /// Returns true if `episode` has been explicitly set.
    var hasEpisode: Bool {return _storage._episode != nil}
    /// Clears the value of `episode`. Subsequent reads from it will return its default value.
    mutating func clearEpisode() {_uniqueStorage()._episode = nil}

    /// Content title.
    /// Video Examples: "Search Committee" (television), "A New Hope" (movie),
    /// or "Endgame" (made for web).
    /// Non-Video Example: "Why an Antarctic Glacier Is Melting So Quickly"
    /// (Time magazine article).
    /// Not supported by Google.
    var title: String {
      get {return _storage._title ?? String()}
      set {_uniqueStorage()._title = newValue}
    }
    /// Returns true if `title` has been explicitly set.
    var hasTitle: Bool {return _storage._title != nil}
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
    mutating func clearTitle() {_uniqueStorage()._title = nil}

    /// Content series.
    /// Video Examples: "The Office" (television), "Star Wars" (movie),
    /// or "Arby 'N' The Chief" (made for web).
    /// Non-Video Example: "Ecocentric" (Time Magazine blog).
    /// Not supported by Google.
    var series: String {
      get {return _storage._series ?? String()}
      set {_uniqueStorage()._series = newValue}
    }
    /// Returns true if `series` has been explicitly set.
    var hasSeries: Bool {return _storage._series != nil}
    /// Clears the value of `series`. Subsequent reads from it will return its default value.
    mutating func clearSeries() {_uniqueStorage()._series = nil}

    /// Content season; typically for video content (for example, "Season 3").
    /// Not supported by Google.
    var season: String {
      get {return _storage._season ?? String()}
      set {_uniqueStorage()._season = newValue}
    }
    /// Returns true if `season` has been explicitly set.
    var hasSeason: Bool {return _storage._season != nil}
    /// Clears the value of `season`. Subsequent reads from it will return its default value.
    mutating func clearSeason() {_uniqueStorage()._season = nil}

    /// Artist credited with the content.
    /// Not supported by Google.
    var artist: String {
      get {return _storage._artist ?? String()}
      set {_uniqueStorage()._artist = newValue}
    }
    /// Returns true if `artist` has been explicitly set.
    var hasArtist: Bool {return _storage._artist != nil}
    /// Clears the value of `artist`. Subsequent reads from it will return its default value.
    mutating func clearArtist() {_uniqueStorage()._artist = nil}

    /// Genre that best describes the content (for example, rock, pop, etc).
    /// Not supported by Google.
    var genre: String {
      get {return _storage._genre ?? String()}
      set {_uniqueStorage()._genre = newValue}
    }
    /// Returns true if `genre` has been explicitly set.
    var hasGenre: Bool {return _storage._genre != nil}
    /// Clears the value of `genre`. Subsequent reads from it will return its default value.
    mutating func clearGenre() {_uniqueStorage()._genre = nil}

    /// Album to which the content belongs; typically for audio.
    /// Not supported by Google.
    var album: String {
      get {return _storage._album ?? String()}
      set {_uniqueStorage()._album = newValue}
    }
    /// Returns true if `album` has been explicitly set.
    var hasAlbum: Bool {return _storage._album != nil}
    /// Clears the value of `album`. Subsequent reads from it will return its default value.
    mutating func clearAlbum() {_uniqueStorage()._album = nil}

    /// International Standard Recording Code conforming to ISO-3901.
    /// Not supported by Google.
    var isrc: String {
      get {return _storage._isrc ?? String()}
      set {_uniqueStorage()._isrc = newValue}
    }
    /// Returns true if `isrc` has been explicitly set.
    var hasIsrc: Bool {return _storage._isrc != nil}
    /// Clears the value of `isrc`. Subsequent reads from it will return its default value.
    mutating func clearIsrc() {_uniqueStorage()._isrc = nil}

    /// Details about the content Producer (Section 3.2.10).
    /// Supported by Google.
    var producer: Com_Google_Openrtb_BidRequest.Content.Producer {
      get {return _storage._producer ?? Com_Google_Openrtb_BidRequest.Content.Producer()}
      set {_uniqueStorage()._producer = newValue}
    }
    /// Returns true if `producer` has been explicitly set.
    var hasProducer: Bool {return _storage._producer != nil}
    /// Clears the value of `producer`. Subsequent reads from it will return its default value.
    mutating func clearProducer() {_uniqueStorage()._producer = nil}

    /// URL of the content, for buy-side contextualization or review.
    /// Supported by Google.
    var url: String {
      get {return _storage._url ?? String()}
      set {_uniqueStorage()._url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    var hasURL: Bool {return _storage._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
    mutating func clearURL() {_uniqueStorage()._url = nil}

    /// The taxonomy in use for cat.
    /// Not supported by Google.
    var cattax: Com_Google_Openrtb_CategoryTaxonomy {
      get {return _storage._cattax ?? .iabContent10}
      set {_uniqueStorage()._cattax = newValue}
    }
    /// Returns true if `cattax` has been explicitly set.
    var hasCattax: Bool {return _storage._cattax != nil}
    /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
    mutating func clearCattax() {_uniqueStorage()._cattax = nil}

    /// Array of IAB content categories that describe the content.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var cat: [String] {
      get {return _storage._cat}
      set {_uniqueStorage()._cat = newValue}
    }

    /// Production quality.
    /// Supported by Google.
    var prodq: Com_Google_Openrtb_ProductionQuality {
      get {return _storage._prodq ?? .qualityUnknown}
      set {_uniqueStorage()._prodq = newValue}
    }
    /// Returns true if `prodq` has been explicitly set.
    var hasProdq: Bool {return _storage._prodq != nil}
    /// Clears the value of `prodq`. Subsequent reads from it will return its default value.
    mutating func clearProdq() {_uniqueStorage()._prodq = nil}

    /// Type of content (for example, game, video or text).
    /// Not supported by Google.
    var context: Com_Google_Openrtb_ContentContext {
      get {return _storage._context ?? .video}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Content rating.
    /// Possible values: "DV-G", "DV-PG", "DV-T", "DV-MA".
    /// Supported by Google.
    var contentrating: String {
      get {return _storage._contentrating ?? String()}
      set {_uniqueStorage()._contentrating = newValue}
    }
    /// Returns true if `contentrating` has been explicitly set.
    var hasContentrating: Bool {return _storage._contentrating != nil}
    /// Clears the value of `contentrating`. Subsequent reads from it will return its default value.
    mutating func clearContentrating() {_uniqueStorage()._contentrating = nil}

    /// User rating of the content (for example, number of stars or likes).
    /// Supported by Google.
    var userrating: String {
      get {return _storage._userrating ?? String()}
      set {_uniqueStorage()._userrating = newValue}
    }
    /// Returns true if `userrating` has been explicitly set.
    var hasUserrating: Bool {return _storage._userrating != nil}
    /// Clears the value of `userrating`. Subsequent reads from it will return its default value.
    mutating func clearUserrating() {_uniqueStorage()._userrating = nil}

    /// Media rating per QAG guidelines.
    /// Not supported by Google.
    var qagmediarating: Com_Google_Openrtb_QAGMediaRating {
      get {return _storage._qagmediarating ?? .allAudiences}
      set {_uniqueStorage()._qagmediarating = newValue}
    }
    /// Returns true if `qagmediarating` has been explicitly set.
    var hasQagmediarating: Bool {return _storage._qagmediarating != nil}
    /// Clears the value of `qagmediarating`. Subsequent reads from it will return its default value.
    mutating func clearQagmediarating() {_uniqueStorage()._qagmediarating = nil}

    /// Comma separated list of keywords describing the content.
    /// Not supported by Google.
    var keywords: String {
      get {return _storage._keywords ?? String()}
      set {_uniqueStorage()._keywords = newValue}
    }
    /// Returns true if `keywords` has been explicitly set.
    var hasKeywords: Bool {return _storage._keywords != nil}
    /// Clears the value of `keywords`. Subsequent reads from it will return its default value.
    mutating func clearKeywords() {_uniqueStorage()._keywords = nil}

    /// false = not live, true = content is live (for example, stream, live
    /// blog).
    /// Supported by Google.
    var livestream: Bool {
      get {return _storage._livestream ?? false}
      set {_uniqueStorage()._livestream = newValue}
    }
    /// Returns true if `livestream` has been explicitly set.
    var hasLivestream: Bool {return _storage._livestream != nil}
    /// Clears the value of `livestream`. Subsequent reads from it will return its default value.
    mutating func clearLivestream() {_uniqueStorage()._livestream = nil}

    /// false = indirect, true = direct.
    /// Not supported by Google.
    var sourcerelationship: Bool {
      get {return _storage._sourcerelationship ?? false}
      set {_uniqueStorage()._sourcerelationship = newValue}
    }
    /// Returns true if `sourcerelationship` has been explicitly set.
    var hasSourcerelationship: Bool {return _storage._sourcerelationship != nil}
    /// Clears the value of `sourcerelationship`. Subsequent reads from it will return its default value.
    mutating func clearSourcerelationship() {_uniqueStorage()._sourcerelationship = nil}

    /// Length of content in seconds; appropriate for video or audio.
    /// Supported by Google.
    var len: Int32 {
      get {return _storage._len ?? 0}
      set {_uniqueStorage()._len = newValue}
    }
    /// Returns true if `len` has been explicitly set.
    var hasLen: Bool {return _storage._len != nil}
    /// Clears the value of `len`. Subsequent reads from it will return its default value.
    mutating func clearLen() {_uniqueStorage()._len = nil}

    /// Content language using ISO-639-1-alpha-2.
    /// Only one of language or langb should be present.
    /// Supported by Google.
    var language: String {
      get {return _storage._language ?? String()}
      set {_uniqueStorage()._language = newValue}
    }
    /// Returns true if `language` has been explicitly set.
    var hasLanguage: Bool {return _storage._language != nil}
    /// Clears the value of `language`. Subsequent reads from it will return its default value.
    mutating func clearLanguage() {_uniqueStorage()._language = nil}

    /// Content language using IETF BCP 47.
    /// Only one of language or langb should be present.
    /// Not supported by Google.
    var langb: String {
      get {return _storage._langb ?? String()}
      set {_uniqueStorage()._langb = newValue}
    }
    /// Returns true if `langb` has been explicitly set.
    var hasLangb: Bool {return _storage._langb != nil}
    /// Clears the value of `langb`. Subsequent reads from it will return its default value.
    mutating func clearLangb() {_uniqueStorage()._langb = nil}

    /// Indicator of whether or not the content is embeddable (for example, an
    /// embeddable video player).
    /// Not supported by Google.
    var embeddable: Bool {
      get {return _storage._embeddable ?? false}
      set {_uniqueStorage()._embeddable = newValue}
    }
    /// Returns true if `embeddable` has been explicitly set.
    var hasEmbeddable: Bool {return _storage._embeddable != nil}
    /// Clears the value of `embeddable`. Subsequent reads from it will return its default value.
    mutating func clearEmbeddable() {_uniqueStorage()._embeddable = nil}

    /// Additional content data. Each object represents a different data source.
    /// Supported by Google. Used for Publisher Provided Signals:
    /// https://support.google.com/admanager/answer/12451124
    var data: [Com_Google_Openrtb_BidRequest.DataMessage] {
      get {return _storage._data}
      set {_uniqueStorage()._data = newValue}
    }

    /// Details about the network the content is on.
    /// Not supported by Google.
    var network: Com_Google_Openrtb_BidRequest.Content.Network {
      get {return _storage._network ?? Com_Google_Openrtb_BidRequest.Content.Network()}
      set {_uniqueStorage()._network = newValue}
    }
    /// Returns true if `network` has been explicitly set.
    var hasNetwork: Bool {return _storage._network != nil}
    /// Clears the value of `network`. Subsequent reads from it will return its default value.
    mutating func clearNetwork() {_uniqueStorage()._network = nil}

    /// Details about the channel the content is on.
    /// Not supported by Google.
    var channel: Com_Google_Openrtb_BidRequest.Content.Channel {
      get {return _storage._channel ?? Com_Google_Openrtb_BidRequest.Content.Channel()}
      set {_uniqueStorage()._channel = newValue}
    }
    /// Returns true if `channel` has been explicitly set.
    var hasChannel: Bool {return _storage._channel != nil}
    /// Clears the value of `channel`. Subsequent reads from it will return its default value.
    mutating func clearChannel() {_uniqueStorage()._channel = nil}

    /// DEPRECATED in OpenRTB 2.4+. Prefer the field <code>prodq</code>.
    /// Video quality per IAB's classification.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var videoquality: Com_Google_Openrtb_ProductionQuality {
      get {return _storage._videoquality ?? .qualityUnknown}
      set {_uniqueStorage()._videoquality = newValue}
    }
    /// Returns true if `videoquality` has been explicitly set.
    var hasVideoquality: Bool {return _storage._videoquality != nil}
    /// Clears the value of `videoquality`. Subsequent reads from it will return its default value.
    mutating func clearVideoquality() {_uniqueStorage()._videoquality = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// OpenRTB 2.0: This object defines the producer of the content in which
    /// the ad will be shown. This is particularly useful when the content is
    /// syndicated and may be distributed through different publishers and thus
    /// when the producer and publisher are not necessarily the same entity.
    struct Producer: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Content producer or originator ID. Useful if content is syndicated,
      /// and may be posted on a site using embed tags.
      /// Not supported by Google.
      var id: String {
        get {return _id ?? String()}
        set {_id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return self._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {self._id = nil}

      /// Content producer or originator name (for example, "Warner Bros").
      /// Not supported by Google.
      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      /// The taxonomy in use for cat.
      /// Not supported by Google.
      var cattax: Com_Google_Openrtb_CategoryTaxonomy {
        get {return _cattax ?? .iabContent10}
        set {_cattax = newValue}
      }
      /// Returns true if `cattax` has been explicitly set.
      var hasCattax: Bool {return self._cattax != nil}
      /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
      mutating func clearCattax() {self._cattax = nil}

      /// Array of IAB content categories that describe the content producer.
      /// The taxonomy to be used is defined by the cattax field.
      /// Not supported by Google.
      var cat: [String] = []

      /// Highest level domain of the content producer (for example,
      /// "producer.com").
      /// Supported by Google.
      var domain: String {
        get {return _domain ?? String()}
        set {_domain = newValue}
      }
      /// Returns true if `domain` has been explicitly set.
      var hasDomain: Bool {return self._domain != nil}
      /// Clears the value of `domain`. Subsequent reads from it will return its default value.
      mutating func clearDomain() {self._domain = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _id: String? = nil
      fileprivate var _name: String? = nil
      fileprivate var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
      fileprivate var _domain: String? = nil
    }

    /// This object describes the network an ad will be displayed on.
    /// A Network is defined as the parent entity of the Channel object's entity
    /// for the purposes of organizing Channels. Examples are companies that own
    /// and/or license a collection of content channels (Viacom, Discovery, CBS,
    /// WarnerMedia, Turner and others), or studio that creates such content and
    /// self-distributes content. Name is a human-readable field while domain and
    /// id can be used for reporting and targeting purposes.
    struct Network: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// A unique identifier assigned by the publisher, for example "net-123".
      /// This may not be a unique identifier across all supply sources.
      /// Not supported by Google.
      var id: String {
        get {return _id ?? String()}
        set {_id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return self._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {self._id = nil}

      /// Network the content is on (e.g., a TV network like "ABC").
      /// Not supported by Google.
      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      /// The primary domain of the network (e.g. "abc.com" in the case
      /// of the network ABC). It is recommended to include the top
      /// private domain (PSL+1) for DSP targeting normalization purposes.
      /// Not supported by Google.
      var domain: String {
        get {return _domain ?? String()}
        set {_domain = newValue}
      }
      /// Returns true if `domain` has been explicitly set.
      var hasDomain: Bool {return self._domain != nil}
      /// Clears the value of `domain`. Subsequent reads from it will return its default value.
      mutating func clearDomain() {self._domain = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _id: String? = nil
      fileprivate var _name: String? = nil
      fileprivate var _domain: String? = nil
    }

    /// This object describes the channel an ad will be displayed on.
    /// A Channel is defined as the entity that curates a content library,
    /// or stream within a brand name for viewers. Examples are specific view
    /// selectable 'channels' within linear and streaming television
    /// (MTV, HGTV, CNN, BBC One, etc) or a specific stream of audio content
    /// commonly called 'stations.' Name is a human-readable field while domain
    /// and id can be used for reporting and targeting purposes.
    struct Channel: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// A unique identifier assigned by the publisher, for example "ch-456".
      /// This may not be a unique identifier across all supply sources.
      /// Not supported by Google.
      var id: String {
        get {return _id ?? String()}
        set {_id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return self._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {self._id = nil}

      /// Channel the content is on (e.g., a local channel like "WABC-TV").
      /// Not supported by Google.
      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      /// The primary domain of the channel (e.g. "abc7ny.com" in the
      /// case of the local channel WABC-TV). It is recommended to
      /// include the top private domain (PSL+1) for DSP targeting
      /// normalization purposes.
      /// Not supported by Google.
      var domain: String {
        get {return _domain ?? String()}
        set {_domain = newValue}
      }
      /// Returns true if `domain` has been explicitly set.
      var hasDomain: Bool {return self._domain != nil}
      /// Clears the value of `domain`. Subsequent reads from it will return its default value.
      mutating func clearDomain() {self._domain = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _id: String? = nil
      fileprivate var _name: String? = nil
      fileprivate var _domain: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.0: This object should be included if the ad supported content
  /// is a website as opposed to a non-browser application. A bid request must
  /// not contain both a Site and an App object. At a minimum, it is useful to
  /// provide a site ID or page URL, but this is not strictly required.
  struct Site: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Site ID on the exchange.
    /// Not supported by Google.
    var id: String {
      get {return _storage._id ?? String()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// Site name (may be masked at publisher's request).
    /// Not supported by Google.
    var name: String {
      get {return _storage._name ?? String()}
      set {_uniqueStorage()._name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return _storage._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {_uniqueStorage()._name = nil}

    /// Domain of the site, used for advertiser side blocking.
    /// For example, "foo.com".
    /// Not supported by Google.
    var domain: String {
      get {return _storage._domain ?? String()}
      set {_uniqueStorage()._domain = newValue}
    }
    /// Returns true if `domain` has been explicitly set.
    var hasDomain: Bool {return _storage._domain != nil}
    /// Clears the value of `domain`. Subsequent reads from it will return its default value.
    mutating func clearDomain() {_uniqueStorage()._domain = nil}

    /// The taxonomy in use for cat, sectioncat and pagecat.
    /// Not supported by Google.
    var cattax: Com_Google_Openrtb_CategoryTaxonomy {
      get {return _storage._cattax ?? .iabContent10}
      set {_uniqueStorage()._cattax = newValue}
    }
    /// Returns true if `cattax` has been explicitly set.
    var hasCattax: Bool {return _storage._cattax != nil}
    /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
    mutating func clearCattax() {_uniqueStorage()._cattax = nil}

    /// Array of IAB content categories of the site.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var cat: [String] {
      get {return _storage._cat}
      set {_uniqueStorage()._cat = newValue}
    }

    /// Array of IAB content categories that describe the current section
    /// of the site.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var sectioncat: [String] {
      get {return _storage._sectioncat}
      set {_uniqueStorage()._sectioncat = newValue}
    }

    /// Array of IAB content categories that describe the current page or view
    /// of the site.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var pagecat: [String] {
      get {return _storage._pagecat}
      set {_uniqueStorage()._pagecat = newValue}
    }

    /// URL of the page where the impression will be shown.
    /// Supported by Google.
    var page: String {
      get {return _storage._page ?? String()}
      set {_uniqueStorage()._page = newValue}
    }
    /// Returns true if `page` has been explicitly set.
    var hasPage: Bool {return _storage._page != nil}
    /// Clears the value of `page`. Subsequent reads from it will return its default value.
    mutating func clearPage() {_uniqueStorage()._page = nil}

    /// Indicates if the site has a privacy policy.
    /// Not supported by Google.
    var privacypolicy: Bool {
      get {return _storage._privacypolicy ?? false}
      set {_uniqueStorage()._privacypolicy = newValue}
    }
    /// Returns true if `privacypolicy` has been explicitly set.
    var hasPrivacypolicy: Bool {return _storage._privacypolicy != nil}
    /// Clears the value of `privacypolicy`. Subsequent reads from it will return its default value.
    mutating func clearPrivacypolicy() {_uniqueStorage()._privacypolicy = nil}

    /// Referrer URL that caused navigation to the current page.
    /// Not supported by Google.
    var ref: String {
      get {return _storage._ref ?? String()}
      set {_uniqueStorage()._ref = newValue}
    }
    /// Returns true if `ref` has been explicitly set.
    var hasRef: Bool {return _storage._ref != nil}
    /// Clears the value of `ref`. Subsequent reads from it will return its default value.
    mutating func clearRef() {_uniqueStorage()._ref = nil}

    /// Search string that caused navigation to the current page.
    /// Not supported by Google.
    var search: String {
      get {return _storage._search ?? String()}
      set {_uniqueStorage()._search = newValue}
    }
    /// Returns true if `search` has been explicitly set.
    var hasSearch: Bool {return _storage._search != nil}
    /// Clears the value of `search`. Subsequent reads from it will return its default value.
    mutating func clearSearch() {_uniqueStorage()._search = nil}

    /// Details about the Publisher (Section 3.2.8) of the site.
    /// Supported by Google.
    var publisher: Com_Google_Openrtb_BidRequest.Publisher {
      get {return _storage._publisher ?? Com_Google_Openrtb_BidRequest.Publisher()}
      set {_uniqueStorage()._publisher = newValue}
    }
    /// Returns true if `publisher` has been explicitly set.
    var hasPublisher: Bool {return _storage._publisher != nil}
    /// Clears the value of `publisher`. Subsequent reads from it will return its default value.
    mutating func clearPublisher() {_uniqueStorage()._publisher = nil}

    /// Details about the Content (Section 3.2.9) within the site.
    /// Supported by Google.
    var content: Com_Google_Openrtb_BidRequest.Content {
      get {return _storage._content ?? Com_Google_Openrtb_BidRequest.Content()}
      set {_uniqueStorage()._content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    var hasContent: Bool {return _storage._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    mutating func clearContent() {_uniqueStorage()._content = nil}

    /// Comma separated list of keywords about this site.
    /// Not supported by Google.
    var keywords: String {
      get {return _storage._keywords ?? String()}
      set {_uniqueStorage()._keywords = newValue}
    }
    /// Returns true if `keywords` has been explicitly set.
    var hasKeywords: Bool {return _storage._keywords != nil}
    /// Clears the value of `keywords`. Subsequent reads from it will return its default value.
    mutating func clearKeywords() {_uniqueStorage()._keywords = nil}

    /// Indicates if the site has been programmed to optimize layout
    /// when viewed on mobile devices.
    /// Supported by Google.
    var mobile: Bool {
      get {return _storage._mobile ?? false}
      set {_uniqueStorage()._mobile = newValue}
    }
    /// Returns true if `mobile` has been explicitly set.
    var hasMobile: Bool {return _storage._mobile != nil}
    /// Clears the value of `mobile`. Subsequent reads from it will return its default value.
    mutating func clearMobile() {_uniqueStorage()._mobile = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.0: This object should be included if the ad supported content
  /// is a non-browser application (typically in mobile) as opposed to a website.
  /// A bid request must not contain both an App and a Site object.
  /// At a minimum, it is useful to provide an App ID or bundle,
  /// but this is not strictly required.
  struct App: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Application ID on the exchange.
    /// Not supported by Google.
    var id: String {
      get {return _storage._id ?? String()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// Application name (may be aliased at publisher's request). App names for
    /// SDK-less requests (mostly from connected TVs) can be provided by the
    /// publisher directly in the request.
    /// Supported by Google.
    var name: String {
      get {return _storage._name ?? String()}
      set {_uniqueStorage()._name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return _storage._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {_uniqueStorage()._name = nil}

    /// Domain of the application. For example, "mygame.foo.com".
    /// Not supported by Google.
    var domain: String {
      get {return _storage._domain ?? String()}
      set {_uniqueStorage()._domain = newValue}
    }
    /// Returns true if `domain` has been explicitly set.
    var hasDomain: Bool {return _storage._domain != nil}
    /// Clears the value of `domain`. Subsequent reads from it will return its default value.
    mutating func clearDomain() {_uniqueStorage()._domain = nil}

    /// The taxonomy in use for cat, sectioncat and pagecat.
    /// Not supported by Google.
    var cattax: Com_Google_Openrtb_CategoryTaxonomy {
      get {return _storage._cattax ?? .iabContent10}
      set {_uniqueStorage()._cattax = newValue}
    }
    /// Returns true if `cattax` has been explicitly set.
    var hasCattax: Bool {return _storage._cattax != nil}
    /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
    mutating func clearCattax() {_uniqueStorage()._cattax = nil}

    /// Array of IAB content categories of the app.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var cat: [String] {
      get {return _storage._cat}
      set {_uniqueStorage()._cat = newValue}
    }

    /// Array of IAB content categories that describe the current section
    /// of the app.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var sectioncat: [String] {
      get {return _storage._sectioncat}
      set {_uniqueStorage()._sectioncat = newValue}
    }

    /// Array of IAB content categories that describe the current page or view
    /// of the app.
    /// The taxonomy to be used is defined by the cattax field.
    /// Not supported by Google.
    var pagecat: [String] {
      get {return _storage._pagecat}
      set {_uniqueStorage()._pagecat = newValue}
    }

    /// Application version.
    /// Not supported by Google.
    var ver: String {
      get {return _storage._ver ?? String()}
      set {_uniqueStorage()._ver = newValue}
    }
    /// Returns true if `ver` has been explicitly set.
    var hasVer: Bool {return _storage._ver != nil}
    /// Clears the value of `ver`. Subsequent reads from it will return its default value.
    mutating func clearVer() {_uniqueStorage()._ver = nil}

    /// A platform-specific application identifier intended to be
    /// unique to the app and independent of the exchange. On Android,
    /// this should be a bundle or package name (for example, com.foo.mygame).
    /// On iOS, it is a numeric ID. For SDK-less requests (mostly from connected
    /// TVs), it can be provided by the publisher directly in the request.
    /// Supported by Google.
    var bundle: String {
      get {return _storage._bundle ?? String()}
      set {_uniqueStorage()._bundle = newValue}
    }
    /// Returns true if `bundle` has been explicitly set.
    var hasBundle: Bool {return _storage._bundle != nil}
    /// Clears the value of `bundle`. Subsequent reads from it will return its default value.
    mutating func clearBundle() {_uniqueStorage()._bundle = nil}

    /// Indicates if the app has a privacy policy.
    /// Not supported by Google.
    var privacypolicy: Bool {
      get {return _storage._privacypolicy ?? false}
      set {_uniqueStorage()._privacypolicy = newValue}
    }
    /// Returns true if `privacypolicy` has been explicitly set.
    var hasPrivacypolicy: Bool {return _storage._privacypolicy != nil}
    /// Clears the value of `privacypolicy`. Subsequent reads from it will return its default value.
    mutating func clearPrivacypolicy() {_uniqueStorage()._privacypolicy = nil}

    /// false = app is free, true = the app is a paid version.
    /// Not supported by Google.
    var paid: Bool {
      get {return _storage._paid ?? false}
      set {_uniqueStorage()._paid = newValue}
    }
    /// Returns true if `paid` has been explicitly set.
    var hasPaid: Bool {return _storage._paid != nil}
    /// Clears the value of `paid`. Subsequent reads from it will return its default value.
    mutating func clearPaid() {_uniqueStorage()._paid = nil}

    /// Details about the Publisher (Section 3.2.8) of the app.
    /// Supported by Google.
    var publisher: Com_Google_Openrtb_BidRequest.Publisher {
      get {return _storage._publisher ?? Com_Google_Openrtb_BidRequest.Publisher()}
      set {_uniqueStorage()._publisher = newValue}
    }
    /// Returns true if `publisher` has been explicitly set.
    var hasPublisher: Bool {return _storage._publisher != nil}
    /// Clears the value of `publisher`. Subsequent reads from it will return its default value.
    mutating func clearPublisher() {_uniqueStorage()._publisher = nil}

    /// Details about the Content (Section 3.2.9) within the app.
    /// Supported by Google.
    var content: Com_Google_Openrtb_BidRequest.Content {
      get {return _storage._content ?? Com_Google_Openrtb_BidRequest.Content()}
      set {_uniqueStorage()._content = newValue}
    }
    /// Returns true if `content` has been explicitly set.
    var hasContent: Bool {return _storage._content != nil}
    /// Clears the value of `content`. Subsequent reads from it will return its default value.
    mutating func clearContent() {_uniqueStorage()._content = nil}

    /// Comma separated list of keywords about the app.
    /// Not supported by Google.
    var keywords: String {
      get {return _storage._keywords ?? String()}
      set {_uniqueStorage()._keywords = newValue}
    }
    /// Returns true if `keywords` has been explicitly set.
    var hasKeywords: Bool {return _storage._keywords != nil}
    /// Clears the value of `keywords`. Subsequent reads from it will return its default value.
    mutating func clearKeywords() {_uniqueStorage()._keywords = nil}

    /// App store URL for an installed app; for QAG 1.5 compliance.
    /// Supported by Google.
    var storeurl: String {
      get {return _storage._storeurl ?? String()}
      set {_uniqueStorage()._storeurl = newValue}
    }
    /// Returns true if `storeurl` has been explicitly set.
    var hasStoreurl: Bool {return _storage._storeurl != nil}
    /// Clears the value of `storeurl`. Subsequent reads from it will return its default value.
    mutating func clearStoreurl() {_uniqueStorage()._storeurl = nil}

    var ext: String {
      get {return _storage._ext ?? String()}
      set {_uniqueStorage()._ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return _storage._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {_uniqueStorage()._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.0: This object encapsulates various methods for specifying a
  /// geographic location. When subordinate to a Device object, it indicates the
  /// location of the device which can also be interpreted as the user's current
  /// location. When subordinate to a User object, it indicates the location of
  /// the user's home base (for example, not necessarily their current location).
  ///
  /// Google: In Google's implementation of OpenRTB, coarse geolocation
  /// information is approximated based on the IP address of the device the ad
  /// request originated from. This information will typically–but not always–be
  /// included in the bid request with lat/lon representing the center point of
  /// a circle, where accuracy is its radius. To learn more about geolocation,
  /// see the geotargeting guide:
  /// https://developers.google.com/authorized-buyers/rtb/geotargeting.
  struct Geo: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Approximate latitude from -90.0 to +90.0, where negative is south.
    /// Supported by Google.
    var lat: Double {
      get {return _lat ?? 0}
      set {_lat = newValue}
    }
    /// Returns true if `lat` has been explicitly set.
    var hasLat: Bool {return self._lat != nil}
    /// Clears the value of `lat`. Subsequent reads from it will return its default value.
    mutating func clearLat() {self._lat = nil}

    /// Approximate longitude from -180.0 to +180.0, where negative is west.
    /// Supported by Google.
    var lon: Double {
      get {return _lon ?? 0}
      set {_lon = newValue}
    }
    /// Returns true if `lon` has been explicitly set.
    var hasLon: Bool {return self._lon != nil}
    /// Clears the value of `lon`. Subsequent reads from it will return its default value.
    mutating func clearLon() {self._lon = nil}

    /// Country using ISO-3166-1 Alpha-3.
    /// Supported by Google.
    var country: String {
      get {return _country ?? String()}
      set {_country = newValue}
    }
    /// Returns true if `country` has been explicitly set.
    var hasCountry: Bool {return self._country != nil}
    /// Clears the value of `country`. Subsequent reads from it will return its default value.
    mutating func clearCountry() {self._country = nil}

    /// Region code using ISO-3166-2; 2-letter state code if USA.
    /// Supported by Google.
    var region: String {
      get {return _region ?? String()}
      set {_region = newValue}
    }
    /// Returns true if `region` has been explicitly set.
    var hasRegion: Bool {return self._region != nil}
    /// Clears the value of `region`. Subsequent reads from it will return its default value.
    mutating func clearRegion() {self._region = nil}

    /// Region of a country using FIPS 10-4 notation. While OpenRTB supports
    /// this attribute, it has been withdrawn by NIST in 2008.
    /// Not supported by Google.
    var regionfips104: String {
      get {return _regionfips104 ?? String()}
      set {_regionfips104 = newValue}
    }
    /// Returns true if `regionfips104` has been explicitly set.
    var hasRegionfips104: Bool {return self._regionfips104 != nil}
    /// Clears the value of `regionfips104`. Subsequent reads from it will return its default value.
    mutating func clearRegionfips104() {self._regionfips104 = nil}

    /// Google metro code; similar to but not exactly Nielsen DMAs.
    /// See Appendix A for a link to the codes.
    /// (http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
    /// Supported by Google.
    var metro: String {
      get {return _metro ?? String()}
      set {_metro = newValue}
    }
    /// Returns true if `metro` has been explicitly set.
    var hasMetro: Bool {return self._metro != nil}
    /// Clears the value of `metro`. Subsequent reads from it will return its default value.
    mutating func clearMetro() {self._metro = nil}

    /// City using United Nations Code for Trade & Transport Locations.
    /// See Appendix A for a link to the codes.
    /// (http://www.unece.org/cefact/locode/service/location.htm).
    /// Supported by Google.
    var city: String {
      get {return _city ?? String()}
      set {_city = newValue}
    }
    /// Returns true if `city` has been explicitly set.
    var hasCity: Bool {return self._city != nil}
    /// Clears the value of `city`. Subsequent reads from it will return its default value.
    mutating func clearCity() {self._city = nil}

    /// Zip/postal code.
    /// Supported by Google.
    var zip: String {
      get {return _zip ?? String()}
      set {_zip = newValue}
    }
    /// Returns true if `zip` has been explicitly set.
    var hasZip: Bool {return self._zip != nil}
    /// Clears the value of `zip`. Subsequent reads from it will return its default value.
    mutating func clearZip() {self._zip = nil}

    /// Source of location data; recommended when passing lat/lon.
    /// Supported by Google.
    var type: Com_Google_Openrtb_LocationType {
      get {return _type ?? .gpsLocation}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    /// Estimated location accuracy in meters; recommended when lat/lon are
    /// specified and derived from a device's location services (for example,
    /// type = 1). Note that this is the accuracy as reported from the device.
    /// Consult OS specific documentation (for example, Android, iOS) for exact
    /// interpretation.
    ///
    /// Google: The radius in meters of a circle approximating the location of a
    /// device, where the center point is defined by lat/lon. This field is
    /// populated based on coarse IP-based geolocation.
    /// Supported by Google.
    var accuracy: Int32 {
      get {return _accuracy ?? 0}
      set {_accuracy = newValue}
    }
    /// Returns true if `accuracy` has been explicitly set.
    var hasAccuracy: Bool {return self._accuracy != nil}
    /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
    mutating func clearAccuracy() {self._accuracy = nil}

    /// Number of seconds since this geolocation fix was established.
    /// Note that devices may cache location data across multiple fetches.
    /// Ideally, this value should be from the time the actual fix was taken.
    /// Not supported by Google.
    var lastfix: Int32 {
      get {return _lastfix ?? 0}
      set {_lastfix = newValue}
    }
    /// Returns true if `lastfix` has been explicitly set.
    var hasLastfix: Bool {return self._lastfix != nil}
    /// Clears the value of `lastfix`. Subsequent reads from it will return its default value.
    mutating func clearLastfix() {self._lastfix = nil}

    /// Service or provider used to determine geolocation from IP
    /// address if applicable (for example, type = 2).
    /// Not supported by Google.
    var ipservice: Com_Google_Openrtb_LocationService {
      get {return _ipservice ?? .ip2Location}
      set {_ipservice = newValue}
    }
    /// Returns true if `ipservice` has been explicitly set.
    var hasIpservice: Bool {return self._ipservice != nil}
    /// Clears the value of `ipservice`. Subsequent reads from it will return its default value.
    mutating func clearIpservice() {self._ipservice = nil}

    /// Local time as the number +/- of minutes from UTC.
    /// Supported by Google.
    var utcoffset: Int32 {
      get {return _utcoffset ?? 0}
      set {_utcoffset = newValue}
    }
    /// Returns true if `utcoffset` has been explicitly set.
    var hasUtcoffset: Bool {return self._utcoffset != nil}
    /// Clears the value of `utcoffset`. Subsequent reads from it will return its default value.
    mutating func clearUtcoffset() {self._utcoffset = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _lat: Double? = nil
    fileprivate var _lon: Double? = nil
    fileprivate var _country: String? = nil
    fileprivate var _region: String? = nil
    fileprivate var _regionfips104: String? = nil
    fileprivate var _metro: String? = nil
    fileprivate var _city: String? = nil
    fileprivate var _zip: String? = nil
    fileprivate var _type: Com_Google_Openrtb_LocationType? = nil
    fileprivate var _accuracy: Int32? = nil
    fileprivate var _lastfix: Int32? = nil
    fileprivate var _ipservice: Com_Google_Openrtb_LocationService? = nil
    fileprivate var _utcoffset: Int32? = nil
  }

  /// OpenRTB 2.0: This object provides information pertaining to the device
  /// through which the user is interacting. Device information includes its
  /// hardware, platform, location, and carrier data. The device can refer to a
  /// mobile handset, a desktop computer, set top box, or other digital device.
  struct Device: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Location of the device assumed to be the user's current location defined
    /// by a Geo object (Section 3.2.12).
    /// Supported by Google.
    var geo: Com_Google_Openrtb_BidRequest.Geo {
      get {return _storage._geo ?? Com_Google_Openrtb_BidRequest.Geo()}
      set {_uniqueStorage()._geo = newValue}
    }
    /// Returns true if `geo` has been explicitly set.
    var hasGeo: Bool {return _storage._geo != nil}
    /// Clears the value of `geo`. Subsequent reads from it will return its default value.
    mutating func clearGeo() {_uniqueStorage()._geo = nil}

    /// Standard "Do Not Track" option as set in the header by the browser,
    /// where false = tracking is unrestricted, true = do not track.
    /// Not supported by Google.
    var dnt: Bool {
      get {return _storage._dnt ?? false}
      set {_uniqueStorage()._dnt = newValue}
    }
    /// Returns true if `dnt` has been explicitly set.
    var hasDnt: Bool {return _storage._dnt != nil}
    /// Clears the value of `dnt`. Subsequent reads from it will return its default value.
    mutating func clearDnt() {_uniqueStorage()._dnt = nil}

    /// "Limit Ad Tracking" is a commercially endorsed signal based on the
    /// operating system or device settings, where `false` indicates that
    /// tracking is unrestricted and `true` indicates that tracking must be
    /// limited per commercial guidelines.
    ///
    /// This signal reflects user decisions on surfaces including iOS App
    /// Tracking Transparency:
    /// https://developer.apple.com/documentation/apptrackingtransparency
    /// See also lmt and App Tracking Transparency guidance:
    /// https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/extensions/community_extensions/skadnetwork.md#dnt-lmt-and-app-tracking-transparency-guidance
    /// and Android advertising ID:
    /// https://support.google.com/googleplay/android-developer/answer/6048248
    ///
    /// Supported by Google.
    var lmt: Bool {
      get {return _storage._lmt ?? false}
      set {_uniqueStorage()._lmt = newValue}
    }
    /// Returns true if `lmt` has been explicitly set.
    var hasLmt: Bool {return _storage._lmt != nil}
    /// Clears the value of `lmt`. Subsequent reads from it will return its default value.
    mutating func clearLmt() {_uniqueStorage()._lmt = nil}

    /// Browser user agent string. Certain data may be redacted or replaced.
    /// Supported by Google.
    var ua: String {
      get {return _storage._ua ?? String()}
      set {_uniqueStorage()._ua = newValue}
    }
    /// Returns true if `ua` has been explicitly set.
    var hasUa: Bool {return _storage._ua != nil}
    /// Clears the value of `ua`. Subsequent reads from it will return its default value.
    mutating func clearUa() {_uniqueStorage()._ua = nil}

    /// Structured user agent information. If both Device.ua and Device.sua are
    /// present in the bid request, Device.sua should be considered the more
    /// accurate representation of the device attributes. This is because
    /// Device.ua may contain a frozen or reduced user agent string.
    /// Supported by Google.
    var sua: Com_Google_Openrtb_BidRequest.Device.UserAgent {
      get {return _storage._sua ?? Com_Google_Openrtb_BidRequest.Device.UserAgent()}
      set {_uniqueStorage()._sua = newValue}
    }
    /// Returns true if `sua` has been explicitly set.
    var hasSua: Bool {return _storage._sua != nil}
    /// Clears the value of `sua`. Subsequent reads from it will return its default value.
    mutating func clearSua() {_uniqueStorage()._sua = nil}

    /// IPv4 address closest to device.
    /// Supported by Google. Truncated to the first 3 octets: "X.X.X.0".
    var ip: String {
      get {return _storage._ip ?? String()}
      set {_uniqueStorage()._ip = newValue}
    }
    /// Returns true if `ip` has been explicitly set.
    var hasIp: Bool {return _storage._ip != nil}
    /// Clears the value of `ip`. Subsequent reads from it will return its default value.
    mutating func clearIp() {_uniqueStorage()._ip = nil}

    /// IPv6 address closest to device.
    /// Supported by Google. Truncated to the first 6 octets: "X:X:X:::::".
    var ipv6: String {
      get {return _storage._ipv6 ?? String()}
      set {_uniqueStorage()._ipv6 = newValue}
    }
    /// Returns true if `ipv6` has been explicitly set.
    var hasIpv6: Bool {return _storage._ipv6 != nil}
    /// Clears the value of `ipv6`. Subsequent reads from it will return its default value.
    mutating func clearIpv6() {_uniqueStorage()._ipv6 = nil}

    /// The general type of device.
    /// Supported by Google.
    var devicetype: Com_Google_Openrtb_DeviceType {
      get {return _storage._devicetype ?? .mobile}
      set {_uniqueStorage()._devicetype = newValue}
    }
    /// Returns true if `devicetype` has been explicitly set.
    var hasDevicetype: Bool {return _storage._devicetype != nil}
    /// Clears the value of `devicetype`. Subsequent reads from it will return its default value.
    mutating func clearDevicetype() {_uniqueStorage()._devicetype = nil}

    /// Device make (for example, "Apple" or "Samsung").
    /// Supported by Google.
    var make: String {
      get {return _storage._make ?? String()}
      set {_uniqueStorage()._make = newValue}
    }
    /// Returns true if `make` has been explicitly set.
    var hasMake: Bool {return _storage._make != nil}
    /// Clears the value of `make`. Subsequent reads from it will return its default value.
    mutating func clearMake() {_uniqueStorage()._make = nil}

    /// Device model (for example, "pixel 7 pro"). For iPhone/iPad, this
    /// field contains Apple's model identifier string (such as "iPhone12,1" and
    /// "iPad13,8") if available. Otherwise this field contains the generic model
    /// (either "iphone" or "ipad").
    /// Supported by Google.
    var model: String {
      get {return _storage._model ?? String()}
      set {_uniqueStorage()._model = newValue}
    }
    /// Returns true if `model` has been explicitly set.
    var hasModel: Bool {return _storage._model != nil}
    /// Clears the value of `model`. Subsequent reads from it will return its default value.
    mutating func clearModel() {_uniqueStorage()._model = nil}

    /// Device operating system (for example, "iOS").
    /// Supported by Google.
    var os: String {
      get {return _storage._os ?? String()}
      set {_uniqueStorage()._os = newValue}
    }
    /// Returns true if `os` has been explicitly set.
    var hasOs: Bool {return _storage._os != nil}
    /// Clears the value of `os`. Subsequent reads from it will return its default value.
    mutating func clearOs() {_uniqueStorage()._os = nil}

    /// Device operating system version (for example, "3.1.2").
    /// Supported by Google.
    var osv: String {
      get {return _storage._osv ?? String()}
      set {_uniqueStorage()._osv = newValue}
    }
    /// Returns true if `osv` has been explicitly set.
    var hasOsv: Bool {return _storage._osv != nil}
    /// Clears the value of `osv`. Subsequent reads from it will return its default value.
    mutating func clearOsv() {_uniqueStorage()._osv = nil}

    /// Hardware version of the device. For iPhone/iPad, this field contains
    /// Apple's model identifier string (such as "iPhone12,1" and "iPad13,8") if
    /// available.
    /// Supported by Google.
    var hwv: String {
      get {return _storage._hwv ?? String()}
      set {_uniqueStorage()._hwv = newValue}
    }
    /// Returns true if `hwv` has been explicitly set.
    var hasHwv: Bool {return _storage._hwv != nil}
    /// Clears the value of `hwv`. Subsequent reads from it will return its default value.
    mutating func clearHwv() {_uniqueStorage()._hwv = nil}

    /// Physical width of the screen in pixels.
    /// Supported by Google.
    var w: Int32 {
      get {return _storage._w ?? 0}
      set {_uniqueStorage()._w = newValue}
    }
    /// Returns true if `w` has been explicitly set.
    var hasW: Bool {return _storage._w != nil}
    /// Clears the value of `w`. Subsequent reads from it will return its default value.
    mutating func clearW() {_uniqueStorage()._w = nil}

    /// Physical height of the screen in pixels.
    /// Supported by Google.
    var h: Int32 {
      get {return _storage._h ?? 0}
      set {_uniqueStorage()._h = newValue}
    }
    /// Returns true if `h` has been explicitly set.
    var hasH: Bool {return _storage._h != nil}
    /// Clears the value of `h`. Subsequent reads from it will return its default value.
    mutating func clearH() {_uniqueStorage()._h = nil}

    /// Screen size as pixels per linear inch.
    /// Not supported by Google.
    var ppi: Int32 {
      get {return _storage._ppi ?? 0}
      set {_uniqueStorage()._ppi = newValue}
    }
    /// Returns true if `ppi` has been explicitly set.
    var hasPpi: Bool {return _storage._ppi != nil}
    /// Clears the value of `ppi`. Subsequent reads from it will return its default value.
    mutating func clearPpi() {_uniqueStorage()._ppi = nil}

    /// The ratio of physical pixels to device independent pixels.
    /// Supported by Google.
    var pxratio: Double {
      get {return _storage._pxratio ?? 0}
      set {_uniqueStorage()._pxratio = newValue}
    }
    /// Returns true if `pxratio` has been explicitly set.
    var hasPxratio: Bool {return _storage._pxratio != nil}
    /// Clears the value of `pxratio`. Subsequent reads from it will return its default value.
    mutating func clearPxratio() {_uniqueStorage()._pxratio = nil}

    /// Support for JavaScript.
    /// Not supported by Google.
    var js: Bool {
      get {return _storage._js ?? false}
      set {_uniqueStorage()._js = newValue}
    }
    /// Returns true if `js` has been explicitly set.
    var hasJs: Bool {return _storage._js != nil}
    /// Clears the value of `js`. Subsequent reads from it will return its default value.
    mutating func clearJs() {_uniqueStorage()._js = nil}

    /// Indicates if the geolocation API will be available to JavaScript
    /// code running in the banner.
    /// Not supported by Google.
    var geofetch: Bool {
      get {return _storage._geofetch ?? false}
      set {_uniqueStorage()._geofetch = newValue}
    }
    /// Returns true if `geofetch` has been explicitly set.
    var hasGeofetch: Bool {return _storage._geofetch != nil}
    /// Clears the value of `geofetch`. Subsequent reads from it will return its default value.
    mutating func clearGeofetch() {_uniqueStorage()._geofetch = nil}

    /// Version of Flash supported by the browser.
    /// Not supported by Google.
    var flashver: String {
      get {return _storage._flashver ?? String()}
      set {_uniqueStorage()._flashver = newValue}
    }
    /// Returns true if `flashver` has been explicitly set.
    var hasFlashver: Bool {return _storage._flashver != nil}
    /// Clears the value of `flashver`. Subsequent reads from it will return its default value.
    mutating func clearFlashver() {_uniqueStorage()._flashver = nil}

    /// Browser language using ISO-639-1-alpha-2.
    /// Only one of language or langb should be present.
    /// Not supported by Google.
    var language: String {
      get {return _storage._language ?? String()}
      set {_uniqueStorage()._language = newValue}
    }
    /// Returns true if `language` has been explicitly set.
    var hasLanguage: Bool {return _storage._language != nil}
    /// Clears the value of `language`. Subsequent reads from it will return its default value.
    mutating func clearLanguage() {_uniqueStorage()._language = nil}

    /// Browser language using IETF BCP 47.
    /// Only one of language or langb should be present.
    /// Not supported by Google.
    var langb: String {
      get {return _storage._langb ?? String()}
      set {_uniqueStorage()._langb = newValue}
    }
    /// Returns true if `langb` has been explicitly set.
    var hasLangb: Bool {return _storage._langb != nil}
    /// Clears the value of `langb`. Subsequent reads from it will return its default value.
    mutating func clearLangb() {_uniqueStorage()._langb = nil}

    /// Carrier or ISP (for example, "VERIZON") using exchange curated string
    /// names which should be published to bidders a priori.
    /// Supported by Google.
    var carrier: String {
      get {return _storage._carrier ?? String()}
      set {_uniqueStorage()._carrier = newValue}
    }
    /// Returns true if `carrier` has been explicitly set.
    var hasCarrier: Bool {return _storage._carrier != nil}
    /// Clears the value of `carrier`. Subsequent reads from it will return its default value.
    mutating func clearCarrier() {_uniqueStorage()._carrier = nil}

    /// Mobile carrier as the concatenated MCC-MNC code (for example,
    /// "310-005" identifies Verizon Wireless CDMA in the USA).
    /// Refer to https://en.wikipedia.org/wiki/Mobile_country_code
    /// for further examples. Note that the dash between the MCC
    /// and MNC parts is required to remove parsing ambiguity.
    /// The MCC-MNC values represent the SIM installed on the device and
    /// do not change when a device is roaming. Roaming may be inferred by
    /// a combination of the MCC-MNC, geo, IP and other data signals.
    /// Not supported by Google.
    var mccmnc: String {
      get {return _storage._mccmnc ?? String()}
      set {_uniqueStorage()._mccmnc = newValue}
    }
    /// Returns true if `mccmnc` has been explicitly set.
    var hasMccmnc: Bool {return _storage._mccmnc != nil}
    /// Clears the value of `mccmnc`. Subsequent reads from it will return its default value.
    mutating func clearMccmnc() {_uniqueStorage()._mccmnc = nil}

    /// Network connection type.
    ///
    /// Google: For 5G connection type, we send CELL_4G instead of CELL_5G.
    /// Supported by Google.
    var connectiontype: Com_Google_Openrtb_ConnectionType {
      get {return _storage._connectiontype ?? .connectionUnknown}
      set {_uniqueStorage()._connectiontype = newValue}
    }
    /// Returns true if `connectiontype` has been explicitly set.
    var hasConnectiontype: Bool {return _storage._connectiontype != nil}
    /// Clears the value of `connectiontype`. Subsequent reads from it will return its default value.
    mutating func clearConnectiontype() {_uniqueStorage()._connectiontype = nil}

    /// ID sanctioned for advertiser use in the clear (meaning, not hashed).
    /// Supported by Google.
    var ifa: String {
      get {return _storage._ifa ?? String()}
      set {_uniqueStorage()._ifa = newValue}
    }
    /// Returns true if `ifa` has been explicitly set.
    var hasIfa: Bool {return _storage._ifa != nil}
    /// Clears the value of `ifa`. Subsequent reads from it will return its default value.
    mutating func clearIfa() {_uniqueStorage()._ifa = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// Hardware device ID (for example, IMEI); hashed through SHA1.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var didsha1: String {
      get {return _storage._didsha1 ?? String()}
      set {_uniqueStorage()._didsha1 = newValue}
    }
    /// Returns true if `didsha1` has been explicitly set.
    var hasDidsha1: Bool {return _storage._didsha1 != nil}
    /// Clears the value of `didsha1`. Subsequent reads from it will return its default value.
    mutating func clearDidsha1() {_uniqueStorage()._didsha1 = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// Hardware device ID (for example, IMEI); hashed through MD5.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var didmd5: String {
      get {return _storage._didmd5 ?? String()}
      set {_uniqueStorage()._didmd5 = newValue}
    }
    /// Returns true if `didmd5` has been explicitly set.
    var hasDidmd5: Bool {return _storage._didmd5 != nil}
    /// Clears the value of `didmd5`. Subsequent reads from it will return its default value.
    mutating func clearDidmd5() {_uniqueStorage()._didmd5 = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// Platform device ID (for example, Android ID); hashed through SHA1.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var dpidsha1: String {
      get {return _storage._dpidsha1 ?? String()}
      set {_uniqueStorage()._dpidsha1 = newValue}
    }
    /// Returns true if `dpidsha1` has been explicitly set.
    var hasDpidsha1: Bool {return _storage._dpidsha1 != nil}
    /// Clears the value of `dpidsha1`. Subsequent reads from it will return its default value.
    mutating func clearDpidsha1() {_uniqueStorage()._dpidsha1 = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// Platform device ID (for example, Android ID); hashed through MD5.
    /// Supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var dpidmd5: String {
      get {return _storage._dpidmd5 ?? String()}
      set {_uniqueStorage()._dpidmd5 = newValue}
    }
    /// Returns true if `dpidmd5` has been explicitly set.
    var hasDpidmd5: Bool {return _storage._dpidmd5 != nil}
    /// Clears the value of `dpidmd5`. Subsequent reads from it will return its default value.
    mutating func clearDpidmd5() {_uniqueStorage()._dpidmd5 = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// MAC address of the device; hashed through SHA1.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var macsha1: String {
      get {return _storage._macsha1 ?? String()}
      set {_uniqueStorage()._macsha1 = newValue}
    }
    /// Returns true if `macsha1` has been explicitly set.
    var hasMacsha1: Bool {return _storage._macsha1 != nil}
    /// Clears the value of `macsha1`. Subsequent reads from it will return its default value.
    mutating func clearMacsha1() {_uniqueStorage()._macsha1 = nil}

    /// DEPRECATED in OpenRTB 2.6+. No replacement.
    /// MAC address of the device; hashed through MD5.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var macmd5: String {
      get {return _storage._macmd5 ?? String()}
      set {_uniqueStorage()._macmd5 = newValue}
    }
    /// Returns true if `macmd5` has been explicitly set.
    var hasMacmd5: Bool {return _storage._macmd5 != nil}
    /// Clears the value of `macmd5`. Subsequent reads from it will return its default value.
    mutating func clearMacmd5() {_uniqueStorage()._macmd5 = nil}

    var ext: String {
      get {return _storage._ext ?? String()}
      set {_uniqueStorage()._ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return _storage._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {_uniqueStorage()._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Structured user agent information, which can be used when a client
    /// supports User-Agent Client Hints: https://wicg.github.io/ua-client-hints/
    ///
    /// Note: When available, fields are sourced from Client Hints HTTP headers
    /// or equivalent JavaScript accessors from the NavigatorUAData interface.
    /// For agents that have no support for User-Agent Client Hints, an exchange
    /// can also extract information from the parsed User-Agent header, so this
    /// object can always be used as the source of the user agent information.
    struct UserAgent: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Each BrandVersion object identifies a browser or similar software
      /// component. Exchanges should send brands and versions derived from
      /// the Sec-CH-UA-Full-Version-List header.
      /// Not supported by Google.
      var browsers: [Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion] = []

      /// Identifies the user agent's execution platform / OS. Exchanges should
      /// send a brand derived from the Sec-CH-UA-Platform header, and version
      /// derived from the Sec-CH-UAPlatform-Version header.
      /// Not supported by Google.
      var platform: Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion {
        get {return _platform ?? Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion()}
        set {_platform = newValue}
      }
      /// Returns true if `platform` has been explicitly set.
      var hasPlatform: Bool {return self._platform != nil}
      /// Clears the value of `platform`. Subsequent reads from it will return its default value.
      mutating func clearPlatform() {self._platform = nil}

      /// true if the agent prefers a "mobile" version of the content if
      /// available, meaning optimized for small screens or touch input. false if
      /// the agent prefers the "desktop" or "full" content. Exchanges should
      /// derive this value from the Sec-CH-UAMobile header.
      /// Not supported by Google.
      var mobile: Bool {
        get {return _mobile ?? false}
        set {_mobile = newValue}
      }
      /// Returns true if `mobile` has been explicitly set.
      var hasMobile: Bool {return self._mobile != nil}
      /// Clears the value of `mobile`. Subsequent reads from it will return its default value.
      mutating func clearMobile() {self._mobile = nil}

      /// Device's major binary architecture, for example, "x86" or "arm".
      /// Exchanges should retrieve this value from the Sec-CH-UA-Arch header.
      /// Not supported by Google.
      var architecture: String {
        get {return _architecture ?? String()}
        set {_architecture = newValue}
      }
      /// Returns true if `architecture` has been explicitly set.
      var hasArchitecture: Bool {return self._architecture != nil}
      /// Clears the value of `architecture`. Subsequent reads from it will return its default value.
      mutating func clearArchitecture() {self._architecture = nil}

      /// Device's bitness, for example, "64" for 64-bit architecture. Exchanges
      /// should retrieve this value from the Sec-CH-UA-Bitness header.
      /// Not supported by Google.
      var bitness: String {
        get {return _bitness ?? String()}
        set {_bitness = newValue}
      }
      /// Returns true if `bitness` has been explicitly set.
      var hasBitness: Bool {return self._bitness != nil}
      /// Clears the value of `bitness`. Subsequent reads from it will return its default value.
      mutating func clearBitness() {self._bitness = nil}

      /// Device model. Exchanges should retrieve this value from the
      /// Sec-CH-UAModel header.
      /// Not supported by Google.
      var model: String {
        get {return _model ?? String()}
        set {_model = newValue}
      }
      /// Returns true if `model` has been explicitly set.
      var hasModel: Bool {return self._model != nil}
      /// Clears the value of `model`. Subsequent reads from it will return its default value.
      mutating func clearModel() {self._model = nil}

      /// The source of data for the User Agent information.
      /// Supported by Google.
      var source: Com_Google_Openrtb_UserAgentSource {
        get {return _source ?? .unknownSource}
        set {_source = newValue}
      }
      /// Returns true if `source` has been explicitly set.
      var hasSource: Bool {return self._source != nil}
      /// Clears the value of `source`. Subsequent reads from it will return its default value.
      mutating func clearSource() {self._source = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Identifies a device's browser or similar software component, and the
      /// user agent's execution platform or operating system.
      struct BrandVersion: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// A brand identifier, for example, "Chrome" or "Windows". The value may
        /// be sourced from the User-Agent Client Hints headers, representing
        /// either the user agent brand (from the Sec-CH-UA-Full-Version header)
        /// or the platform brand (from the Sec-CH-UA-Platform header).
        /// Not supported by Google.
        var brand: String {
          get {return _brand ?? String()}
          set {_brand = newValue}
        }
        /// Returns true if `brand` has been explicitly set.
        var hasBrand: Bool {return self._brand != nil}
        /// Clears the value of `brand`. Subsequent reads from it will return its default value.
        mutating func clearBrand() {self._brand = nil}

        /// A sequence of version components, in descending hierarchical order
        /// (major, minor, micro, ...).
        /// Not supported by Google.
        var version: [String] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _brand: String? = nil
      }

      init() {}

      fileprivate var _platform: Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion? = nil
      fileprivate var _mobile: Bool? = nil
      fileprivate var _architecture: String? = nil
      fileprivate var _bitness: String? = nil
      fileprivate var _model: String? = nil
      fileprivate var _source: Com_Google_Openrtb_UserAgentSource? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.2: This object contains any legal, governmental, or industry
  /// regulations that apply to the request. The coppa field signals whether
  /// or not the request falls under the United States Federal Trade Commission's
  /// regulations for the United States Children's Online Privacy Protection Act
  /// ("COPPA"). Refer to Section 7.1 for more information.
  struct Regs: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Indicates if this request is subject to the COPPA regulations
    /// established by the USA FTC.
    /// Not supported by Google.
    var coppa: Bool {
      get {return _coppa ?? false}
      set {_coppa = newValue}
    }
    /// Returns true if `coppa` has been explicitly set.
    var hasCoppa: Bool {return self._coppa != nil}
    /// Clears the value of `coppa`. Subsequent reads from it will return its default value.
    mutating func clearCoppa() {self._coppa = nil}

    /// Contains the Global Privacy Platform's consent string. See the Global
    /// Privacy Platform specification for more details:
    /// https://github.com/InteractiveAdvertisingBureau/Global-Privacy-Platform
    /// Not supported by Google.
    var gpp: String {
      get {return _gpp ?? String()}
      set {_gpp = newValue}
    }
    /// Returns true if `gpp` has been explicitly set.
    var hasGpp: Bool {return self._gpp != nil}
    /// Clears the value of `gpp`. Subsequent reads from it will return its default value.
    mutating func clearGpp() {self._gpp = nil}

    /// Array of the section(s) of the string which should be applied for this
    /// transaction. Generally will contain one and only one value, but there are
    /// edge cases where more than one may apply. GPP Section 3 (Header) and 4
    /// (Signal Integrity) do not need to be included. See enum GppSectionId.
    /// Not supported by Google.
    var gppSid: [Com_Google_Openrtb_BidRequest.Regs.GppSectionId] = []

    var ext: String {
      get {return _ext ?? String()}
      set {_ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return self._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {self._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Each section represents a unique privacy signal, usually a unique
    /// jurisdiction. Below are the supported discrete sections.
    enum GppSectionId: SwiftProtobuf.Enum, Swift.CaseIterable {
      typealias RawValue = Int

      /// EU TCF v1 section (deprecated)
      case tcfeuv1 // = 1

      /// EU TCF v2 section (see note below)
      case tcfeuv2 // = 2

      /// GPP Header section (REQUIRED, see note below)
      case gppHeader // = 3

      /// GPP signal integrity section
      case gppSignal // = 4

      /// Canadian TCF section
      case tcfca // = 5

      /// USPrivacy String (Unencoded Format)
      case uspv1 // = 6

      /// US - national section
      case usnat // = 7

      /// US - California section
      case usca // = 8

      /// US - Virginia section
      case usva // = 9

      /// US - Colorado section
      case usco // = 10

      /// US - Utah section
      case usut // = 11

      /// US - Connecticut section
      case usct // = 12

      init() {
        self = .tcfeuv1
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 1: self = .tcfeuv1
        case 2: self = .tcfeuv2
        case 3: self = .gppHeader
        case 4: self = .gppSignal
        case 5: self = .tcfca
        case 6: self = .uspv1
        case 7: self = .usnat
        case 8: self = .usca
        case 9: self = .usva
        case 10: self = .usco
        case 11: self = .usut
        case 12: self = .usct
        default: return nil
        }
      }

      var rawValue: Int {
        switch self {
        case .tcfeuv1: return 1
        case .tcfeuv2: return 2
        case .gppHeader: return 3
        case .gppSignal: return 4
        case .tcfca: return 5
        case .uspv1: return 6
        case .usnat: return 7
        case .usca: return 8
        case .usva: return 9
        case .usco: return 10
        case .usut: return 11
        case .usct: return 12
        }
      }

    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _coppa: Bool? = nil
    fileprivate var _gpp: String? = nil
    fileprivate var _ext: String? = nil
  }

  /// OpenRTB 2.0: The data and segment objects together allow additional data
  /// about the user to be specified. This data may be from multiple sources
  /// whether from the exchange itself or third party providers as specified by
  /// the id field. A bid request can mix data objects from multiple providers or
  /// can have multiple data objects. The specific data providers in use should
  /// be published by the exchange a priori to its bidders.
  ///
  /// Google: This is used to send Publisher Provided Signals and Topics to
  /// bidders.
  struct DataMessage: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The Google assigned ID of the data provider. Only set for Data segments
    /// from Publisher Provided Signals. For the list of data providers, see
    /// https://storage.googleapis.com/adx-rtb-dictionaries/data_providers.txt.
    /// Supported by Google.
    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    /// Exchange-specific name for the data provider.
    /// Not supported by Google.
    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    /// Array of Segment (Section 3.2.15) objects that contain the actual
    /// data values.
    /// Supported by Google.
    var segment: [Com_Google_Openrtb_BidRequest.DataMessage.Segment] = []

    var ext: String {
      get {return _ext ?? String()}
      set {_ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return self._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {self._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// OpenRTB 2.0: Segment objects are essentially key-value pairs that
    /// convey specific units of data about the user. The parent Data object
    /// is a collection of such values from a given data provider.
    /// The specific segment names and value options must be published by the
    /// exchange a priori to its bidders.
    struct Segment: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// ID of the data segment specific to the data provider.
      /// Supported by Google.
      var id: String {
        get {return _id ?? String()}
        set {_id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return self._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {self._id = nil}

      /// Name of the data segment specific to the data provider.
      /// Not supported by Google.
      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      /// String representation of the data segment value.
      /// Not supported by Google.
      var value: String {
        get {return _value ?? String()}
        set {_value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      var hasValue: Bool {return self._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
      mutating func clearValue() {self._value = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _id: String? = nil
      fileprivate var _name: String? = nil
      fileprivate var _value: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _id: String? = nil
    fileprivate var _name: String? = nil
    fileprivate var _ext: String? = nil
  }

  /// OpenRTB 2.0: This object contains information known or derived about
  /// the human user of the device (for example, the audience for advertising).
  /// The user id is an exchange artifact and may be subject to rotation or other
  /// privacy policies. However, this user ID must be stable long enough to serve
  /// reasonably as the basis for frequency capping and retargeting.
  struct User: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Exchange-specific ID for the user. At least one of id or buyeruid
    /// is recommended.
    /// Supported by Google.
    var id: String {
      get {return _storage._id ?? String()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// Buyer-specific ID for the user as mapped by the exchange for the buyer.
    /// At least one of buyeruid or id is recommended.
    /// Supported by Google. Populated with hosted match data.
    var buyeruid: String {
      get {return _storage._buyeruid ?? String()}
      set {_uniqueStorage()._buyeruid = newValue}
    }
    /// Returns true if `buyeruid` has been explicitly set.
    var hasBuyeruid: Bool {return _storage._buyeruid != nil}
    /// Clears the value of `buyeruid`. Subsequent reads from it will return its default value.
    mutating func clearBuyeruid() {_uniqueStorage()._buyeruid = nil}

    /// DEPRECATED in OpenRTB 2.6+; no replacement.
    /// Year of birth as a 4-digit integer.
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var yob: Int32 {
      get {return _storage._yob ?? 0}
      set {_uniqueStorage()._yob = newValue}
    }
    /// Returns true if `yob` has been explicitly set.
    var hasYob: Bool {return _storage._yob != nil}
    /// Clears the value of `yob`. Subsequent reads from it will return its default value.
    mutating func clearYob() {_uniqueStorage()._yob = nil}

    /// DEPRECATED in OpenRTB 2.6+; no replacement.
    /// Gender as "M" male, "F" female, "O" Other. (Null indicates unknown)
    /// Not supported by Google.
    ///
    /// NOTE: This field was marked as deprecated in the .proto file.
    var gender: String {
      get {return _storage._gender ?? String()}
      set {_uniqueStorage()._gender = newValue}
    }
    /// Returns true if `gender` has been explicitly set.
    var hasGender: Bool {return _storage._gender != nil}
    /// Clears the value of `gender`. Subsequent reads from it will return its default value.
    mutating func clearGender() {_uniqueStorage()._gender = nil}

    /// Comma separated list of keywords, interests, or intent.
    /// Only one of 'keywords' or 'kwarray' may be present.
    /// Not supported by Google.
    var keywords: String {
      get {return _storage._keywords ?? String()}
      set {_uniqueStorage()._keywords = newValue}
    }
    /// Returns true if `keywords` has been explicitly set.
    var hasKeywords: Bool {return _storage._keywords != nil}
    /// Clears the value of `keywords`. Subsequent reads from it will return its default value.
    mutating func clearKeywords() {_uniqueStorage()._keywords = nil}

    /// Array of keywords about the user.
    /// Only one of 'keywords' or 'kwarray' may be present.
    /// Not supported by Google.
    var kwarray: [String] {
      get {return _storage._kwarray}
      set {_uniqueStorage()._kwarray = newValue}
    }

    /// Optional feature to pass bidder data set in the exchange's cookie.
    /// The string must be in base85 cookie safe characters and be in any format.
    /// Proper JSON encoding must be used to include "escaped" quotation marks.
    /// Supported by Google. Populated with hosted match data.
    var customdata: String {
      get {return _storage._customdata ?? String()}
      set {_uniqueStorage()._customdata = newValue}
    }
    /// Returns true if `customdata` has been explicitly set.
    var hasCustomdata: Bool {return _storage._customdata != nil}
    /// Clears the value of `customdata`. Subsequent reads from it will return its default value.
    mutating func clearCustomdata() {_uniqueStorage()._customdata = nil}

    /// Location of the user's home base defined by a Geo object
    /// (Section 3.2.12). This is not necessarily their current location.
    /// Not supported by Google.
    var geo: Com_Google_Openrtb_BidRequest.Geo {
      get {return _storage._geo ?? Com_Google_Openrtb_BidRequest.Geo()}
      set {_uniqueStorage()._geo = newValue}
    }
    /// Returns true if `geo` has been explicitly set.
    var hasGeo: Bool {return _storage._geo != nil}
    /// Clears the value of `geo`. Subsequent reads from it will return its default value.
    mutating func clearGeo() {_uniqueStorage()._geo = nil}

    /// Additional user data. Each Data object (Section 3.2.14) represents a
    /// different data source.
    /// Supported by Google.
    /// Used for Chrome Topics API and for Publisher Provided Signals:
    /// https://developers.google.com/authorized-buyers/rtb/topics
    /// https://support.google.com/admanager/answer/12451124
    var data: [Com_Google_Openrtb_BidRequest.DataMessage] {
      get {return _storage._data}
      set {_uniqueStorage()._data = newValue}
    }

    /// The web-safe base64-encoded IAB Transparency and Consent Framework (TCF)
    /// v2 consent string fetched from the publisher's IAB Consent Management
    /// Platform (CMP). The structure of the string is defined by the IAB TCF v2.
    /// This field will be populated if the publisher has integrated with a CMP
    /// for TCF v2 and that CMP indicates that GDPR applies to this ad request
    /// and provides a valid consent string. See
    /// https://support.google.com/authorizedbuyers/answer/9789378 for additional
    /// information about the Google TCF v2 integration.
    ///
    /// See the IAB Global Vendor List at
    /// https://vendor-list.consensu.org/v2/vendor-list.json for details about
    /// the vendors listed in the consent string.
    /// Not supported by Google. Google supports the IAB TCFv2 consent string
    /// with the extension BidRequest.user.ext.consent.
    var consent: String {
      get {return _storage._consent ?? String()}
      set {_uniqueStorage()._consent = newValue}
    }
    /// Returns true if `consent` has been explicitly set.
    var hasConsent: Bool {return _storage._consent != nil}
    /// Clears the value of `consent`. Subsequent reads from it will return its default value.
    mutating func clearConsent() {_uniqueStorage()._consent = nil}

    /// Data made available by the publisher, such as publisher-provided
    /// identifiers.
    /// Supported by Google. For Secure Signals, see extension
    /// BidRequest.user.ext.eids.
    var eids: [Com_Google_Openrtb_BidRequest.User.EID] {
      get {return _storage._eids}
      set {_uniqueStorage()._eids = newValue}
    }

    var ext: String {
      get {return _storage._ext ?? String()}
      set {_uniqueStorage()._ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return _storage._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {_uniqueStorage()._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Extended data, such as a publisher-provided identifier, that allows
    /// buyers to use data made available by the publisher in real-time bidding.
    /// This object can contain one or more UIDs from a single source or a
    /// technology provider.
    struct EID: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Source or technology provider responsible for the set of included data.
      /// Supported by Google.
      var source: String {
        get {return _source ?? String()}
        set {_source = newValue}
      }
      /// Returns true if `source` has been explicitly set.
      var hasSource: Bool {return self._source != nil}
      /// Clears the value of `source`. Subsequent reads from it will return its default value.
      mutating func clearSource() {self._source = nil}

      /// Array of extended ID UID objects from the given source.
      /// Supported by Google.
      var uids: [Com_Google_Openrtb_BidRequest.User.EID.UID] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// This object contains a single data item, such as a publisher-provided
      /// identifier, provided as part of extended identifiers.
      struct UID: SwiftProtobuf.ExtensibleMessage, Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// The data value, such as a publisher-provided identifier.
        /// Supported by Google.
        var id: String {
          get {return _id ?? String()}
          set {_id = newValue}
        }
        /// Returns true if `id` has been explicitly set.
        var hasID: Bool {return self._id != nil}
        /// Clears the value of `id`. Subsequent reads from it will return its default value.
        mutating func clearID() {self._id = nil}

        /// Type of user agent the ID is from.
        /// Not supported by Google.
        var atype: Com_Google_Openrtb_AgentType {
          get {return _atype ?? .browserOrDevice}
          set {_atype = newValue}
        }
        /// Returns true if `atype` has been explicitly set.
        var hasAtype: Bool {return self._atype != nil}
        /// Clears the value of `atype`. Subsequent reads from it will return its default value.
        mutating func clearAtype() {self._atype = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
        fileprivate var _id: String? = nil
        fileprivate var _atype: Com_Google_Openrtb_AgentType? = nil
      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _source: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// OpenRTB 2.5: This object describes the nature and behavior of the entity
  /// that is the source of the bid request upstream from the exchange.
  /// The primary purpose of this object is to define post-auction or upstream
  /// decisioning when the exchange itself does not control the final decision.
  /// A common example of this is header bidding, but it can also apply to
  /// upstream server entities such as another RTB exchange, a mediation
  /// platform, or an ad server combines direct campaigns with 3rd party
  /// demand in decisioning.
  struct Source: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Entity responsible for the final impression sale decision,
    /// where false = exchange, true = upstream source
    /// Not supported by Google.
    var fd: Bool {
      get {return _fd ?? false}
      set {_fd = newValue}
    }
    /// Returns true if `fd` has been explicitly set.
    var hasFd: Bool {return self._fd != nil}
    /// Clears the value of `fd`. Subsequent reads from it will return its default value.
    mutating func clearFd() {self._fd = nil}

    /// Transaction ID that must be common across all participants in
    /// this bid request (for example, potentially multiple exchanges).
    /// Not supported by Google.
    var tid: String {
      get {return _tid ?? String()}
      set {_tid = newValue}
    }
    /// Returns true if `tid` has been explicitly set.
    var hasTid: Bool {return self._tid != nil}
    /// Clears the value of `tid`. Subsequent reads from it will return its default value.
    mutating func clearTid() {self._tid = nil}

    /// Payment ID chain string containing embedded syntax
    /// described in the TAG Payment ID Protocol v1.0.
    /// Not supported by Google.
    var pchain: String {
      get {return _pchain ?? String()}
      set {_pchain = newValue}
    }
    /// Returns true if `pchain` has been explicitly set.
    var hasPchain: Bool {return self._pchain != nil}
    /// Clears the value of `pchain`. Subsequent reads from it will return its default value.
    mutating func clearPchain() {self._pchain = nil}

    /// This object represents both the links in the supply chain as
    /// well as an indicator whether or not the supply chain is complete.
    /// Supported by Google.
    var schain: Com_Google_Openrtb_BidRequest.Source.SupplyChain {
      get {return _schain ?? Com_Google_Openrtb_BidRequest.Source.SupplyChain()}
      set {_schain = newValue}
    }
    /// Returns true if `schain` has been explicitly set.
    var hasSchain: Bool {return self._schain != nil}
    /// Clears the value of `schain`. Subsequent reads from it will return its default value.
    mutating func clearSchain() {self._schain = nil}

    var ext: String {
      get {return _ext ?? String()}
      set {_ext = newValue}
    }
    /// Returns true if `ext` has been explicitly set.
    var hasExt: Bool {return self._ext != nil}
    /// Clears the value of `ext`. Subsequent reads from it will return its default value.
    mutating func clearExt() {self._ext = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// This object is composed of a set of nodes where each node represents a
    /// specific entity that participates in the transacting of inventory.
    /// The entire chain of nodes from beginning to end represents all entities
    /// who are involved in the direct flow of payment for inventory. Detailed
    /// implementation examples can be found here:
    /// https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/supplychainobject.md
    struct SupplyChain: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Indicates whether the chain contains all nodes involved in the
      /// transaction leading back to the owner of the site, app or other medium
      /// of the inventory.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var complete: Bool {
        get {return _complete ?? false}
        set {_complete = newValue}
      }
      /// Returns true if `complete` has been explicitly set.
      var hasComplete: Bool {return self._complete != nil}
      /// Clears the value of `complete`. Subsequent reads from it will return its default value.
      mutating func clearComplete() {self._complete = nil}

      /// Array of SupplyChainNode objects in the order of the chain.
      /// In a complete supply chain, the first node represents the initial
      /// advertising system and seller ID involved in the transaction, that is,
      /// the owner of the site, app, or other medium. In an incomplete
      /// supply chain, it represents the first known node. The last node
      /// represents the entity sending this bid request.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var nodes: [Com_Google_Openrtb_BidRequest.Source.SupplyChain.SupplyChainNode] = []

      /// Version of the supply chain specification in use, in the format
      /// of "major.minor". For example, for version 1.0 of the spec,
      /// use the string "1.0".
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var ver: String {
        get {return _ver ?? String()}
        set {_ver = newValue}
      }
      /// Returns true if `ver` has been explicitly set.
      var hasVer: Bool {return self._ver != nil}
      /// Clears the value of `ver`. Subsequent reads from it will return its default value.
      mutating func clearVer() {self._ver = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      /// The identity of an entity participating in the supply chain.
      struct SupplyChainNode: SwiftProtobuf.ExtensibleMessage, Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// The canonical domain name of the SSP, Exchange, Header Wrapper, etc
        /// system that bidders connect to. This may be the operational domain of
        /// the system, if that is different than the parent corporate domain, to
        /// facilitate WHOIS and reverse IP lookups to establish clear ownership
        /// of the delegate system. This should be the same value as used to
        /// identify sellers in an ads.txt file if one exists.
        /// REQUIRED by the OpenRTB specification.
        /// Supported by Google.
        var asi: String {
          get {return _asi ?? String()}
          set {_asi = newValue}
        }
        /// Returns true if `asi` has been explicitly set.
        var hasAsi: Bool {return self._asi != nil}
        /// Clears the value of `asi`. Subsequent reads from it will return its default value.
        mutating func clearAsi() {self._asi = nil}

        /// The identifier associated with the seller or reseller account
        /// within the advertising system. This must contain the same value
        /// used in transactions (OpenRTB bid requests) in the field
        /// specified by the SSP/exchange. Typically, in OpenRTB, this is
        /// publisher.id. For OpenDirect it is typically the publisher's
        /// organization ID. Should be limited to 64 characters in length.
        /// REQUIRED by the OpenRTB specification.
        /// Supported by Google.
        var sid: String {
          get {return _sid ?? String()}
          set {_sid = newValue}
        }
        /// Returns true if `sid` has been explicitly set.
        var hasSid: Bool {return self._sid != nil}
        /// Clears the value of `sid`. Subsequent reads from it will return its default value.
        mutating func clearSid() {self._sid = nil}

        /// The OpenRTB RequestId of the request as issued by this seller.
        /// Not supported by Google.
        var rid: String {
          get {return _rid ?? String()}
          set {_rid = newValue}
        }
        /// Returns true if `rid` has been explicitly set.
        var hasRid: Bool {return self._rid != nil}
        /// Clears the value of `rid`. Subsequent reads from it will return its default value.
        mutating func clearRid() {self._rid = nil}

        /// The name of the company (the legal entity) that has paid for
        /// inventory transacted under the given seller_ID. This value is
        /// optional and should NOT be included if it exists in the
        /// advertising system’s sellers.json file.
        /// Not supported by Google.
        var name: String {
          get {return _name ?? String()}
          set {_name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        var hasName: Bool {return self._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        mutating func clearName() {self._name = nil}

        /// The business domain name of the entity represented by this
        /// node. This value is optional and should NOT be included if it
        /// exists in the advertising system’s sellers.json file.
        /// Not supported by Google.
        var domain: String {
          get {return _domain ?? String()}
          set {_domain = newValue}
        }
        /// Returns true if `domain` has been explicitly set.
        var hasDomain: Bool {return self._domain != nil}
        /// Clears the value of `domain`. Subsequent reads from it will return its default value.
        mutating func clearDomain() {self._domain = nil}

        /// Indicates whether this node will be involved in the flow of payment
        /// for the inventory. When set to true, the advertising system in the
        /// asi field pays the seller in the sid field, who is responsible for
        /// paying the previous node in the chain. When set to false, this node
        /// is not involved in the flow of payment for the inventory.
        /// For version 1.0 of SupplyChain, this property should always be true.
        /// Implementers should ensure that they propagate this field onwards
        /// when constructing SupplyChain objects in bid requests sent to a
        /// downstream advertising system.
        /// Supported by Google.
        var hp: Bool {
          get {return _hp ?? false}
          set {_hp = newValue}
        }
        /// Returns true if `hp` has been explicitly set.
        var hasHp: Bool {return self._hp != nil}
        /// Clears the value of `hp`. Subsequent reads from it will return its default value.
        mutating func clearHp() {self._hp = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
        fileprivate var _asi: String? = nil
        fileprivate var _sid: String? = nil
        fileprivate var _rid: String? = nil
        fileprivate var _name: String? = nil
        fileprivate var _domain: String? = nil
        fileprivate var _hp: Bool? = nil
      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _complete: Bool? = nil
      fileprivate var _ver: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _fd: Bool? = nil
    fileprivate var _tid: String? = nil
    fileprivate var _pchain: String? = nil
    fileprivate var _schain: Com_Google_Openrtb_BidRequest.Source.SupplyChain? = nil
    fileprivate var _ext: String? = nil
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

/// OpenRTB 2.0: This object is the top-level bid response object (for example,
/// the unnamed outer JSON object). The id attribute is a reflection of the bid
/// request ID for logging purposes. Similarly, bidid is an optional response
/// tracking ID for bidders. If specified, it can be included in the subsequent
/// win notice call if the bidder wins. At least one seatbid object is required,
/// which contains at least one bid for an impression. Other attributes are
/// optional. To express a "no-bid", the options are to return an empty response
/// with HTTP 204. Alternately if the bidder wants to convey to the exchange a
/// reason for not bidding, just a BidResponse object is returned with a
/// reason code in the nbr attribute.
struct Com_Google_Openrtb_BidResponse: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the bid request to which this is a response.
  /// REQUIRED by the OpenRTB specification.
  /// Supported by Google.
  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  /// Array of seatbid objects; 1+ required if a bid is to be made.
  /// Supported by Google.
  var seatbid: [Com_Google_Openrtb_BidResponse.SeatBid] = []

  /// Bidder generated response ID to assist with logging/tracking.
  /// Supported by Google.
  var bidid: String {
    get {return _bidid ?? String()}
    set {_bidid = newValue}
  }
  /// Returns true if `bidid` has been explicitly set.
  var hasBidid: Bool {return self._bidid != nil}
  /// Clears the value of `bidid`. Subsequent reads from it will return its default value.
  mutating func clearBidid() {self._bidid = nil}

  /// Bid currency using ISO-4217 alpha codes.
  ///
  /// Supported by Google. If this field is populated, the specified currency
  /// will be used to interpret the bid. Otherwise, the default bidding currency
  /// will be used, which is determined in the following priority:
  /// 1. The bidder-level currency, if configured in RTB account settings.
  /// 2. The buyer-level currency. The buyer will be determined by the billing
  /// ID specified in the BidResponse.seatbid.bid.ext.billing_id extension
  /// field if it is populated, otherwise it will be based on the sole billing
  /// ID sent in the bid request.
  ///
  /// The currency of a buyer account is set on account creation and can be
  /// checked by contacting a Technical Account Manager.
  var cur: String {
    get {return _cur ?? String()}
    set {_cur = newValue}
  }
  /// Returns true if `cur` has been explicitly set.
  var hasCur: Bool {return self._cur != nil}
  /// Clears the value of `cur`. Subsequent reads from it will return its default value.
  mutating func clearCur() {self._cur = nil}

  /// Optional feature to allow a bidder to set data in the exchange's cookie.
  /// The string must be in base85 cookie safe characters and be in any format.
  /// Proper JSON encoding must be used to include "escaped" quotation marks.
  /// Ignored by Google.
  var customdata: String {
    get {return _customdata ?? String()}
    set {_customdata = newValue}
  }
  /// Returns true if `customdata` has been explicitly set.
  var hasCustomdata: Bool {return self._customdata != nil}
  /// Clears the value of `customdata`. Subsequent reads from it will return its default value.
  mutating func clearCustomdata() {self._customdata = nil}

  /// Reason for not bidding.
  /// Supported by Google.
  var nbr: Com_Google_Openrtb_NoBidReason {
    get {return _nbr ?? .unknownError}
    set {_nbr = newValue}
  }
  /// Returns true if `nbr` has been explicitly set.
  var hasNbr: Bool {return self._nbr != nil}
  /// Clears the value of `nbr`. Subsequent reads from it will return its default value.
  mutating func clearNbr() {self._nbr = nil}

  var ext: String {
    get {return _ext ?? String()}
    set {_ext = newValue}
  }
  /// Returns true if `ext` has been explicitly set.
  var hasExt: Bool {return self._ext != nil}
  /// Clears the value of `ext`. Subsequent reads from it will return its default value.
  mutating func clearExt() {self._ext = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// OpenRTB 2.0: A bid response can contain multiple SeatBid objects, each on
  /// behalf of a different bidder seat and each containing one or more
  /// individual bids. If multiple impressions are presented in the request, the
  /// group attribute can be used to specify if a seat is willing to accept any
  /// impressions that it can win (default) or if it is only interested in
  /// winning any if it can win them all as a group.
  struct SeatBid: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Array of 1+ Bid objects (Section 4.2.3) each related to an impression.
    /// Multiple bids can relate to the same impression.
    /// Supported by Google.
    var bid: [Com_Google_Openrtb_BidResponse.SeatBid.Bid] = []

    /// ID of the buyer seat (for example, advertiser, agency) on whose behalf
    /// this bid is made.
    ///
    /// This ID will be used to breakdown spend and invalid traffic metrics in
    /// IVT transparency reporting, given that it is no longer than 64 bytes.
    /// Supported by Google.
    var seat: String {
      get {return _seat ?? String()}
      set {_seat = newValue}
    }
    /// Returns true if `seat` has been explicitly set.
    var hasSeat: Bool {return self._seat != nil}
    /// Clears the value of `seat`. Subsequent reads from it will return its default value.
    mutating func clearSeat() {self._seat = nil}

    /// false = impressions can be won individually;
    /// true = impressions must be won or lost as a group.
    /// Ignored by Google.
    var group: Bool {
      get {return _group ?? false}
      set {_group = newValue}
    }
    /// Returns true if `group` has been explicitly set.
    var hasGroup: Bool {return self._group != nil}
    /// Clears the value of `group`. Subsequent reads from it will return its default value.
    mutating func clearGroup() {self._group = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// OpenRTB 2.0: A SeatBid object contains one or more Bid objects,
    /// each of which relates to a specific impression in the bid request
    /// through the impid attribute and constitutes an offer to buy that
    /// impression for a given price.
    struct Bid: SwiftProtobuf.ExtensibleMessage, @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var admOneof: OneOf_AdmOneof? {
        get {return _storage._admOneof}
        set {_uniqueStorage()._admOneof = newValue}
      }

      /// Optional means of conveying ad markup in case the bid wins;
      /// supersedes the win notice if markup is included in both.
      /// For native ad bids, exactly one of {adm, adm_native} should be used.
      /// Supported by Google. Standard field, should be used for OpenRTB/JSON.
      var adm: String {
        get {
          if case .adm(let v)? = _storage._admOneof {return v}
          return String()
        }
        set {_uniqueStorage()._admOneof = .adm(newValue)}
      }

      /// Native ad response.
      /// For native ad bids, exactly one of {adm, adm_native} should be used.
      /// Supported by Google. Extension, should be used for OpenRTB/Protobuf.
      var admNative: Com_Google_Openrtb_NativeResponse {
        get {
          if case .admNative(let v)? = _storage._admOneof {return v}
          return Com_Google_Openrtb_NativeResponse()
        }
        set {_uniqueStorage()._admOneof = .admNative(newValue)}
      }

      /// Bidder generated bid ID to assist with logging/tracking.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var id: String {
        get {return _storage._id ?? String()}
        set {_uniqueStorage()._id = newValue}
      }
      /// Returns true if `id` has been explicitly set.
      var hasID: Bool {return _storage._id != nil}
      /// Clears the value of `id`. Subsequent reads from it will return its default value.
      mutating func clearID() {_uniqueStorage()._id = nil}

      /// ID of the Imp object in the related bid request.
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var impid: String {
        get {return _storage._impid ?? String()}
        set {_uniqueStorage()._impid = newValue}
      }
      /// Returns true if `impid` has been explicitly set.
      var hasImpid: Bool {return _storage._impid != nil}
      /// Clears the value of `impid`. Subsequent reads from it will return its default value.
      mutating func clearImpid() {_uniqueStorage()._impid = nil}

      /// Bid price expressed as CPM although the actual transaction is for a
      /// unit impression only. Note that while the type indicates float, integer
      /// math is highly recommended when handling currencies
      /// (for example, BigDecimal in Java).
      /// REQUIRED by the OpenRTB specification.
      /// Supported by Google.
      var price: Double {
        get {return _storage._price ?? 0}
        set {_uniqueStorage()._price = newValue}
      }
      /// Returns true if `price` has been explicitly set.
      var hasPrice: Bool {return _storage._price != nil}
      /// Clears the value of `price`. Subsequent reads from it will return its default value.
      mutating func clearPrice() {_uniqueStorage()._price = nil}

      /// Win notice URL called by the exchange if the bid wins; optional means
      /// of serving ad markup.
      /// Ignored by Google.
      var nurl: String {
        get {return _storage._nurl ?? String()}
        set {_uniqueStorage()._nurl = newValue}
      }
      /// Returns true if `nurl` has been explicitly set.
      var hasNurl: Bool {return _storage._nurl != nil}
      /// Clears the value of `nurl`. Subsequent reads from it will return its default value.
      mutating func clearNurl() {_uniqueStorage()._nurl = nil}

      /// Billing notice URL called by the exchange when a winning bid
      /// becomes billable based on exchange-specific business policy
      /// (for example, delivered or viewed).
      /// Substitution macros (Section 4.4) may be included.
      /// Supported by Google.
      var burl: String {
        get {return _storage._burl ?? String()}
        set {_uniqueStorage()._burl = newValue}
      }
      /// Returns true if `burl` has been explicitly set.
      var hasBurl: Bool {return _storage._burl != nil}
      /// Clears the value of `burl`. Subsequent reads from it will return its default value.
      mutating func clearBurl() {_uniqueStorage()._burl = nil}

      /// Loss notice URL called by the exchange when a bid is known to
      /// have been lost. Substitution macros (Section 4.4) may be
      /// included. Exchange-specific policy may preclude support for
      /// loss notices or the disclosure of winning clearing prices
      /// resulting in ${AUCTION_PRICE} macros being removed (meaning,
      /// replaced with a zero-length string).
      /// Ignored by Google.
      var lurl: String {
        get {return _storage._lurl ?? String()}
        set {_uniqueStorage()._lurl = newValue}
      }
      /// Returns true if `lurl` has been explicitly set.
      var hasLurl: Bool {return _storage._lurl != nil}
      /// Clears the value of `lurl`. Subsequent reads from it will return its default value.
      mutating func clearLurl() {_uniqueStorage()._lurl = nil}

      /// ID of a preloaded ad to serve if the bid wins.
      /// Ignored by Google.
      var adid: String {
        get {return _storage._adid ?? String()}
        set {_uniqueStorage()._adid = newValue}
      }
      /// Returns true if `adid` has been explicitly set.
      var hasAdid: Bool {return _storage._adid != nil}
      /// Clears the value of `adid`. Subsequent reads from it will return its default value.
      mutating func clearAdid() {_uniqueStorage()._adid = nil}

      /// Advertiser domain for block list checking (for example, "ford.com").
      /// This can be an array of for the case of rotating creatives. Exchanges
      /// can mandate that only one domain is allowed.
      /// Supported by Google.
      var adomain: [String] {
        get {return _storage._adomain}
        set {_uniqueStorage()._adomain = newValue}
      }

      /// The store ID of the app in an app store such as Apple App Store, Google
      /// Play. See OTT/CTV Store Assigned App Identification Guidelines for
      /// more details about expected strings for CTV app stores. For mobile apps
      /// in Google Play Store, these should be bundle or package names, such as
      /// com.foo.mygame. For apps in Apple App Store, these should be a numeric
      /// ID.
      ///
      /// Google: In addition to this field, set bid.ext.app_promotion_type field
      /// to take advantage of features specific to app promotion types.
      /// Supported by Google.
      var bundle: String {
        get {return _storage._bundle ?? String()}
        set {_uniqueStorage()._bundle = newValue}
      }
      /// Returns true if `bundle` has been explicitly set.
      var hasBundle: Bool {return _storage._bundle != nil}
      /// Clears the value of `bundle`. Subsequent reads from it will return its default value.
      mutating func clearBundle() {_uniqueStorage()._bundle = nil}

      /// URL without cache-busting to an image that is representative of the
      /// content of the campaign for ad quality/safety checking.
      /// Ignored by Google.
      var iurl: String {
        get {return _storage._iurl ?? String()}
        set {_uniqueStorage()._iurl = newValue}
      }
      /// Returns true if `iurl` has been explicitly set.
      var hasIurl: Bool {return _storage._iurl != nil}
      /// Clears the value of `iurl`. Subsequent reads from it will return its default value.
      mutating func clearIurl() {_uniqueStorage()._iurl = nil}

      /// Campaign ID to assist with ad quality checking; the collection of
      /// creatives for which iurl should be representative.
      /// Ignored by Google.
      var cid: String {
        get {return _storage._cid ?? String()}
        set {_uniqueStorage()._cid = newValue}
      }
      /// Returns true if `cid` has been explicitly set.
      var hasCid: Bool {return _storage._cid != nil}
      /// Clears the value of `cid`. Subsequent reads from it will return its default value.
      mutating func clearCid() {_uniqueStorage()._cid = nil}

      /// Creative ID to assist with ad quality checking.
      /// Supported by Google.
      var crid: String {
        get {return _storage._crid ?? String()}
        set {_uniqueStorage()._crid = newValue}
      }
      /// Returns true if `crid` has been explicitly set.
      var hasCrid: Bool {return _storage._crid != nil}
      /// Clears the value of `crid`. Subsequent reads from it will return its default value.
      mutating func clearCrid() {_uniqueStorage()._crid = nil}

      /// Tactic ID to enable buyers to label bids for reporting to the
      /// exchange the tactic through which their bid was submitted.
      /// The specific usage and meaning of the tactic ID should be
      /// communicated between buyer and exchanges a priori.
      /// Ignored by Google.
      var tactic: String {
        get {return _storage._tactic ?? String()}
        set {_uniqueStorage()._tactic = newValue}
      }
      /// Returns true if `tactic` has been explicitly set.
      var hasTactic: Bool {return _storage._tactic != nil}
      /// Clears the value of `tactic`. Subsequent reads from it will return its default value.
      mutating func clearTactic() {_uniqueStorage()._tactic = nil}

      /// The taxonomy in use for cat.
      /// Ignored by Google.
      var cattax: Com_Google_Openrtb_CategoryTaxonomy {
        get {return _storage._cattax ?? .iabContent10}
        set {_uniqueStorage()._cattax = newValue}
      }
      /// Returns true if `cattax` has been explicitly set.
      var hasCattax: Bool {return _storage._cattax != nil}
      /// Clears the value of `cattax`. Subsequent reads from it will return its default value.
      mutating func clearCattax() {_uniqueStorage()._cattax = nil}

      /// IAB content categories of the creative.
      /// The taxonomy to be used is defined by the cattax field.
      /// Supported by Google.
      var cat: [String] {
        get {return _storage._cat}
        set {_uniqueStorage()._cat = newValue}
      }

      /// Set of attributes describing the creative.
      /// Supported by Google.
      var attr: [Com_Google_Openrtb_CreativeAttribute] {
        get {return _storage._attr}
        set {_uniqueStorage()._attr = newValue}
      }

      /// List of supported APIs for the markup. If an API is not explicitly
      /// listed, it is assumed to be unsupported.
      /// Ignored by Google.
      var apis: [Com_Google_Openrtb_APIFramework] {
        get {return _storage._apis}
        set {_uniqueStorage()._apis = newValue}
      }

      /// DEPRECATED in OpenRTB 2.6+; prefer the field apis.
      /// API required by the markup if applicable.
      /// Supported by Google.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var api: Com_Google_Openrtb_APIFramework {
        get {return _storage._api ?? .vpaid1}
        set {_uniqueStorage()._api = newValue}
      }
      /// Returns true if `api` has been explicitly set.
      var hasApi: Bool {return _storage._api != nil}
      /// Clears the value of `api`. Subsequent reads from it will return its default value.
      mutating func clearApi() {_uniqueStorage()._api = nil}

      /// Video response protocol of the markup if applicable.
      /// Ignored by Google.
      var `protocol`: Com_Google_Openrtb_Protocol {
        get {return _storage._protocol ?? .vast10}
        set {_uniqueStorage()._protocol = newValue}
      }
      /// Returns true if ``protocol`` has been explicitly set.
      var hasProtocol: Bool {return _storage._protocol != nil}
      /// Clears the value of ``protocol``. Subsequent reads from it will return its default value.
      mutating func clearProtocol() {_uniqueStorage()._protocol = nil}

      /// Creative media rating per QAG guidelines.
      /// Ignored by Google.
      var qagmediarating: Com_Google_Openrtb_QAGMediaRating {
        get {return _storage._qagmediarating ?? .allAudiences}
        set {_uniqueStorage()._qagmediarating = newValue}
      }
      /// Returns true if `qagmediarating` has been explicitly set.
      var hasQagmediarating: Bool {return _storage._qagmediarating != nil}
      /// Clears the value of `qagmediarating`. Subsequent reads from it will return its default value.
      mutating func clearQagmediarating() {_uniqueStorage()._qagmediarating = nil}

      /// Language of the creative using ISO-639-1-alpha-2. The nonstandard
      /// code "xx" may also be used if the creative has no
      /// linguistic content (for example, a banner with just a company logo).
      /// Only one of language or langb should be present.
      /// Ignored by Google.
      var language: String {
        get {return _storage._language ?? String()}
        set {_uniqueStorage()._language = newValue}
      }
      /// Returns true if `language` has been explicitly set.
      var hasLanguage: Bool {return _storage._language != nil}
      /// Clears the value of `language`. Subsequent reads from it will return its default value.
      mutating func clearLanguage() {_uniqueStorage()._language = nil}

      /// Language of the creative using IETF BCP 47.
      /// Only one of language or langb should be present.
      /// Ignored by Google.
      var langb: String {
        get {return _storage._langb ?? String()}
        set {_uniqueStorage()._langb = newValue}
      }
      /// Returns true if `langb` has been explicitly set.
      var hasLangb: Bool {return _storage._langb != nil}
      /// Clears the value of `langb`. Subsequent reads from it will return its default value.
      mutating func clearLangb() {_uniqueStorage()._langb = nil}

      /// Reference to the deal.id from the bid request if this bid pertains to a
      /// private marketplace direct deal.
      /// Supported by Google.
      var dealid: String {
        get {return _storage._dealid ?? String()}
        set {_uniqueStorage()._dealid = newValue}
      }
      /// Returns true if `dealid` has been explicitly set.
      var hasDealid: Bool {return _storage._dealid != nil}
      /// Clears the value of `dealid`. Subsequent reads from it will return its default value.
      mutating func clearDealid() {_uniqueStorage()._dealid = nil}

      /// Width of the creative in device independent pixels (DIPS).
      /// Supported by Google.
      var w: Int32 {
        get {return _storage._w ?? 0}
        set {_uniqueStorage()._w = newValue}
      }
      /// Returns true if `w` has been explicitly set.
      var hasW: Bool {return _storage._w != nil}
      /// Clears the value of `w`. Subsequent reads from it will return its default value.
      mutating func clearW() {_uniqueStorage()._w = nil}

      /// Height of the creative in device independent pixels (DIPS).
      /// Supported by Google.
      var h: Int32 {
        get {return _storage._h ?? 0}
        set {_uniqueStorage()._h = newValue}
      }
      /// Returns true if `h` has been explicitly set.
      var hasH: Bool {return _storage._h != nil}
      /// Clears the value of `h`. Subsequent reads from it will return its default value.
      mutating func clearH() {_uniqueStorage()._h = nil}

      /// Relative width of the creative when expressing size as a ratio.
      /// Required for Flex Ads.
      /// Ignored by Google.
      var wratio: Int32 {
        get {return _storage._wratio ?? 0}
        set {_uniqueStorage()._wratio = newValue}
      }
      /// Returns true if `wratio` has been explicitly set.
      var hasWratio: Bool {return _storage._wratio != nil}
      /// Clears the value of `wratio`. Subsequent reads from it will return its default value.
      mutating func clearWratio() {_uniqueStorage()._wratio = nil}

      /// Relative height of the creative when expressing size as a ratio.
      /// Required for Flex Ads.
      /// Ignored by Google.
      var hratio: Int32 {
        get {return _storage._hratio ?? 0}
        set {_uniqueStorage()._hratio = newValue}
      }
      /// Returns true if `hratio` has been explicitly set.
      var hasHratio: Bool {return _storage._hratio != nil}
      /// Clears the value of `hratio`. Subsequent reads from it will return its default value.
      mutating func clearHratio() {_uniqueStorage()._hratio = nil}

      /// Advisory as to the number of seconds the bidder is willing to
      /// wait between the auction and the actual impression.
      /// Ignored by Google.
      var exp: Int32 {
        get {return _storage._exp ?? 0}
        set {_uniqueStorage()._exp = newValue}
      }
      /// Returns true if `exp` has been explicitly set.
      var hasExp: Bool {return _storage._exp != nil}
      /// Clears the value of `exp`. Subsequent reads from it will return its default value.
      mutating func clearExp() {_uniqueStorage()._exp = nil}

      /// Duration of the video or audio creative in seconds.
      /// Ignored by Google.
      var dur: Int32 {
        get {return _storage._dur ?? 0}
        set {_uniqueStorage()._dur = newValue}
      }
      /// Returns true if `dur` has been explicitly set.
      var hasDur: Bool {return _storage._dur != nil}
      /// Clears the value of `dur`. Subsequent reads from it will return its default value.
      mutating func clearDur() {_uniqueStorage()._dur = nil}

      /// Indicates that the bid is only eligible
      /// for a specific position within the pod.
      /// This field is currently only supported for rewarded video pods
      /// requests.
      var slotinpod: Com_Google_Openrtb_SlotPositionInPod {
        get {return _storage._slotinpod ?? .slotPositionPodAny}
        set {_uniqueStorage()._slotinpod = newValue}
      }
      /// Returns true if `slotinpod` has been explicitly set.
      var hasSlotinpod: Bool {return _storage._slotinpod != nil}
      /// Clears the value of `slotinpod`. Subsequent reads from it will return its default value.
      mutating func clearSlotinpod() {_uniqueStorage()._slotinpod = nil}

      /// Type of the creative markup so that it can properly be
      /// associated with the right sub-object of the BidRequest.Imp.
      /// Ignored by Google.
      var mtype: Com_Google_Openrtb_CreativeMarkupType {
        get {return _storage._mtype ?? .creativeMarkupBanner}
        set {_uniqueStorage()._mtype = newValue}
      }
      /// Returns true if `mtype` has been explicitly set.
      var hasMtype: Bool {return _storage._mtype != nil}
      /// Clears the value of `mtype`. Subsequent reads from it will return its default value.
      mutating func clearMtype() {_uniqueStorage()._mtype = nil}

      /// Extension
      var ext: String {
        get {return _storage._ext ?? String()}
        set {_uniqueStorage()._ext = newValue}
      }
      /// Returns true if `ext` has been explicitly set.
      var hasExt: Bool {return _storage._ext != nil}
      /// Clears the value of `ext`. Subsequent reads from it will return its default value.
      mutating func clearExt() {_uniqueStorage()._ext = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum OneOf_AdmOneof: Equatable, Sendable {
        /// Optional means of conveying ad markup in case the bid wins;
        /// supersedes the win notice if markup is included in both.
        /// For native ad bids, exactly one of {adm, adm_native} should be used.
        /// Supported by Google. Standard field, should be used for OpenRTB/JSON.
        case adm(String)
        /// Native ad response.
        /// For native ad bids, exactly one of {adm, adm_native} should be used.
        /// Supported by Google. Extension, should be used for OpenRTB/Protobuf.
        case admNative(Com_Google_Openrtb_NativeResponse)

        fileprivate var isInitialized: Bool {
          guard case .admNative(let v) = self else {return true}
          return v.isInitialized
        }

      }

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _seat: String? = nil
    fileprivate var _group: Bool? = nil
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _id: String? = nil
  fileprivate var _bidid: String? = nil
  fileprivate var _cur: String? = nil
  fileprivate var _customdata: String? = nil
  fileprivate var _nbr: Com_Google_Openrtb_NoBidReason? = nil
  fileprivate var _ext: String? = nil
}

/// OpenRTB Native 1.0: The Native Object defines the native advertising
/// opportunity available for bid through this bid request. It must be included
/// directly in the impression object if the impression offered for auction
/// is a native ad format.
struct Com_Google_Openrtb_NativeRequest: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the Native Markup version in use.
  var ver: String {
    get {return _ver ?? String()}
    set {_ver = newValue}
  }
  /// Returns true if `ver` has been explicitly set.
  var hasVer: Bool {return self._ver != nil}
  /// Clears the value of `ver`. Subsequent reads from it will return its default value.
  mutating func clearVer() {self._ver = nil}

  /// The context in which the ad appears.
  var context: Com_Google_Openrtb_ContextType {
    get {return _context ?? .content}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  mutating func clearContext() {self._context = nil}

  /// A more detailed context in which the ad appears.
  var contextsubtype: Com_Google_Openrtb_ContextSubtype {
    get {return _contextsubtype ?? .contentGeneralOrMixed}
    set {_contextsubtype = newValue}
  }
  /// Returns true if `contextsubtype` has been explicitly set.
  var hasContextsubtype: Bool {return self._contextsubtype != nil}
  /// Clears the value of `contextsubtype`. Subsequent reads from it will return its default value.
  mutating func clearContextsubtype() {self._contextsubtype = nil}

  /// The design/format/layout of the ad unit being offered.
  var plcmttype: Com_Google_Openrtb_PlacementType {
    get {return _plcmttype ?? .inFeed}
    set {_plcmttype = newValue}
  }
  /// Returns true if `plcmttype` has been explicitly set.
  var hasPlcmttype: Bool {return self._plcmttype != nil}
  /// Clears the value of `plcmttype`. Subsequent reads from it will return its default value.
  mutating func clearPlcmttype() {self._plcmttype = nil}

  /// The number of identical placements in this Layout.
  var plcmtcnt: Int32 {
    get {return _plcmtcnt ?? 1}
    set {_plcmtcnt = newValue}
  }
  /// Returns true if `plcmtcnt` has been explicitly set.
  var hasPlcmtcnt: Bool {return self._plcmtcnt != nil}
  /// Clears the value of `plcmtcnt`. Subsequent reads from it will return its default value.
  mutating func clearPlcmtcnt() {self._plcmtcnt = nil}

  /// 0 for the first ad, 1 for the second ad, and so on. Note this would
  /// generally NOT be used in combination with plcmtcnt - either you are
  /// auctioning multiple identical placements (in which case
  /// plcmtcnt>1, seq=0) or you are holding separate auctions for distinct
  /// items in the feed (in which case plcmtcnt=1, seq>=1).
  var seq: Int32 {
    get {return _seq ?? 0}
    set {_seq = newValue}
  }
  /// Returns true if `seq` has been explicitly set.
  var hasSeq: Bool {return self._seq != nil}
  /// Clears the value of `seq`. Subsequent reads from it will return its default value.
  mutating func clearSeq() {self._seq = nil}

  /// Any bid must comply with the array of elements expressed by the Exchange.
  /// REQUIRED by the OpenRTB Native specification: at least 1 element.
  var assets: [Com_Google_Openrtb_NativeRequest.Asset] = []

  /// Whether the supply source / impression supports returning an assetsurl
  /// instead of an asset object. false or the absence of the field indicates no
  /// such support.
  var aurlsupport: Bool {
    get {return _aurlsupport ?? false}
    set {_aurlsupport = newValue}
  }
  /// Returns true if `aurlsupport` has been explicitly set.
  var hasAurlsupport: Bool {return self._aurlsupport != nil}
  /// Clears the value of `aurlsupport`. Subsequent reads from it will return its default value.
  mutating func clearAurlsupport() {self._aurlsupport = nil}

  /// Whether the supply source / impression supports returning a DCO URL
  /// instead of an asset object. false or the absence of the field indicates no
  /// such support. Beta feature.
  var durlsupport: Bool {
    get {return _durlsupport ?? false}
    set {_durlsupport = newValue}
  }
  /// Returns true if `durlsupport` has been explicitly set.
  var hasDurlsupport: Bool {return self._durlsupport != nil}
  /// Clears the value of `durlsupport`. Subsequent reads from it will return its default value.
  mutating func clearDurlsupport() {self._durlsupport = nil}

  /// Specifies what type of event tracking is supported.
  var eventtrackers: [Com_Google_Openrtb_NativeRequest.EventTrackers] = []

  /// Set to true when the native ad supports buyer-specific privacy notice.
  /// Set to false (or field absent) when the native ad doesn't support custom
  /// privacy links or if support is unknown.
  var privacy: Bool {
    get {return _privacy ?? false}
    set {_privacy = newValue}
  }
  /// Returns true if `privacy` has been explicitly set.
  var hasPrivacy: Bool {return self._privacy != nil}
  /// Clears the value of `privacy`. Subsequent reads from it will return its default value.
  mutating func clearPrivacy() {self._privacy = nil}

  /// DEPRECATED in OpenRTB Native 1.1, REMOVED in 1.2+.
  /// Use field <code>plcmttype</code>.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var layout: Com_Google_Openrtb_LayoutId {
    get {return _layout ?? .contentWall}
    set {_layout = newValue}
  }
  /// Returns true if `layout` has been explicitly set.
  var hasLayout: Bool {return self._layout != nil}
  /// Clears the value of `layout`. Subsequent reads from it will return its default value.
  mutating func clearLayout() {self._layout = nil}

  /// DEPRECATED in OpenRTB Native 1.1, REMOVED in 1.2+.
  /// Use fields <code>context</code> and <code>contextsubtype</code>.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var adunit: Com_Google_Openrtb_AdUnitId {
    get {return _adunit ?? .paidSearchUnit}
    set {_adunit = newValue}
  }
  /// Returns true if `adunit` has been explicitly set.
  var hasAdunit: Bool {return self._adunit != nil}
  /// Clears the value of `adunit`. Subsequent reads from it will return its default value.
  mutating func clearAdunit() {self._adunit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// OpenRTB Native 1.0: The main container object for each asset requested or
  /// supported by Exchange on behalf of the rendering client.
  /// Any object that is required is to be flagged as such. Only one of the
  /// {title,img,video,data} objects should be present in each object.
  /// All others should be null/absent. The id is to be unique within the
  /// Asset array so that the response can be aligned.
  struct Asset: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetOneof: Com_Google_Openrtb_NativeRequest.Asset.OneOf_AssetOneof? = nil

    /// Title object for title assets.
    var title: Com_Google_Openrtb_NativeRequest.Asset.Title {
      get {
        if case .title(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeRequest.Asset.Title()
      }
      set {assetOneof = .title(newValue)}
    }

    /// Image object for image assets.
    var img: Com_Google_Openrtb_NativeRequest.Asset.Image {
      get {
        if case .img(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeRequest.Asset.Image()
      }
      set {assetOneof = .img(newValue)}
    }

    /// Video object for video assets.
    /// Note that in-stream video ads are not part of Native.
    /// Native ads may contain a video as the ad creative itself.
    var video: Com_Google_Openrtb_BidRequest.Imp.Video {
      get {
        if case .video(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_BidRequest.Imp.Video()
      }
      set {assetOneof = .video(newValue)}
    }

    /// Data object for brand name, description, ratings, prices or other
    /// similar elements.
    var data: Com_Google_Openrtb_NativeRequest.Asset.DataMessage {
      get {
        if case .data(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeRequest.Asset.DataMessage()
      }
      set {assetOneof = .data(newValue)}
    }

    /// Unique asset ID, assigned by exchange. Typically a counter for the array.
    /// REQUIRED by the OpenRTB Native specification.
    var id: Int32 {
      get {return _id ?? 0}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    /// Set to true if asset is required
    /// (exchange will not accept a bid without it).
    var required: Bool {
      get {return _required ?? false}
      set {_required = newValue}
    }
    /// Returns true if `required` has been explicitly set.
    var hasRequired: Bool {return self._required != nil}
    /// Clears the value of `required`. Subsequent reads from it will return its default value.
    mutating func clearRequired() {self._required = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_AssetOneof: Equatable, Sendable {
      /// Title object for title assets.
      case title(Com_Google_Openrtb_NativeRequest.Asset.Title)
      /// Image object for image assets.
      case img(Com_Google_Openrtb_NativeRequest.Asset.Image)
      /// Video object for video assets.
      /// Note that in-stream video ads are not part of Native.
      /// Native ads may contain a video as the ad creative itself.
      case video(Com_Google_Openrtb_BidRequest.Imp.Video)
      /// Data object for brand name, description, ratings, prices or other
      /// similar elements.
      case data(Com_Google_Openrtb_NativeRequest.Asset.DataMessage)

      fileprivate var isInitialized: Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch self {
        case .title: return {
          guard case .title(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .img: return {
          guard case .img(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .video: return {
          guard case .video(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .data: return {
          guard case .data(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        }
      }

    }

    /// OpenRTB Native 1.0: The Title object is to be used for title element
    /// of the Native ad.
    struct Title: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Maximum length of the text in the title element.
      /// RECOMMENDED that the value be either of: 25, 90, 140.
      /// REQUIRED by the OpenRTB Native specification.
      var len: Int32 {
        get {return _len ?? 0}
        set {_len = newValue}
      }
      /// Returns true if `len` has been explicitly set.
      var hasLen: Bool {return self._len != nil}
      /// Clears the value of `len`. Subsequent reads from it will return its default value.
      mutating func clearLen() {self._len = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _len: Int32? = nil
    }

    /// OpenRTB Native 1.0: The Image object to be used for all image elements
    /// of the Native ad, such as Icons or Main Image.
    /// RECOMMENDED sizes and aspect ratios are included in ImageAssetType.
    struct Image: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Type ID of the image element supported by the publisher.
      /// The publisher can display this information in an appropriate format.
      var type: Com_Google_Openrtb_ImageAssetType {
        get {return _type ?? .icon}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      /// Width of the image in pixels.
      var w: Int32 {
        get {return _w ?? 0}
        set {_w = newValue}
      }
      /// Returns true if `w` has been explicitly set.
      var hasW: Bool {return self._w != nil}
      /// Clears the value of `w`. Subsequent reads from it will return its default value.
      mutating func clearW() {self._w = nil}

      /// Height of the image in pixels.
      var h: Int32 {
        get {return _h ?? 0}
        set {_h = newValue}
      }
      /// Returns true if `h` has been explicitly set.
      var hasH: Bool {return self._h != nil}
      /// Clears the value of `h`. Subsequent reads from it will return its default value.
      mutating func clearH() {self._h = nil}

      /// The minimum requested width of the image in pixels. This option should
      /// be used for any rescaling of images by the client. Either w or wmin
      /// should be transmitted. If only w is included, it should be considered
      /// an exact requirement.
      var wmin: Int32 {
        get {return _wmin ?? 0}
        set {_wmin = newValue}
      }
      /// Returns true if `wmin` has been explicitly set.
      var hasWmin: Bool {return self._wmin != nil}
      /// Clears the value of `wmin`. Subsequent reads from it will return its default value.
      mutating func clearWmin() {self._wmin = nil}

      /// The minimum requested height of the image in pixels. This option should
      /// be used for any rescaling of images by the client. Either h or hmin
      /// should be transmitted. If only h is included, it should be considered
      /// an exact requirement.
      var hmin: Int32 {
        get {return _hmin ?? 0}
        set {_hmin = newValue}
      }
      /// Returns true if `hmin` has been explicitly set.
      var hasHmin: Bool {return self._hmin != nil}
      /// Clears the value of `hmin`. Subsequent reads from it will return its default value.
      mutating func clearHmin() {self._hmin = nil}

      /// Allowlist of content MIME types supported. Popular MIME types include,
      /// but are not limited to "image/jpg" and "image/gif". Each implementing
      /// Exchange should have their own list of supported types in the
      /// integration docs. See Wikipedia's MIME page for more information and
      /// links to all IETF RFCs. If blank, assume all types are allowed.
      var mimes: [String] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _type: Com_Google_Openrtb_ImageAssetType? = nil
      fileprivate var _w: Int32? = nil
      fileprivate var _h: Int32? = nil
      fileprivate var _wmin: Int32? = nil
      fileprivate var _hmin: Int32? = nil
    }

    /// OpenRTB Native 1.0: The Data Object is to be used for all non-core
    /// elements of the native unit, such as Ratings, Review Count, Stars,
    /// Download count, descriptions or other similar elements. It is also
    /// generic for future of Native elements not contemplated at the time of the
    /// writing of this specification.
    struct DataMessage: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Type ID of the element supported by the publisher. The publisher can
      /// display this information in an appropriate format.
      /// REQUIRED by the OpenRTB Native specification.
      var type: Com_Google_Openrtb_DataAssetType {
        get {return _type ?? .sponsored}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      /// Maximum length of the text in the element's response. Longer strings
      /// may be truncated and ellipsized by Ad Exchange or the publisher during
      /// rendering.
      var len: Int32 {
        get {return _len ?? 0}
        set {_len = newValue}
      }
      /// Returns true if `len` has been explicitly set.
      var hasLen: Bool {return self._len != nil}
      /// Clears the value of `len`. Subsequent reads from it will return its default value.
      mutating func clearLen() {self._len = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _type: Com_Google_Openrtb_DataAssetType? = nil
      fileprivate var _len: Int32? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _id: Int32? = nil
    fileprivate var _required: Bool? = nil
  }

  /// OpenRTB Native 1.2: The EventTrackers object specifies the type of events
  /// the bidder can request to be tracked in the bid response, and which types
  /// of tracking are available for each event type, and is included as an array
  /// in the request.
  struct EventTrackers: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of event available for tracking.
    /// REQUIRED by the OpenRTB Native specification.
    var event: Com_Google_Openrtb_EventType {
      get {return _event ?? .impression}
      set {_event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    var hasEvent: Bool {return self._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    mutating func clearEvent() {self._event = nil}

    /// Array of types of tracking available for the given event.
    /// REQUIRED by the OpenRTB Native specification.
    var methods: [Com_Google_Openrtb_EventTrackingMethod] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _event: Com_Google_Openrtb_EventType? = nil
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _ver: String? = nil
  fileprivate var _context: Com_Google_Openrtb_ContextType? = nil
  fileprivate var _contextsubtype: Com_Google_Openrtb_ContextSubtype? = nil
  fileprivate var _plcmttype: Com_Google_Openrtb_PlacementType? = nil
  fileprivate var _plcmtcnt: Int32? = nil
  fileprivate var _seq: Int32? = nil
  fileprivate var _aurlsupport: Bool? = nil
  fileprivate var _durlsupport: Bool? = nil
  fileprivate var _privacy: Bool? = nil
  fileprivate var _layout: Com_Google_Openrtb_LayoutId? = nil
  fileprivate var _adunit: Com_Google_Openrtb_AdUnitId? = nil
}

/// OpenRTB Native 1.0: The native response object is the top level JSON object
/// which identifies an native response.
struct Com_Google_Openrtb_NativeResponse: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the Native Markup version in use.
  var ver: String {
    get {return _ver ?? String()}
    set {_ver = newValue}
  }
  /// Returns true if `ver` has been explicitly set.
  var hasVer: Bool {return self._ver != nil}
  /// Clears the value of `ver`. Subsequent reads from it will return its default value.
  mutating func clearVer() {self._ver = nil}

  /// List of native ad's assets.
  /// RECOMMENDED in 1.0, 1.1, or in 1.2 as a fallback if assetsurl is provided.
  /// REQUIRED in 1.2, if not assetsurl is provided.
  var assets: [Com_Google_Openrtb_NativeResponse.Asset] = []

  /// URL of alternate source for the assets object. The expected response is a
  /// JSON object mirroring the asset object in the bid response, subject to
  /// certain requirements as specified in the individual objects.
  /// Where present, overrides the assets object in the response.
  var assetsurl: String {
    get {return _assetsurl ?? String()}
    set {_assetsurl = newValue}
  }
  /// Returns true if `assetsurl` has been explicitly set.
  var hasAssetsurl: Bool {return self._assetsurl != nil}
  /// Clears the value of `assetsurl`. Subsequent reads from it will return its default value.
  mutating func clearAssetsurl() {self._assetsurl = nil}

  /// URL where a dynamic creative specification may be found for populating this
  /// ad, per the Dynamic Content Ads Specification.
  /// Note this is a beta option as the interpretation of the Dynamic Content Ads
  /// Specification and how to assign those elementes into a native ad is outside
  /// the scope of this spec and must be agreed offline between parties or as may
  /// be specified in a future revision of the Dynamic Content Ads spec.
  /// Where present, overrides the assets object in the response.
  var dcourl: String {
    get {return _dcourl ?? String()}
    set {_dcourl = newValue}
  }
  /// Returns true if `dcourl` has been explicitly set.
  var hasDcourl: Bool {return self._dcourl != nil}
  /// Clears the value of `dcourl`. Subsequent reads from it will return its default value.
  mutating func clearDcourl() {self._dcourl = nil}

  /// Destination Link. This is default link object for the ad.
  /// Individual assets can also have a link object which applies if the asset is
  /// activated (clicked). If the asset doesn't have a link object, the parent
  /// link object applies.
  /// See ResponseLink definition.
  /// REQUIRED by the OpenRTB Native specification.
  var link: Com_Google_Openrtb_NativeResponse.Link {
    get {return _link ?? Com_Google_Openrtb_NativeResponse.Link()}
    set {_link = newValue}
  }
  /// Returns true if `link` has been explicitly set.
  var hasLink: Bool {return self._link != nil}
  /// Clears the value of `link`. Subsequent reads from it will return its default value.
  mutating func clearLink() {self._link = nil}

  /// DEPRECATED in OpenRTB Native 1.2+. Prefer object <code>EventTracker</code>.
  /// Array of impression tracking URLs, expected to return a 1x1 image or
  /// 204 response - typically only passed when using 3rd party trackers.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var imptrackers: [String] = []

  /// DEPRECATED in OpenRTB Native 1.2+. Prefer object <code>EventTracker</code>.
  /// Optional javascript impression tracker. Contains <script> tags to be
  /// executed at impression time where it can be supported.
  ///
  /// NOTE: This field was marked as deprecated in the .proto file.
  var jstracker: String {
    get {return _jstracker ?? String()}
    set {_jstracker = newValue}
  }
  /// Returns true if `jstracker` has been explicitly set.
  var hasJstracker: Bool {return self._jstracker != nil}
  /// Clears the value of `jstracker`. Subsequent reads from it will return its default value.
  mutating func clearJstracker() {self._jstracker = nil}

  /// Array of response event trackers to run with the ad, in response to the
  /// declared supported methods in the NativeRequest. Replaces imptrackers and
  /// jstrackers.
  var eventtrackers: [Com_Google_Openrtb_NativeResponse.EventTracker] = []

  /// If support was indicated in the request, URL of a page informing the user
  /// about the buyer's targeting activity.
  var privacy: String {
    get {return _privacy ?? String()}
    set {_privacy = newValue}
  }
  /// Returns true if `privacy` has been explicitly set.
  var hasPrivacy: Bool {return self._privacy != nil}
  /// Clears the value of `privacy`. Subsequent reads from it will return its default value.
  mutating func clearPrivacy() {self._privacy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// OpenRTB Native 1.0: Used for "call to action" assets, or other links from
  /// the Native ad. This Object should be associated to its peer object in the
  /// parent Asset Object or as the primary link in the top level NativeResponse
  /// object. When that peer object is activated (clicked) the action should take
  /// the user to the location of the link.
  struct Link: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Landing URL of the clickable link.
    /// REQUIRED by the OpenRTB Native specification.
    var url: String {
      get {return _url ?? String()}
      set {_url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    var hasURL: Bool {return self._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
    mutating func clearURL() {self._url = nil}

    /// List of third-party tracker URLs to be fired on click of the URL.
    var clicktrackers: [String] = []

    /// Fallback URL for deeplink. To be used if the URL given in url is not
    /// supported by the device.
    var fallback: String {
      get {return _fallback ?? String()}
      set {_fallback = newValue}
    }
    /// Returns true if `fallback` has been explicitly set.
    var hasFallback: Bool {return self._fallback != nil}
    /// Clears the value of `fallback`. Subsequent reads from it will return its default value.
    mutating func clearFallback() {self._fallback = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _url: String? = nil
    fileprivate var _fallback: String? = nil
  }

  /// OpenRTB Native 1.0: Corresponds to the Asset Object in the request.
  /// The main container object for each asset requested or supported by Exchange
  /// on behalf of the rendering client. Any object that is required is to be
  /// flagged as such. Only one of the {title,img,video,data} objects should be
  /// present in each object. All others should be null/absent. The id is to be
  /// unique within the Asset array so that the response can be aligned.
  struct Asset: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetOneof: Com_Google_Openrtb_NativeResponse.Asset.OneOf_AssetOneof? = nil

    /// Title object for title assets.
    var title: Com_Google_Openrtb_NativeResponse.Asset.Title {
      get {
        if case .title(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeResponse.Asset.Title()
      }
      set {assetOneof = .title(newValue)}
    }

    /// Image object for image assets.
    var img: Com_Google_Openrtb_NativeResponse.Asset.Image {
      get {
        if case .img(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeResponse.Asset.Image()
      }
      set {assetOneof = .img(newValue)}
    }

    /// Video object for video assets.
    /// Note that in-stream video ads are not part of Native.
    /// Native ads may contain a video as the ad creative itself.
    var video: Com_Google_Openrtb_NativeResponse.Asset.Video {
      get {
        if case .video(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeResponse.Asset.Video()
      }
      set {assetOneof = .video(newValue)}
    }

    /// Data object for ratings, prices or other similar elements.
    var data: Com_Google_Openrtb_NativeResponse.Asset.DataMessage {
      get {
        if case .data(let v)? = assetOneof {return v}
        return Com_Google_Openrtb_NativeResponse.Asset.DataMessage()
      }
      set {assetOneof = .data(newValue)}
    }

    /// Unique asset ID, assigned by exchange, must match one of the asset IDs
    /// in request.
    /// REQUIRED in 1.0, or in 1.2 if embedded asset is being used.
    var id: Int32 {
      get {return _id ?? 0}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    /// Set to true if asset is required. (bidder requires it to be displayed).
    var required: Bool {
      get {return _required ?? false}
      set {_required = newValue}
    }
    /// Returns true if `required` has been explicitly set.
    var hasRequired: Bool {return self._required != nil}
    /// Clears the value of `required`. Subsequent reads from it will return its default value.
    mutating func clearRequired() {self._required = nil}

    /// Link object for call to actions.
    /// This link object applies if the asset item is activated (clicked).
    /// If there is no link object on the asset, the parent link object on the
    /// bid response apply.
    var link: Com_Google_Openrtb_NativeResponse.Link {
      get {return _link ?? Com_Google_Openrtb_NativeResponse.Link()}
      set {_link = newValue}
    }
    /// Returns true if `link` has been explicitly set.
    var hasLink: Bool {return self._link != nil}
    /// Clears the value of `link`. Subsequent reads from it will return its default value.
    mutating func clearLink() {self._link = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_AssetOneof: Equatable, Sendable {
      /// Title object for title assets.
      case title(Com_Google_Openrtb_NativeResponse.Asset.Title)
      /// Image object for image assets.
      case img(Com_Google_Openrtb_NativeResponse.Asset.Image)
      /// Video object for video assets.
      /// Note that in-stream video ads are not part of Native.
      /// Native ads may contain a video as the ad creative itself.
      case video(Com_Google_Openrtb_NativeResponse.Asset.Video)
      /// Data object for ratings, prices or other similar elements.
      case data(Com_Google_Openrtb_NativeResponse.Asset.DataMessage)

      fileprivate var isInitialized: Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch self {
        case .title: return {
          guard case .title(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .img: return {
          guard case .img(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .video: return {
          guard case .video(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        case .data: return {
          guard case .data(let v) = self else { preconditionFailure() }
          return v.isInitialized
        }()
        }
      }

    }

    /// OpenRTB Native 1.0: Corresponds to the Title Object in the request,
    /// with the value filled in.
    /// If using assetsurl or dcourl response rather than embedded asset
    /// response, it is recommended that three title objects be provided, the
    /// length of each is less than or equal to the three recommended maximum
    /// title lengths (25,90,140).
    struct Title: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The text associated with the text element.
      /// REQUIRED by the OpenRTB Native specification.
      var text: String {
        get {return _text ?? String()}
        set {_text = newValue}
      }
      /// Returns true if `text` has been explicitly set.
      var hasText: Bool {return self._text != nil}
      /// Clears the value of `text`. Subsequent reads from it will return its default value.
      mutating func clearText() {self._text = nil}

      /// The length of the title being provided.
      /// REQUIRED if using assetsurl/dcourl representation.
      var len: Int32 {
        get {return _len ?? 0}
        set {_len = newValue}
      }
      /// Returns true if `len` has been explicitly set.
      var hasLen: Bool {return self._len != nil}
      /// Clears the value of `len`. Subsequent reads from it will return its default value.
      mutating func clearLen() {self._len = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _text: String? = nil
      fileprivate var _len: Int32? = nil
    }

    /// OpenRTB Native 1.0: Corresponds to the Image Object in the request.
    /// The Image object to be used for all image elements of the Native ad,
    /// such as Icons or Main Image.
    /// It is recommended that if assetsurl/dcourl is being used rather than
    /// embbedded assets, that an image of each recommended aspect ratio
    /// (per ImageType enum) be provided for image type 3 (MAIN_IMAGE).
    struct Image: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The type of image element being submitted from the ImageType enum.
      /// REQUIRED for assetsurl or dcourl responses,
      /// not required to embedded asset responses.
      var type: Com_Google_Openrtb_ImageAssetType {
        get {return _type ?? .icon}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      /// URL of the image asset.
      /// REQUIRED by the OpenRTB Native specification.
      var url: String {
        get {return _url ?? String()}
        set {_url = newValue}
      }
      /// Returns true if `url` has been explicitly set.
      var hasURL: Bool {return self._url != nil}
      /// Clears the value of `url`. Subsequent reads from it will return its default value.
      mutating func clearURL() {self._url = nil}

      /// Width of the image in pixels.
      /// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
      /// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
      /// of the same type submitted.
      var w: Int32 {
        get {return _w ?? 0}
        set {_w = newValue}
      }
      /// Returns true if `w` has been explicitly set.
      var hasW: Bool {return self._w != nil}
      /// Clears the value of `w`. Subsequent reads from it will return its default value.
      mutating func clearW() {self._w = nil}

      /// Height of the image in pixels.
      /// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
      /// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
      /// of the same type submitted.
      var h: Int32 {
        get {return _h ?? 0}
        set {_h = newValue}
      }
      /// Returns true if `h` has been explicitly set.
      var hasH: Bool {return self._h != nil}
      /// Clears the value of `h`. Subsequent reads from it will return its default value.
      mutating func clearH() {self._h = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _type: Com_Google_Openrtb_ImageAssetType? = nil
      fileprivate var _url: String? = nil
      fileprivate var _w: Int32? = nil
      fileprivate var _h: Int32? = nil
    }

    /// OpenRTB Native 1.0: Corresponds to the Video Object in the request,
    /// yet containing a value of a conforming VAST tag as a value.
    struct Video: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// VAST xml.
      /// REQUIRED by the OpenRTB Native specification.
      var vasttag: String {
        get {return _vasttag ?? String()}
        set {_vasttag = newValue}
      }
      /// Returns true if `vasttag` has been explicitly set.
      var hasVasttag: Bool {return self._vasttag != nil}
      /// Clears the value of `vasttag`. Subsequent reads from it will return its default value.
      mutating func clearVasttag() {self._vasttag = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _vasttag: String? = nil
    }

    /// OpenRTB Native 1.0: Corresponds to the Data Object in the request, with
    /// the value filled in. The Data Object is to be used for all miscellaneous
    /// elements of the native unit such as Brand Name, Ratings, Review Count,
    /// Stars, Downloads, and other elements. It is also generic for future of
    /// native elements not contemplated at the time of the writing of this
    /// document.
    struct DataMessage: SwiftProtobuf.ExtensibleMessage, Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The type of data element being submitted from the DataAssetTypes enum.
      /// REQUIRED in 1.2 for assetsurl or dcourl responses.
      var type: Com_Google_Openrtb_DataAssetType {
        get {return _type ?? .sponsored}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      /// The length of the data element being submitted. Where applicable, must
      /// comply with the recommended maximum lengths in the DataAssetType enum.
      /// REQUIRED in 1.2 for assetsurl or dcourl responses.
      var len: Int32 {
        get {return _len ?? 0}
        set {_len = newValue}
      }
      /// Returns true if `len` has been explicitly set.
      var hasLen: Bool {return self._len != nil}
      /// Clears the value of `len`. Subsequent reads from it will return its default value.
      mutating func clearLen() {self._len = nil}

      /// DEPRECATED in OpenRTB Native 1.2+. No replacement.
      /// The optional formatted string name of the data type to be displayed.
      ///
      /// NOTE: This field was marked as deprecated in the .proto file.
      var label: String {
        get {return _label ?? String()}
        set {_label = newValue}
      }
      /// Returns true if `label` has been explicitly set.
      var hasLabel: Bool {return self._label != nil}
      /// Clears the value of `label`. Subsequent reads from it will return its default value.
      mutating func clearLabel() {self._label = nil}

      /// The formatted string of data to be displayed. Can contain a formatted
      /// value such as "5 stars" or "$10" or "3.4 stars out of 5".
      /// REQUIRED by the OpenRTB Native specification.
      var value: String {
        get {return _value ?? String()}
        set {_value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      var hasValue: Bool {return self._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
      mutating func clearValue() {self._value = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
      fileprivate var _type: Com_Google_Openrtb_DataAssetType? = nil
      fileprivate var _len: Int32? = nil
      fileprivate var _label: String? = nil
      fileprivate var _value: String? = nil
    }

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _id: Int32? = nil
    fileprivate var _required: Bool? = nil
    fileprivate var _link: Com_Google_Openrtb_NativeResponse.Link? = nil
  }

  /// OpenRTB Native 1.2: The event trackers response is an array of objects and
  /// specifies the types of events the bidder wants to track and the
  /// URLs/information to track them. Bidder must only respond with methods
  /// indicated as available in the request. Note that most javascript trackers
  /// expect to be loaded at impression time, so it's not generally recommended
  /// for the buyer to respond with javascript trackers on other events, but the
  /// appropriateness of this is up to each buyer.
  struct EventTracker: SwiftProtobuf.ExtensibleMessage, Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of event to track.
    /// REQUIRED if embedded asset is being used.
    var event: Com_Google_Openrtb_EventType {
      get {return _event ?? .impression}
      set {_event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    var hasEvent: Bool {return self._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    mutating func clearEvent() {self._event = nil}

    /// Type of tracking requested.
    /// REQUIRED if embedded asset is being used.
    var method: Com_Google_Openrtb_EventTrackingMethod {
      get {return _method ?? .img}
      set {_method = newValue}
    }
    /// Returns true if `method` has been explicitly set.
    var hasMethod: Bool {return self._method != nil}
    /// Clears the value of `method`. Subsequent reads from it will return its default value.
    mutating func clearMethod() {self._method = nil}

    /// The URL of the image or js.
    /// REQUIRED for image or js, optional for custom.
    var url: String {
      get {return _url ?? String()}
      set {_url = newValue}
    }
    /// Returns true if `url` has been explicitly set.
    var hasURL: Bool {return self._url != nil}
    /// Clears the value of `url`. Subsequent reads from it will return its default value.
    mutating func clearURL() {self._url = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
    fileprivate var _event: Com_Google_Openrtb_EventType? = nil
    fileprivate var _method: Com_Google_Openrtb_EventTrackingMethod? = nil
    fileprivate var _url: String? = nil
  }

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _ver: String? = nil
  fileprivate var _assetsurl: String? = nil
  fileprivate var _dcourl: String? = nil
  fileprivate var _link: Com_Google_Openrtb_NativeResponse.Link? = nil
  fileprivate var _jstracker: String? = nil
  fileprivate var _privacy: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.google.openrtb"

extension Com_Google_Openrtb_AuctionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FIRST_PRICE"),
    2: .same(proto: "SECOND_PRICE"),
    3: .same(proto: "FIXED_PRICE"),
  ]
}

extension Com_Google_Openrtb_BannerAdType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "XHTML_TEXT_AD"),
    2: .same(proto: "XHTML_BANNER_AD"),
    3: .same(proto: "JAVASCRIPT_AD"),
    4: .same(proto: "IFRAME"),
  ]
}

extension Com_Google_Openrtb_CreativeAttribute: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AUDIO_AUTO_PLAY"),
    2: .same(proto: "AUDIO_USER_INITIATED"),
    3: .same(proto: "EXPANDABLE_AUTOMATIC"),
    4: .same(proto: "EXPANDABLE_CLICK_INITIATED"),
    5: .same(proto: "EXPANDABLE_ROLLOVER_INITIATED"),
    6: .same(proto: "VIDEO_IN_BANNER_AUTO_PLAY"),
    7: .same(proto: "VIDEO_IN_BANNER_USER_INITIATED"),
    8: .same(proto: "POP"),
    9: .same(proto: "PROVOCATIVE_OR_SUGGESTIVE"),
    10: .same(proto: "ANNOYING"),
    11: .same(proto: "SURVEYS"),
    12: .same(proto: "TEXT_ONLY"),
    13: .same(proto: "USER_INTERACTIVE"),
    14: .same(proto: "WINDOWS_DIALOG_OR_ALERT_STYLE"),
    15: .same(proto: "HAS_AUDIO_ON_OFF_BUTTON"),
    16: .same(proto: "AD_CAN_BE_SKIPPED"),
    17: .same(proto: "FLASH"),
    18: .same(proto: "RESPONSIVE"),
    53: .same(proto: "PLACEHOLDER_ATTR53"),
  ]
}

extension Com_Google_Openrtb_APIFramework: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "VPAID_1"),
    2: .same(proto: "VPAID_2"),
    3: .same(proto: "MRAID_1"),
    4: .same(proto: "ORMMA"),
    5: .same(proto: "MRAID_2"),
    6: .same(proto: "MRAID_3"),
    7: .same(proto: "OMID_1"),
    8: .same(proto: "SIMID_1_0"),
    9: .same(proto: "SIMID_1_1"),
  ]
}

extension Com_Google_Openrtb_AdPosition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ABOVE_THE_FOLD"),
    2: .same(proto: "LOCKED"),
    3: .same(proto: "BELOW_THE_FOLD"),
    4: .same(proto: "HEADER"),
    5: .same(proto: "FOOTER"),
    6: .same(proto: "SIDEBAR"),
    7: .same(proto: "AD_POSITION_FULLSCREEN"),
  ]
}

extension Com_Google_Openrtb_VideoLinearity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LINEAR"),
    2: .same(proto: "NON_LINEAR"),
  ]
}

extension Com_Google_Openrtb_Protocol: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "VAST_1_0"),
    2: .same(proto: "VAST_2_0"),
    3: .same(proto: "VAST_3_0"),
    4: .same(proto: "VAST_1_0_WRAPPER"),
    5: .same(proto: "VAST_2_0_WRAPPER"),
    6: .same(proto: "VAST_3_0_WRAPPER"),
    7: .same(proto: "VAST_4_0"),
    8: .same(proto: "VAST_4_0_WRAPPER"),
    9: .same(proto: "DAAST_1_0"),
    10: .same(proto: "DAAST_1_0_WRAPPER"),
    11: .same(proto: "VAST_4_1"),
    12: .same(proto: "VAST_4_1_WRAPPER"),
    13: .same(proto: "VAST_4_2"),
    14: .same(proto: "VAST_4_2_WRAPPER"),
  ]
}

extension Com_Google_Openrtb_PlaybackMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AUTO_PLAY_SOUND_ON"),
    2: .same(proto: "AUTO_PLAY_SOUND_OFF"),
    3: .same(proto: "CLICK_TO_PLAY"),
    4: .same(proto: "MOUSE_OVER"),
    5: .same(proto: "ENTER_SOUND_ON"),
    6: .same(proto: "ENTER_SOUND_OFF"),
    7: .same(proto: "CONTINUOUS"),
  ]
}

extension Com_Google_Openrtb_StartDelay: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -2: .same(proto: "GENERIC_POST_ROLL"),
    -1: .same(proto: "GENERIC_MID_ROLL"),
    0: .same(proto: "PRE_ROLL"),
  ]
}

extension Com_Google_Openrtb_VideoPlacementType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNDEFINED_VIDEO_PLACEMENT"),
    1: .same(proto: "IN_STREAM_PLACEMENT"),
    2: .same(proto: "IN_BANNER_PLACEMENT"),
    3: .same(proto: "IN_ARTICLE_PLACEMENT"),
    4: .same(proto: "IN_FEED_PLACEMENT"),
    5: .same(proto: "FLOATING_PLACEMENT"),
  ]
}

extension Com_Google_Openrtb_Plcmt: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLCMT_UNKNOWN"),
    1: .same(proto: "PLCMT_INSTREAM"),
    2: .same(proto: "PLCMT_ACCOMPANYING_CONTENT"),
    3: .same(proto: "PLCMT_INTERSTITIAL"),
    4: .same(proto: "PLCMT_NO_CONTENT_STANDALONE"),
  ]
}

extension Com_Google_Openrtb_PlaybackCessationMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "COMPLETION_OR_USER"),
    2: .same(proto: "LEAVING_OR_USER"),
    3: .same(proto: "LEAVING_CONTINUES_OR_USER"),
  ]
}

extension Com_Google_Openrtb_SlotPositionInPod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "SLOT_POSITION_POD_LAST"),
    0: .same(proto: "SLOT_POSITION_POD_ANY"),
    1: .same(proto: "SLOT_POSITION_POD_FIRST"),
    2: .same(proto: "SLOT_POSITION_POD_FIRST_OR_LAST"),
  ]
}

extension Com_Google_Openrtb_PodSequence: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    -1: .same(proto: "POD_SEQUENCE_LAST"),
    0: .same(proto: "POD_SEQUENCE_ANY"),
    1: .same(proto: "POD_SEQUENCE_FIRST"),
  ]
}

extension Com_Google_Openrtb_ConnectionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONNECTION_UNKNOWN"),
    1: .same(proto: "ETHERNET"),
    2: .same(proto: "WIFI"),
    3: .same(proto: "CELL_UNKNOWN"),
    4: .same(proto: "CELL_2G"),
    5: .same(proto: "CELL_3G"),
    6: .same(proto: "CELL_4G"),
    7: .same(proto: "CELL_5G"),
  ]
}

extension Com_Google_Openrtb_ExpandableDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LEFT"),
    2: .same(proto: "RIGHT"),
    3: .same(proto: "UP"),
    4: .same(proto: "DOWN"),
    5: .same(proto: "EXPANDABLE_FULLSCREEN"),
    6: .same(proto: "RESIZE_MINIMIZE"),
  ]
}

extension Com_Google_Openrtb_ContentDeliveryMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "STREAMING"),
    2: .same(proto: "PROGRESSIVE"),
    3: .same(proto: "DOWNLOAD"),
  ]
}

extension Com_Google_Openrtb_ContentContext: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "VIDEO"),
    2: .same(proto: "GAME"),
    3: .same(proto: "MUSIC"),
    4: .same(proto: "APPLICATION"),
    5: .same(proto: "TEXT"),
    6: .same(proto: "OTHER"),
    7: .same(proto: "CONTEXT_UNKNOWN"),
  ]
}

extension Com_Google_Openrtb_ProductionQuality: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "QUALITY_UNKNOWN"),
    1: .same(proto: "PROFESSIONAL"),
    2: .same(proto: "PROSUMER"),
    3: .same(proto: "USER_GENERATED"),
  ]
}

extension Com_Google_Openrtb_LocationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "GPS_LOCATION"),
    2: .same(proto: "IP"),
    3: .same(proto: "USER_PROVIDED"),
  ]
}

extension Com_Google_Openrtb_LocationService: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IP2LOCATION"),
    2: .same(proto: "NEUSTAR"),
    3: .same(proto: "MAXMIND"),
    4: .same(proto: "NETACUITY"),
  ]
}

extension Com_Google_Openrtb_DeviceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MOBILE"),
    2: .same(proto: "PERSONAL_COMPUTER"),
    3: .same(proto: "CONNECTED_TV"),
    4: .same(proto: "HIGHEND_PHONE"),
    5: .same(proto: "TABLET"),
    6: .same(proto: "CONNECTED_DEVICE"),
    7: .same(proto: "SET_TOP_BOX"),
    8: .same(proto: "OOH_DEVICE"),
  ]
}

extension Com_Google_Openrtb_CompanionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "STATIC"),
    2: .same(proto: "HTML"),
    3: .same(proto: "COMPANION_IFRAME"),
  ]
}

extension Com_Google_Openrtb_QAGMediaRating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ALL_AUDIENCES"),
    2: .same(proto: "EVERYONE_OVER_12"),
    3: .same(proto: "MATURE"),
  ]
}

extension Com_Google_Openrtb_NoBidReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_ERROR"),
    1: .same(proto: "TECHNICAL_ERROR"),
    2: .same(proto: "INVALID_REQUEST"),
    3: .same(proto: "KNOWN_WEB_SPIDER"),
    4: .same(proto: "SUSPECTED_NONHUMAN_TRAFFIC"),
    5: .same(proto: "CLOUD_DATACENTER_PROXYIP"),
    6: .same(proto: "UNSUPPORTED_DEVICE"),
    7: .same(proto: "BLOCKED_PUBLISHER"),
    8: .same(proto: "UNMATCHED_USER"),
    9: .same(proto: "DAILY_READER_CAP"),
    10: .same(proto: "DAILY_DOMAIN_CAP"),
  ]
}

extension Com_Google_Openrtb_LossReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BID_WON"),
    1: .same(proto: "INTERNAL_ERROR"),
    2: .same(proto: "IMP_EXPIRED"),
    3: .same(proto: "INVALID_BID"),
    4: .same(proto: "INVALID_DEAL_ID"),
    5: .same(proto: "INVALID_AUCTION_ID"),
    6: .same(proto: "INVALID_ADOMAIN"),
    7: .same(proto: "MISSING_MARKUP"),
    8: .same(proto: "MISSING_CREATIVE_ID"),
    9: .same(proto: "MISSING_PRICE"),
    10: .same(proto: "MISSING_MIN_CREATIVE_APPROVAL_DATA"),
    100: .same(proto: "BID_BELOW_FLOOR"),
    101: .same(proto: "BID_BELOW_DEAL_FLOOR"),
    102: .same(proto: "LOST_HIGHER_BID"),
    103: .same(proto: "LOST_PMP_DEAL"),
    104: .same(proto: "SEAT_BLOCKED"),
    200: .same(proto: "CREATIVE_REASON_UNKNOWN"),
    201: .same(proto: "CREATIVE_PENDING"),
    202: .same(proto: "CREATIVE_DISAPPROVED"),
    203: .same(proto: "CREATIVE_SIZE"),
    204: .same(proto: "CREATIVE_FORMAT"),
    205: .same(proto: "CREATIVE_ADVERTISER_EXCLUSION"),
    206: .same(proto: "CREATIVE_APP_EXCLUSION"),
    207: .same(proto: "CREATIVE_NOT_SECURE"),
    208: .same(proto: "CREATIVE_LANGUAGE_EXCLUSION"),
    209: .same(proto: "CREATIVE_CATEGORY_EXCLUSION"),
    210: .same(proto: "CREATIVE_ATTRIBUTE_EXCLUSION"),
    211: .same(proto: "CREATIVE_ADTYPE_EXCLUSION"),
    212: .same(proto: "CREATIVE_ANIMATION_LONG"),
    213: .same(proto: "CREATIVE_NOT_ALLOWED_PMP"),
  ]
}

extension Com_Google_Openrtb_FeedType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MUSIC_SERVICE"),
    2: .same(proto: "BROADCAST"),
    3: .same(proto: "PODCAST"),
  ]
}

extension Com_Google_Openrtb_VolumeNormalizationMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "AVERAGE_VOLUME"),
    2: .same(proto: "PEAK_VOLUME"),
    3: .same(proto: "LOUDNESS"),
    4: .same(proto: "CUSTOM_VOLUME"),
  ]
}

extension Com_Google_Openrtb_UserAgentSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_SOURCE"),
    1: .same(proto: "CLIENT_HINTS_LOW_ENTROPY"),
    2: .same(proto: "CLIENT_HINTS_HIGH_ENTROPY"),
    3: .same(proto: "USER_AGENT_STRING"),
  ]
}

extension Com_Google_Openrtb_CreativeMarkupType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CREATIVE_MARKUP_BANNER"),
    2: .same(proto: "CREATIVE_MARKUP_VIDEO"),
    3: .same(proto: "CREATIVE_MARKUP_AUDIO"),
    4: .same(proto: "CREATIVE_MARKUP_NATIVE"),
  ]
}

extension Com_Google_Openrtb_ServerSideAdInsertionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SERVER_SIDE_AD_INSERTION_TYPE_UNKNOWN"),
    1: .same(proto: "CLIENT_SIDE_ONLY"),
    2: .same(proto: "SERVER_SIDE_STITCHED_CLIENT_TRACKER"),
    3: .same(proto: "SERVER_SIDE_ONLY"),
  ]
}

extension Com_Google_Openrtb_AgentType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BROWSER_OR_DEVICE"),
    2: .same(proto: "IN_APP_IMPRESSION"),
    3: .same(proto: "STABLE_ID"),
  ]
}

extension Com_Google_Openrtb_CategoryTaxonomy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IAB_CONTENT_1_0"),
    2: .same(proto: "IAB_CONTENT_2_0"),
    3: .same(proto: "IAB_PRODUCT_1_0"),
    4: .same(proto: "IAB_AUDIENCE_1_1"),
    5: .same(proto: "IAB_CONTENT_2_1"),
    6: .same(proto: "IAB_CONTENT_2_2"),
    600: .same(proto: "CHROME_TOPICS"),
  ]
}

extension Com_Google_Openrtb_LayoutId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CONTENT_WALL"),
    2: .same(proto: "APP_WALL"),
    3: .same(proto: "NEWS_FEED"),
    4: .same(proto: "CHAT_LIST"),
    5: .same(proto: "CAROUSEL"),
    6: .same(proto: "CONTENT_STREAM"),
    7: .same(proto: "GRID"),
  ]
}

extension Com_Google_Openrtb_AdUnitId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PAID_SEARCH_UNIT"),
    2: .same(proto: "RECOMMENDATION_WIDGET"),
    3: .same(proto: "PROMOTED_LISTING"),
    4: .same(proto: "IAB_IN_AD_NATIVE"),
    5: .same(proto: "ADUNITID_CUSTOM"),
  ]
}

extension Com_Google_Openrtb_ContextType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CONTENT"),
    2: .same(proto: "SOCIAL"),
    3: .same(proto: "PRODUCT"),
  ]
}

extension Com_Google_Openrtb_ContextSubtype: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "CONTENT_GENERAL_OR_MIXED"),
    11: .same(proto: "CONTENT_ARTICLE"),
    12: .same(proto: "CONTENT_VIDEO"),
    13: .same(proto: "CONTENT_AUDIO"),
    14: .same(proto: "CONTENT_IMAGE"),
    15: .same(proto: "CONTENT_USER_GENERATED"),
    20: .same(proto: "SOCIAL_GENERAL"),
    21: .same(proto: "SOCIAL_EMAIL"),
    22: .same(proto: "SOCIAL_CHAT_IM"),
    30: .same(proto: "PRODUCT_SELLING"),
    31: .same(proto: "PRODUCT_MARKETPLACE"),
    32: .same(proto: "PRODUCT_REVIEW"),
  ]
}

extension Com_Google_Openrtb_PlacementType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IN_FEED"),
    2: .same(proto: "ATOMIC_UNIT"),
    3: .same(proto: "OUTSIDE"),
    4: .same(proto: "RECOMMENDATION"),
  ]
}

extension Com_Google_Openrtb_DataAssetType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SPONSORED"),
    2: .same(proto: "DESC"),
    3: .same(proto: "RATING"),
    4: .same(proto: "LIKES"),
    5: .same(proto: "DOWNLOADS"),
    6: .same(proto: "PRICE"),
    7: .same(proto: "SALEPRICE"),
    8: .same(proto: "PHONE"),
    9: .same(proto: "ADDRESS"),
    10: .same(proto: "DESC2"),
    11: .same(proto: "DISPLAYURL"),
    12: .same(proto: "CTATEXT"),
  ]
}

extension Com_Google_Openrtb_ImageAssetType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ICON"),
    2: .same(proto: "LOGO"),
    3: .same(proto: "MAIN"),
  ]
}

extension Com_Google_Openrtb_EventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IMPRESSION"),
    2: .same(proto: "VIEWABLE_MRC_50"),
    3: .same(proto: "VIEWABLE_MRC_100"),
    4: .same(proto: "VIEWABLE_VIDEO_50"),
  ]
}

extension Com_Google_Openrtb_EventTrackingMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "IMG"),
    2: .same(proto: "JS"),
  ]
}

extension Com_Google_Openrtb_BidRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BidRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "site"),
    4: .same(proto: "app"),
    1: .same(proto: "id"),
    2: .same(proto: "imp"),
    5: .same(proto: "device"),
    14: .same(proto: "regs"),
    6: .same(proto: "user"),
    7: .same(proto: "at"),
    8: .same(proto: "tmax"),
    9: .same(proto: "wseat"),
    10: .same(proto: "allimps"),
    11: .same(proto: "cur"),
    12: .same(proto: "bcat"),
    21: .same(proto: "cattax"),
    13: .same(proto: "badv"),
    16: .same(proto: "bapp"),
    15: .same(proto: "test"),
    17: .same(proto: "bseat"),
    18: .same(proto: "wlang"),
    20: .same(proto: "wlangb"),
    19: .same(proto: "source"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _distributionchannelOneof: Com_Google_Openrtb_BidRequest.OneOf_DistributionchannelOneof?
    var _id: String? = nil
    var _imp: [Com_Google_Openrtb_BidRequest.Imp] = []
    var _device: Com_Google_Openrtb_BidRequest.Device? = nil
    var _regs: Com_Google_Openrtb_BidRequest.Regs? = nil
    var _user: Com_Google_Openrtb_BidRequest.User? = nil
    var _at: Com_Google_Openrtb_AuctionType? = nil
    var _tmax: Int32? = nil
    var _wseat: [String] = []
    var _allimps: Bool? = nil
    var _cur: [String] = []
    var _bcat: [String] = []
    var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    var _badv: [String] = []
    var _bapp: [String] = []
    var _test: Bool? = nil
    var _bseat: [String] = []
    var _wlang: [String] = []
    var _wlangb: [String] = []
    var _source: Com_Google_Openrtb_BidRequest.Source? = nil
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _distributionchannelOneof = source._distributionchannelOneof
      _id = source._id
      _imp = source._imp
      _device = source._device
      _regs = source._regs
      _user = source._user
      _at = source._at
      _tmax = source._tmax
      _wseat = source._wseat
      _allimps = source._allimps
      _cur = source._cur
      _bcat = source._bcat
      _cattax = source._cattax
      _badv = source._badv
      _bapp = source._bapp
      _test = source._test
      _bseat = source._bseat
      _wlang = source._wlang
      _wlangb = source._wlangb
      _source = source._source
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if let v = _storage._distributionchannelOneof, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._imp) {return false}
      if let v = _storage._device, !v.isInitialized {return false}
      if let v = _storage._regs, !v.isInitialized {return false}
      if let v = _storage._user, !v.isInitialized {return false}
      if let v = _storage._source, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._imp) }()
        case 3: try {
          var v: Com_Google_Openrtb_BidRequest.Site?
          var hadOneofValue = false
          if let current = _storage._distributionchannelOneof {
            hadOneofValue = true
            if case .site(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._distributionchannelOneof = .site(v)
          }
        }()
        case 4: try {
          var v: Com_Google_Openrtb_BidRequest.App?
          var hadOneofValue = false
          if let current = _storage._distributionchannelOneof {
            hadOneofValue = true
            if case .app(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._distributionchannelOneof = .app(v)
          }
        }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._device) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._at) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._tmax) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._wseat) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._allimps) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._cur) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._bcat) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._badv) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._regs) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._test) }()
        case 16: try { try decoder.decodeRepeatedStringField(value: &_storage._bapp) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._bseat) }()
        case 18: try { try decoder.decodeRepeatedStringField(value: &_storage._wlang) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._source) }()
        case 20: try { try decoder.decodeRepeatedStringField(value: &_storage._wlangb) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._cattax) }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      if !_storage._imp.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._imp, fieldNumber: 2)
      }
      switch _storage._distributionchannelOneof {
      case .site?: try {
        guard case .site(let v)? = _storage._distributionchannelOneof else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }()
      case .app?: try {
        guard case .app(let v)? = _storage._distributionchannelOneof else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }()
      case nil: break
      }
      try { if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._at {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._tmax {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      if !_storage._wseat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._wseat, fieldNumber: 9)
      }
      try { if let v = _storage._allimps {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      if !_storage._cur.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._cur, fieldNumber: 11)
      }
      if !_storage._bcat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._bcat, fieldNumber: 12)
      }
      if !_storage._badv.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._badv, fieldNumber: 13)
      }
      try { if let v = _storage._regs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._test {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      if !_storage._bapp.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._bapp, fieldNumber: 16)
      }
      if !_storage._bseat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._bseat, fieldNumber: 17)
      }
      if !_storage._wlang.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._wlang, fieldNumber: 18)
      }
      try { if let v = _storage._source {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      if !_storage._wlangb.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._wlangb, fieldNumber: 20)
      }
      try { if let v = _storage._cattax {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest, rhs: Com_Google_Openrtb_BidRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._distributionchannelOneof != rhs_storage._distributionchannelOneof {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._imp != rhs_storage._imp {return false}
        if _storage._device != rhs_storage._device {return false}
        if _storage._regs != rhs_storage._regs {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._at != rhs_storage._at {return false}
        if _storage._tmax != rhs_storage._tmax {return false}
        if _storage._wseat != rhs_storage._wseat {return false}
        if _storage._allimps != rhs_storage._allimps {return false}
        if _storage._cur != rhs_storage._cur {return false}
        if _storage._bcat != rhs_storage._bcat {return false}
        if _storage._cattax != rhs_storage._cattax {return false}
        if _storage._badv != rhs_storage._badv {return false}
        if _storage._bapp != rhs_storage._bapp {return false}
        if _storage._test != rhs_storage._test {return false}
        if _storage._bseat != rhs_storage._bseat {return false}
        if _storage._wlang != rhs_storage._wlang {return false}
        if _storage._wlangb != rhs_storage._wlangb {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Imp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "banner"),
    3: .same(proto: "video"),
    15: .same(proto: "audio"),
    4: .same(proto: "displaymanager"),
    5: .same(proto: "displaymanagerver"),
    6: .same(proto: "instl"),
    7: .same(proto: "tagid"),
    8: .same(proto: "bidfloor"),
    9: .same(proto: "bidfloorcur"),
    16: .same(proto: "clickbrowser"),
    12: .same(proto: "secure"),
    10: .same(proto: "iframebuster"),
    18: .same(proto: "rwdd"),
    19: .same(proto: "ssai"),
    11: .same(proto: "pmp"),
    13: .same(proto: "native"),
    14: .same(proto: "exp"),
    17: .same(proto: "metric"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _banner: Com_Google_Openrtb_BidRequest.Imp.Banner? = nil
    var _video: Com_Google_Openrtb_BidRequest.Imp.Video? = nil
    var _audio: Com_Google_Openrtb_BidRequest.Imp.Audio? = nil
    var _displaymanager: String? = nil
    var _displaymanagerver: String? = nil
    var _instl: Bool? = nil
    var _tagid: String? = nil
    var _bidfloor: Double? = nil
    var _bidfloorcur: String? = nil
    var _clickbrowser: Bool? = nil
    var _secure: Bool? = nil
    var _iframebuster: [String] = []
    var _rwdd: Bool? = nil
    var _ssai: Com_Google_Openrtb_ServerSideAdInsertionType? = nil
    var _pmp: Com_Google_Openrtb_BidRequest.Imp.Pmp? = nil
    var _native: Com_Google_Openrtb_BidRequest.Imp.Native? = nil
    var _exp: Int32? = nil
    var _metric: [Com_Google_Openrtb_BidRequest.Imp.Metric] = []
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _banner = source._banner
      _video = source._video
      _audio = source._audio
      _displaymanager = source._displaymanager
      _displaymanagerver = source._displaymanagerver
      _instl = source._instl
      _tagid = source._tagid
      _bidfloor = source._bidfloor
      _bidfloorcur = source._bidfloorcur
      _clickbrowser = source._clickbrowser
      _secure = source._secure
      _iframebuster = source._iframebuster
      _rwdd = source._rwdd
      _ssai = source._ssai
      _pmp = source._pmp
      _native = source._native
      _exp = source._exp
      _metric = source._metric
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if let v = _storage._banner, !v.isInitialized {return false}
      if let v = _storage._video, !v.isInitialized {return false}
      if let v = _storage._audio, !v.isInitialized {return false}
      if let v = _storage._pmp, !v.isInitialized {return false}
      if let v = _storage._native, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._metric) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._banner) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._video) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._displaymanager) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._displaymanagerver) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._instl) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._tagid) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._bidfloor) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._bidfloorcur) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._iframebuster) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._pmp) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._secure) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._native) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._exp) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._audio) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._clickbrowser) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._metric) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._rwdd) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._ssai) }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._banner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._video {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._displaymanager {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._displaymanagerver {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._instl {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._tagid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._bidfloor {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._bidfloorcur {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      if !_storage._iframebuster.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._iframebuster, fieldNumber: 10)
      }
      try { if let v = _storage._pmp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._secure {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._native {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._exp {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._audio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._clickbrowser {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      if !_storage._metric.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._metric, fieldNumber: 17)
      }
      try { if let v = _storage._rwdd {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._ssai {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp, rhs: Com_Google_Openrtb_BidRequest.Imp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._banner != rhs_storage._banner {return false}
        if _storage._video != rhs_storage._video {return false}
        if _storage._audio != rhs_storage._audio {return false}
        if _storage._displaymanager != rhs_storage._displaymanager {return false}
        if _storage._displaymanagerver != rhs_storage._displaymanagerver {return false}
        if _storage._instl != rhs_storage._instl {return false}
        if _storage._tagid != rhs_storage._tagid {return false}
        if _storage._bidfloor != rhs_storage._bidfloor {return false}
        if _storage._bidfloorcur != rhs_storage._bidfloorcur {return false}
        if _storage._clickbrowser != rhs_storage._clickbrowser {return false}
        if _storage._secure != rhs_storage._secure {return false}
        if _storage._iframebuster != rhs_storage._iframebuster {return false}
        if _storage._rwdd != rhs_storage._rwdd {return false}
        if _storage._ssai != rhs_storage._ssai {return false}
        if _storage._pmp != rhs_storage._pmp {return false}
        if _storage._native != rhs_storage._native {return false}
        if _storage._exp != rhs_storage._exp {return false}
        if _storage._metric != rhs_storage._metric {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Banner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Banner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "h"),
    15: .same(proto: "format"),
    3: .same(proto: "id"),
    4: .same(proto: "pos"),
    5: .same(proto: "btype"),
    6: .same(proto: "battr"),
    7: .same(proto: "mimes"),
    8: .same(proto: "topframe"),
    9: .same(proto: "expdir"),
    10: .same(proto: "api"),
    16: .same(proto: "vcm"),
    11: .same(proto: "wmax"),
    12: .same(proto: "hmax"),
    13: .same(proto: "wmin"),
    14: .same(proto: "hmin"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.format) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._w) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._h) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._pos) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.btype) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.battr) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.mimes) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._topframe) }()
      case 9: try { try decoder.decodeRepeatedEnumField(value: &self.expdir) }()
      case 10: try { try decoder.decodeRepeatedEnumField(value: &self.api) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self._wmax) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self._hmax) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self._wmin) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self._hmin) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.format) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self._vcm) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Banner.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._w {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._h {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._pos {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    if !self.btype.isEmpty {
      try visitor.visitPackedEnumField(value: self.btype, fieldNumber: 5)
    }
    if !self.battr.isEmpty {
      try visitor.visitPackedEnumField(value: self.battr, fieldNumber: 6)
    }
    if !self.mimes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mimes, fieldNumber: 7)
    }
    try { if let v = self._topframe {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    if !self.expdir.isEmpty {
      try visitor.visitPackedEnumField(value: self.expdir, fieldNumber: 9)
    }
    if !self.api.isEmpty {
      try visitor.visitPackedEnumField(value: self.api, fieldNumber: 10)
    }
    try { if let v = self._wmax {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._hmax {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._wmin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._hmin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    } }()
    if !self.format.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.format, fieldNumber: 15)
    }
    try { if let v = self._vcm {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Banner, rhs: Com_Google_Openrtb_BidRequest.Imp.Banner) -> Bool {
    if lhs._w != rhs._w {return false}
    if lhs._h != rhs._h {return false}
    if lhs.format != rhs.format {return false}
    if lhs._id != rhs._id {return false}
    if lhs._pos != rhs._pos {return false}
    if lhs.btype != rhs.btype {return false}
    if lhs.battr != rhs.battr {return false}
    if lhs.mimes != rhs.mimes {return false}
    if lhs._topframe != rhs._topframe {return false}
    if lhs.expdir != rhs.expdir {return false}
    if lhs.api != rhs.api {return false}
    if lhs._vcm != rhs._vcm {return false}
    if lhs._wmax != rhs._wmax {return false}
    if lhs._hmax != rhs._hmax {return false}
    if lhs._wmin != rhs._wmin {return false}
    if lhs._hmin != rhs._hmin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Banner.Format: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.Banner.protoMessageName + ".Format"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "w"),
    2: .same(proto: "h"),
    3: .same(proto: "wratio"),
    4: .same(proto: "hratio"),
    5: .same(proto: "wmin"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._w) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._h) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._wratio) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._hratio) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._wmin) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Banner.Format.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._w {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._h {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._wratio {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._hratio {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._wmin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Banner.Format, rhs: Com_Google_Openrtb_BidRequest.Imp.Banner.Format) -> Bool {
    if lhs._w != rhs._w {return false}
    if lhs._h != rhs._h {return false}
    if lhs._wratio != rhs._wratio {return false}
    if lhs._hratio != rhs._hratio {return false}
    if lhs._wmin != rhs._wmin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Video"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mimes"),
    3: .same(proto: "minduration"),
    4: .same(proto: "maxduration"),
    8: .same(proto: "startdelay"),
    28: .same(proto: "maxseq"),
    29: .same(proto: "poddur"),
    21: .same(proto: "protocols"),
    6: .same(proto: "w"),
    7: .same(proto: "h"),
    30: .same(proto: "podid"),
    31: .same(proto: "podseq"),
    32: .same(proto: "rqddurs"),
    26: .same(proto: "placement"),
    35: .same(proto: "plcmt"),
    2: .same(proto: "linearity"),
    23: .same(proto: "skip"),
    24: .same(proto: "skipmin"),
    25: .same(proto: "skipafter"),
    9: .same(proto: "sequence"),
    33: .same(proto: "slotinpod"),
    34: .same(proto: "mincpmpersec"),
    10: .same(proto: "battr"),
    11: .same(proto: "maxextended"),
    12: .same(proto: "minbitrate"),
    13: .same(proto: "maxbitrate"),
    14: .same(proto: "boxingallowed"),
    15: .same(proto: "playbackmethod"),
    27: .same(proto: "playbackend"),
    16: .same(proto: "delivery"),
    17: .same(proto: "pos"),
    18: .same(proto: "companionad"),
    19: .same(proto: "api"),
    20: .same(proto: "companiontype"),
    5: .same(proto: "protocol"),
  ]

  fileprivate class _StorageClass {
    var _mimes: [String] = []
    var _minduration: Int32? = nil
    var _maxduration: Int32? = nil
    var _startdelay: Int32? = nil
    var _maxseq: Int32? = nil
    var _poddur: Int32? = nil
    var _protocols: [Com_Google_Openrtb_Protocol] = []
    var _w: Int32? = nil
    var _h: Int32? = nil
    var _podid: String? = nil
    var _podseq: Com_Google_Openrtb_PodSequence? = nil
    var _rqddurs: [Int32] = []
    var _placement: Com_Google_Openrtb_VideoPlacementType? = nil
    var _plcmt: Com_Google_Openrtb_Plcmt? = nil
    var _linearity: Com_Google_Openrtb_VideoLinearity? = nil
    var _skip: Bool? = nil
    var _skipmin: Int32? = nil
    var _skipafter: Int32? = nil
    var _sequence: Int32? = nil
    var _slotinpod: Com_Google_Openrtb_SlotPositionInPod? = nil
    var _mincpmpersec: Double? = nil
    var _battr: [Com_Google_Openrtb_CreativeAttribute] = []
    var _maxextended: Int32? = nil
    var _minbitrate: Int32? = nil
    var _maxbitrate: Int32? = nil
    var _boxingallowed: Bool? = nil
    var _playbackmethod: [Com_Google_Openrtb_PlaybackMethod] = []
    var _playbackend: Com_Google_Openrtb_PlaybackCessationMode? = nil
    var _delivery: [Com_Google_Openrtb_ContentDeliveryMethod] = []
    var _pos: Com_Google_Openrtb_AdPosition? = nil
    var _companionad: [Com_Google_Openrtb_BidRequest.Imp.Banner] = []
    var _api: [Com_Google_Openrtb_APIFramework] = []
    var _companiontype: [Com_Google_Openrtb_CompanionType] = []
    var _protocol: Com_Google_Openrtb_Protocol? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _mimes = source._mimes
      _minduration = source._minduration
      _maxduration = source._maxduration
      _startdelay = source._startdelay
      _maxseq = source._maxseq
      _poddur = source._poddur
      _protocols = source._protocols
      _w = source._w
      _h = source._h
      _podid = source._podid
      _podseq = source._podseq
      _rqddurs = source._rqddurs
      _placement = source._placement
      _plcmt = source._plcmt
      _linearity = source._linearity
      _skip = source._skip
      _skipmin = source._skipmin
      _skipafter = source._skipafter
      _sequence = source._sequence
      _slotinpod = source._slotinpod
      _mincpmpersec = source._mincpmpersec
      _battr = source._battr
      _maxextended = source._maxextended
      _minbitrate = source._minbitrate
      _maxbitrate = source._maxbitrate
      _boxingallowed = source._boxingallowed
      _playbackmethod = source._playbackmethod
      _playbackend = source._playbackend
      _delivery = source._delivery
      _pos = source._pos
      _companionad = source._companionad
      _api = source._api
      _companiontype = source._companiontype
      _protocol = source._protocol
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._companionad) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._mimes) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._linearity) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._minduration) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._maxduration) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._protocol) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._w) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._h) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._startdelay) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._sequence) }()
        case 10: try { try decoder.decodeRepeatedEnumField(value: &_storage._battr) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._maxextended) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._minbitrate) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._maxbitrate) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._boxingallowed) }()
        case 15: try { try decoder.decodeRepeatedEnumField(value: &_storage._playbackmethod) }()
        case 16: try { try decoder.decodeRepeatedEnumField(value: &_storage._delivery) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._pos) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._companionad) }()
        case 19: try { try decoder.decodeRepeatedEnumField(value: &_storage._api) }()
        case 20: try { try decoder.decodeRepeatedEnumField(value: &_storage._companiontype) }()
        case 21: try { try decoder.decodeRepeatedEnumField(value: &_storage._protocols) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._skip) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._skipmin) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._skipafter) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._placement) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._playbackend) }()
        case 28: try { try decoder.decodeSingularInt32Field(value: &_storage._maxseq) }()
        case 29: try { try decoder.decodeSingularInt32Field(value: &_storage._poddur) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._podid) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._podseq) }()
        case 32: try { try decoder.decodeRepeatedInt32Field(value: &_storage._rqddurs) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._slotinpod) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._mincpmpersec) }()
        case 35: try { try decoder.decodeSingularEnumField(value: &_storage._plcmt) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Video.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._mimes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._mimes, fieldNumber: 1)
      }
      try { if let v = _storage._linearity {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._minduration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._maxduration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._protocol {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._w {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._h {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._startdelay {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._sequence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      if !_storage._battr.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._battr, fieldNumber: 10)
      }
      try { if let v = _storage._maxextended {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._minbitrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._maxbitrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._boxingallowed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      if !_storage._playbackmethod.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._playbackmethod, fieldNumber: 15)
      }
      if !_storage._delivery.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._delivery, fieldNumber: 16)
      }
      try { if let v = _storage._pos {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      if !_storage._companionad.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._companionad, fieldNumber: 18)
      }
      if !_storage._api.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._api, fieldNumber: 19)
      }
      if !_storage._companiontype.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._companiontype, fieldNumber: 20)
      }
      if !_storage._protocols.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._protocols, fieldNumber: 21)
      }
      try { if let v = _storage._skip {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._skipmin {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._skipafter {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._placement {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._playbackend {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._maxseq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._poddur {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._podid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._podseq {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 31)
      } }()
      if !_storage._rqddurs.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._rqddurs, fieldNumber: 32)
      }
      try { if let v = _storage._slotinpod {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._mincpmpersec {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._plcmt {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 35)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Video, rhs: Com_Google_Openrtb_BidRequest.Imp.Video) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mimes != rhs_storage._mimes {return false}
        if _storage._minduration != rhs_storage._minduration {return false}
        if _storage._maxduration != rhs_storage._maxduration {return false}
        if _storage._startdelay != rhs_storage._startdelay {return false}
        if _storage._maxseq != rhs_storage._maxseq {return false}
        if _storage._poddur != rhs_storage._poddur {return false}
        if _storage._protocols != rhs_storage._protocols {return false}
        if _storage._w != rhs_storage._w {return false}
        if _storage._h != rhs_storage._h {return false}
        if _storage._podid != rhs_storage._podid {return false}
        if _storage._podseq != rhs_storage._podseq {return false}
        if _storage._rqddurs != rhs_storage._rqddurs {return false}
        if _storage._placement != rhs_storage._placement {return false}
        if _storage._plcmt != rhs_storage._plcmt {return false}
        if _storage._linearity != rhs_storage._linearity {return false}
        if _storage._skip != rhs_storage._skip {return false}
        if _storage._skipmin != rhs_storage._skipmin {return false}
        if _storage._skipafter != rhs_storage._skipafter {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._slotinpod != rhs_storage._slotinpod {return false}
        if _storage._mincpmpersec != rhs_storage._mincpmpersec {return false}
        if _storage._battr != rhs_storage._battr {return false}
        if _storage._maxextended != rhs_storage._maxextended {return false}
        if _storage._minbitrate != rhs_storage._minbitrate {return false}
        if _storage._maxbitrate != rhs_storage._maxbitrate {return false}
        if _storage._boxingallowed != rhs_storage._boxingallowed {return false}
        if _storage._playbackmethod != rhs_storage._playbackmethod {return false}
        if _storage._playbackend != rhs_storage._playbackend {return false}
        if _storage._delivery != rhs_storage._delivery {return false}
        if _storage._pos != rhs_storage._pos {return false}
        if _storage._companionad != rhs_storage._companionad {return false}
        if _storage._api != rhs_storage._api {return false}
        if _storage._companiontype != rhs_storage._companiontype {return false}
        if _storage._protocol != rhs_storage._protocol {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Audio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Audio"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mimes"),
    2: .same(proto: "minduration"),
    3: .same(proto: "maxduration"),
    25: .same(proto: "poddur"),
    4: .same(proto: "protocols"),
    5: .same(proto: "startdelay"),
    26: .same(proto: "rqddurs"),
    27: .same(proto: "podid"),
    28: .same(proto: "podseq"),
    6: .same(proto: "sequence"),
    29: .same(proto: "slotinpod"),
    30: .same(proto: "mincpmpersec"),
    7: .same(proto: "battr"),
    8: .same(proto: "maxextended"),
    9: .same(proto: "minbitrate"),
    10: .same(proto: "maxbitrate"),
    11: .same(proto: "delivery"),
    12: .same(proto: "companionad"),
    13: .same(proto: "api"),
    20: .same(proto: "companiontype"),
    21: .same(proto: "maxseq"),
    22: .same(proto: "feed"),
    23: .same(proto: "stitched"),
    24: .same(proto: "nvol"),
  ]

  fileprivate class _StorageClass {
    var _mimes: [String] = []
    var _minduration: Int32? = nil
    var _maxduration: Int32? = nil
    var _poddur: Int32? = nil
    var _protocols: [Com_Google_Openrtb_Protocol] = []
    var _startdelay: Int32? = nil
    var _rqddurs: [Int32] = []
    var _podid: String? = nil
    var _podseq: Com_Google_Openrtb_PodSequence? = nil
    var _sequence: Int32? = nil
    var _slotinpod: Com_Google_Openrtb_SlotPositionInPod? = nil
    var _mincpmpersec: Double? = nil
    var _battr: [Com_Google_Openrtb_CreativeAttribute] = []
    var _maxextended: Int32? = nil
    var _minbitrate: Int32? = nil
    var _maxbitrate: Int32? = nil
    var _delivery: [Com_Google_Openrtb_ContentDeliveryMethod] = []
    var _companionad: [Com_Google_Openrtb_BidRequest.Imp.Banner] = []
    var _api: [Com_Google_Openrtb_APIFramework] = []
    var _companiontype: [Com_Google_Openrtb_CompanionType] = []
    var _maxseq: Int32? = nil
    var _feed: Com_Google_Openrtb_FeedType? = nil
    var _stitched: Bool? = nil
    var _nvol: Com_Google_Openrtb_VolumeNormalizationMode? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _mimes = source._mimes
      _minduration = source._minduration
      _maxduration = source._maxduration
      _poddur = source._poddur
      _protocols = source._protocols
      _startdelay = source._startdelay
      _rqddurs = source._rqddurs
      _podid = source._podid
      _podseq = source._podseq
      _sequence = source._sequence
      _slotinpod = source._slotinpod
      _mincpmpersec = source._mincpmpersec
      _battr = source._battr
      _maxextended = source._maxextended
      _minbitrate = source._minbitrate
      _maxbitrate = source._maxbitrate
      _delivery = source._delivery
      _companionad = source._companionad
      _api = source._api
      _companiontype = source._companiontype
      _maxseq = source._maxseq
      _feed = source._feed
      _stitched = source._stitched
      _nvol = source._nvol
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._companionad) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._mimes) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._minduration) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._maxduration) }()
        case 4: try { try decoder.decodeRepeatedEnumField(value: &_storage._protocols) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._startdelay) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._sequence) }()
        case 7: try { try decoder.decodeRepeatedEnumField(value: &_storage._battr) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._maxextended) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._minbitrate) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._maxbitrate) }()
        case 11: try { try decoder.decodeRepeatedEnumField(value: &_storage._delivery) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._companionad) }()
        case 13: try { try decoder.decodeRepeatedEnumField(value: &_storage._api) }()
        case 20: try { try decoder.decodeRepeatedEnumField(value: &_storage._companiontype) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._maxseq) }()
        case 22: try { try decoder.decodeSingularEnumField(value: &_storage._feed) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._stitched) }()
        case 24: try { try decoder.decodeSingularEnumField(value: &_storage._nvol) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._poddur) }()
        case 26: try { try decoder.decodeRepeatedInt32Field(value: &_storage._rqddurs) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._podid) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._podseq) }()
        case 29: try { try decoder.decodeSingularEnumField(value: &_storage._slotinpod) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._mincpmpersec) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Audio.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._mimes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._mimes, fieldNumber: 1)
      }
      try { if let v = _storage._minduration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._maxduration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      if !_storage._protocols.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._protocols, fieldNumber: 4)
      }
      try { if let v = _storage._startdelay {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sequence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      if !_storage._battr.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._battr, fieldNumber: 7)
      }
      try { if let v = _storage._maxextended {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._minbitrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._maxbitrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      if !_storage._delivery.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._delivery, fieldNumber: 11)
      }
      if !_storage._companionad.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._companionad, fieldNumber: 12)
      }
      if !_storage._api.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._api, fieldNumber: 13)
      }
      if !_storage._companiontype.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._companiontype, fieldNumber: 20)
      }
      try { if let v = _storage._maxseq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._feed {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._stitched {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._nvol {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._poddur {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      if !_storage._rqddurs.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._rqddurs, fieldNumber: 26)
      }
      try { if let v = _storage._podid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._podseq {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._slotinpod {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._mincpmpersec {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 30)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Audio, rhs: Com_Google_Openrtb_BidRequest.Imp.Audio) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mimes != rhs_storage._mimes {return false}
        if _storage._minduration != rhs_storage._minduration {return false}
        if _storage._maxduration != rhs_storage._maxduration {return false}
        if _storage._poddur != rhs_storage._poddur {return false}
        if _storage._protocols != rhs_storage._protocols {return false}
        if _storage._startdelay != rhs_storage._startdelay {return false}
        if _storage._rqddurs != rhs_storage._rqddurs {return false}
        if _storage._podid != rhs_storage._podid {return false}
        if _storage._podseq != rhs_storage._podseq {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._slotinpod != rhs_storage._slotinpod {return false}
        if _storage._mincpmpersec != rhs_storage._mincpmpersec {return false}
        if _storage._battr != rhs_storage._battr {return false}
        if _storage._maxextended != rhs_storage._maxextended {return false}
        if _storage._minbitrate != rhs_storage._minbitrate {return false}
        if _storage._maxbitrate != rhs_storage._maxbitrate {return false}
        if _storage._delivery != rhs_storage._delivery {return false}
        if _storage._companionad != rhs_storage._companionad {return false}
        if _storage._api != rhs_storage._api {return false}
        if _storage._companiontype != rhs_storage._companiontype {return false}
        if _storage._maxseq != rhs_storage._maxseq {return false}
        if _storage._feed != rhs_storage._feed {return false}
        if _storage._stitched != rhs_storage._stitched {return false}
        if _storage._nvol != rhs_storage._nvol {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Pmp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Pmp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_auction"),
    2: .same(proto: "deals"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.deals) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._privateAuction) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.deals) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Pmp.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._privateAuction {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    if !self.deals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deals, fieldNumber: 2)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Pmp, rhs: Com_Google_Openrtb_BidRequest.Imp.Pmp) -> Bool {
    if lhs._privateAuction != rhs._privateAuction {return false}
    if lhs.deals != rhs.deals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Pmp.Deal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.Pmp.protoMessageName + ".Deal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "bidfloor"),
    3: .same(proto: "bidfloorcur"),
    4: .same(proto: "wseat"),
    5: .same(proto: "wadomain"),
    6: .same(proto: "at"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._bidfloor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._bidfloorcur) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.wseat) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.wadomain) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._at) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Pmp.Deal.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._bidfloor {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bidfloorcur {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.wseat.isEmpty {
      try visitor.visitRepeatedStringField(value: self.wseat, fieldNumber: 4)
    }
    if !self.wadomain.isEmpty {
      try visitor.visitRepeatedStringField(value: self.wadomain, fieldNumber: 5)
    }
    try { if let v = self._at {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Pmp.Deal, rhs: Com_Google_Openrtb_BidRequest.Imp.Pmp.Deal) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._bidfloor != rhs._bidfloor {return false}
    if lhs._bidfloorcur != rhs._bidfloorcur {return false}
    if lhs.wseat != rhs.wseat {return false}
    if lhs.wadomain != rhs.wadomain {return false}
    if lhs._at != rhs._at {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Native: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Native"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    50: .standard(proto: "request_native"),
    2: .same(proto: "ver"),
    3: .same(proto: "api"),
    4: .same(proto: "battr"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self.requestOneof, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.requestOneof != nil {try decoder.handleConflictingOneOf()}
          self.requestOneof = .request(v)
        }
      }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._ver) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.api) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.battr) }()
      case 50: try {
        var v: Com_Google_Openrtb_NativeRequest?
        var hadOneofValue = false
        if let current = self.requestOneof {
          hadOneofValue = true
          if case .requestNative(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestOneof = .requestNative(v)
        }
      }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Native.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .request(let v)? = self.requestOneof {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ver {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.api.isEmpty {
      try visitor.visitPackedEnumField(value: self.api, fieldNumber: 3)
    }
    if !self.battr.isEmpty {
      try visitor.visitPackedEnumField(value: self.battr, fieldNumber: 4)
    }
    try { if case .requestNative(let v)? = self.requestOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Native, rhs: Com_Google_Openrtb_BidRequest.Imp.Native) -> Bool {
    if lhs.requestOneof != rhs.requestOneof {return false}
    if lhs._ver != rhs._ver {return false}
    if lhs.api != rhs.api {return false}
    if lhs.battr != rhs.battr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Imp.Metric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Imp.protoMessageName + ".Metric"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
    3: .same(proto: "vendor"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._vendor) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Imp.Metric.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._vendor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Imp.Metric, rhs: Com_Google_Openrtb_BidRequest.Imp.Metric) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._value != rhs._value {return false}
    if lhs._vendor != rhs._vendor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Publisher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Publisher"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    5: .same(proto: "cattax"),
    3: .same(proto: "cat"),
    4: .same(proto: "domain"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.cat) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._domain) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._cattax) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Publisher.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.cat.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cat, fieldNumber: 3)
    }
    try { if let v = self._domain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._cattax {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Publisher, rhs: Com_Google_Openrtb_BidRequest.Publisher) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._cattax != rhs._cattax {return false}
    if lhs.cat != rhs.cat {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Content"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "episode"),
    3: .same(proto: "title"),
    4: .same(proto: "series"),
    5: .same(proto: "season"),
    21: .same(proto: "artist"),
    22: .same(proto: "genre"),
    23: .same(proto: "album"),
    24: .same(proto: "isrc"),
    15: .same(proto: "producer"),
    6: .same(proto: "url"),
    27: .same(proto: "cattax"),
    7: .same(proto: "cat"),
    25: .same(proto: "prodq"),
    20: .same(proto: "context"),
    10: .same(proto: "contentrating"),
    11: .same(proto: "userrating"),
    17: .same(proto: "qagmediarating"),
    9: .same(proto: "keywords"),
    13: .same(proto: "livestream"),
    14: .same(proto: "sourcerelationship"),
    16: .same(proto: "len"),
    19: .same(proto: "language"),
    29: .same(proto: "langb"),
    18: .same(proto: "embeddable"),
    28: .same(proto: "data"),
    30: .same(proto: "network"),
    31: .same(proto: "channel"),
    8: .same(proto: "videoquality"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _episode: Int32? = nil
    var _title: String? = nil
    var _series: String? = nil
    var _season: String? = nil
    var _artist: String? = nil
    var _genre: String? = nil
    var _album: String? = nil
    var _isrc: String? = nil
    var _producer: Com_Google_Openrtb_BidRequest.Content.Producer? = nil
    var _url: String? = nil
    var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    var _cat: [String] = []
    var _prodq: Com_Google_Openrtb_ProductionQuality? = nil
    var _context: Com_Google_Openrtb_ContentContext? = nil
    var _contentrating: String? = nil
    var _userrating: String? = nil
    var _qagmediarating: Com_Google_Openrtb_QAGMediaRating? = nil
    var _keywords: String? = nil
    var _livestream: Bool? = nil
    var _sourcerelationship: Bool? = nil
    var _len: Int32? = nil
    var _language: String? = nil
    var _langb: String? = nil
    var _embeddable: Bool? = nil
    var _data: [Com_Google_Openrtb_BidRequest.DataMessage] = []
    var _network: Com_Google_Openrtb_BidRequest.Content.Network? = nil
    var _channel: Com_Google_Openrtb_BidRequest.Content.Channel? = nil
    var _videoquality: Com_Google_Openrtb_ProductionQuality? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _episode = source._episode
      _title = source._title
      _series = source._series
      _season = source._season
      _artist = source._artist
      _genre = source._genre
      _album = source._album
      _isrc = source._isrc
      _producer = source._producer
      _url = source._url
      _cattax = source._cattax
      _cat = source._cat
      _prodq = source._prodq
      _context = source._context
      _contentrating = source._contentrating
      _userrating = source._userrating
      _qagmediarating = source._qagmediarating
      _keywords = source._keywords
      _livestream = source._livestream
      _sourcerelationship = source._sourcerelationship
      _len = source._len
      _language = source._language
      _langb = source._langb
      _embeddable = source._embeddable
      _data = source._data
      _network = source._network
      _channel = source._channel
      _videoquality = source._videoquality
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._producer, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._data) {return false}
      if let v = _storage._network, !v.isInitialized {return false}
      if let v = _storage._channel, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._episode) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._series) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._season) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._cat) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._videoquality) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._keywords) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._contentrating) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._userrating) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._livestream) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._sourcerelationship) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._producer) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._len) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._qagmediarating) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._embeddable) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._context) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._artist) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._genre) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._album) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._isrc) }()
        case 25: try { try decoder.decodeSingularEnumField(value: &_storage._prodq) }()
        case 27: try { try decoder.decodeSingularEnumField(value: &_storage._cattax) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._data) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._langb) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._network) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._channel) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Content.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._episode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._series {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._season {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      if !_storage._cat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._cat, fieldNumber: 7)
      }
      try { if let v = _storage._videoquality {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._keywords {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._contentrating {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._userrating {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._livestream {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._sourcerelationship {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._producer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._len {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._qagmediarating {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._embeddable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._context {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._artist {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._genre {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._album {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._isrc {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._prodq {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._cattax {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 27)
      } }()
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 28)
      }
      try { if let v = _storage._langb {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._network {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Content, rhs: Com_Google_Openrtb_BidRequest.Content) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._episode != rhs_storage._episode {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._series != rhs_storage._series {return false}
        if _storage._season != rhs_storage._season {return false}
        if _storage._artist != rhs_storage._artist {return false}
        if _storage._genre != rhs_storage._genre {return false}
        if _storage._album != rhs_storage._album {return false}
        if _storage._isrc != rhs_storage._isrc {return false}
        if _storage._producer != rhs_storage._producer {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._cattax != rhs_storage._cattax {return false}
        if _storage._cat != rhs_storage._cat {return false}
        if _storage._prodq != rhs_storage._prodq {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._contentrating != rhs_storage._contentrating {return false}
        if _storage._userrating != rhs_storage._userrating {return false}
        if _storage._qagmediarating != rhs_storage._qagmediarating {return false}
        if _storage._keywords != rhs_storage._keywords {return false}
        if _storage._livestream != rhs_storage._livestream {return false}
        if _storage._sourcerelationship != rhs_storage._sourcerelationship {return false}
        if _storage._len != rhs_storage._len {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._langb != rhs_storage._langb {return false}
        if _storage._embeddable != rhs_storage._embeddable {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._network != rhs_storage._network {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._videoquality != rhs_storage._videoquality {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Content.Producer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Content.protoMessageName + ".Producer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    5: .same(proto: "cattax"),
    3: .same(proto: "cat"),
    4: .same(proto: "domain"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.cat) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._domain) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._cattax) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Content.Producer.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.cat.isEmpty {
      try visitor.visitRepeatedStringField(value: self.cat, fieldNumber: 3)
    }
    try { if let v = self._domain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._cattax {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Content.Producer, rhs: Com_Google_Openrtb_BidRequest.Content.Producer) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._cattax != rhs._cattax {return false}
    if lhs.cat != rhs.cat {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Content.Network: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Content.protoMessageName + ".Network"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "domain"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._domain) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Content.Network.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._domain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Content.Network, rhs: Com_Google_Openrtb_BidRequest.Content.Network) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Content.Channel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Content.protoMessageName + ".Channel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "domain"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._domain) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Content.Channel.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._domain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Content.Channel, rhs: Com_Google_Openrtb_BidRequest.Content.Channel) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Site: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Site"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "domain"),
    16: .same(proto: "cattax"),
    4: .same(proto: "cat"),
    5: .same(proto: "sectioncat"),
    6: .same(proto: "pagecat"),
    7: .same(proto: "page"),
    8: .same(proto: "privacypolicy"),
    9: .same(proto: "ref"),
    10: .same(proto: "search"),
    11: .same(proto: "publisher"),
    12: .same(proto: "content"),
    13: .same(proto: "keywords"),
    15: .same(proto: "mobile"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _name: String? = nil
    var _domain: String? = nil
    var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    var _cat: [String] = []
    var _sectioncat: [String] = []
    var _pagecat: [String] = []
    var _page: String? = nil
    var _privacypolicy: Bool? = nil
    var _ref: String? = nil
    var _search: String? = nil
    var _publisher: Com_Google_Openrtb_BidRequest.Publisher? = nil
    var _content: Com_Google_Openrtb_BidRequest.Content? = nil
    var _keywords: String? = nil
    var _mobile: Bool? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _domain = source._domain
      _cattax = source._cattax
      _cat = source._cat
      _sectioncat = source._sectioncat
      _pagecat = source._pagecat
      _page = source._page
      _privacypolicy = source._privacypolicy
      _ref = source._ref
      _search = source._search
      _publisher = source._publisher
      _content = source._content
      _keywords = source._keywords
      _mobile = source._mobile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._publisher, !v.isInitialized {return false}
      if let v = _storage._content, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._domain) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._cat) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._sectioncat) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._pagecat) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._page) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._privacypolicy) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._ref) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._search) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._publisher) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._content) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._keywords) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._mobile) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._cattax) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Site.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._domain {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      if !_storage._cat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._cat, fieldNumber: 4)
      }
      if !_storage._sectioncat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._sectioncat, fieldNumber: 5)
      }
      if !_storage._pagecat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._pagecat, fieldNumber: 6)
      }
      try { if let v = _storage._page {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._privacypolicy {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._ref {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._search {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._publisher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._keywords {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._mobile {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._cattax {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Site, rhs: Com_Google_Openrtb_BidRequest.Site) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._cattax != rhs_storage._cattax {return false}
        if _storage._cat != rhs_storage._cat {return false}
        if _storage._sectioncat != rhs_storage._sectioncat {return false}
        if _storage._pagecat != rhs_storage._pagecat {return false}
        if _storage._page != rhs_storage._page {return false}
        if _storage._privacypolicy != rhs_storage._privacypolicy {return false}
        if _storage._ref != rhs_storage._ref {return false}
        if _storage._search != rhs_storage._search {return false}
        if _storage._publisher != rhs_storage._publisher {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._keywords != rhs_storage._keywords {return false}
        if _storage._mobile != rhs_storage._mobile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.App: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".App"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "domain"),
    17: .same(proto: "cattax"),
    4: .same(proto: "cat"),
    5: .same(proto: "sectioncat"),
    6: .same(proto: "pagecat"),
    7: .same(proto: "ver"),
    8: .same(proto: "bundle"),
    9: .same(proto: "privacypolicy"),
    10: .same(proto: "paid"),
    11: .same(proto: "publisher"),
    12: .same(proto: "content"),
    13: .same(proto: "keywords"),
    16: .same(proto: "storeurl"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _name: String? = nil
    var _domain: String? = nil
    var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    var _cat: [String] = []
    var _sectioncat: [String] = []
    var _pagecat: [String] = []
    var _ver: String? = nil
    var _bundle: String? = nil
    var _privacypolicy: Bool? = nil
    var _paid: Bool? = nil
    var _publisher: Com_Google_Openrtb_BidRequest.Publisher? = nil
    var _content: Com_Google_Openrtb_BidRequest.Content? = nil
    var _keywords: String? = nil
    var _storeurl: String? = nil
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _domain = source._domain
      _cattax = source._cattax
      _cat = source._cat
      _sectioncat = source._sectioncat
      _pagecat = source._pagecat
      _ver = source._ver
      _bundle = source._bundle
      _privacypolicy = source._privacypolicy
      _paid = source._paid
      _publisher = source._publisher
      _content = source._content
      _keywords = source._keywords
      _storeurl = source._storeurl
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._publisher, !v.isInitialized {return false}
      if let v = _storage._content, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._domain) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._cat) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._sectioncat) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._pagecat) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._ver) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._bundle) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._privacypolicy) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._paid) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._publisher) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._content) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._keywords) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._storeurl) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._cattax) }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.App.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._domain {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      if !_storage._cat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._cat, fieldNumber: 4)
      }
      if !_storage._sectioncat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._sectioncat, fieldNumber: 5)
      }
      if !_storage._pagecat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._pagecat, fieldNumber: 6)
      }
      try { if let v = _storage._ver {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._bundle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._privacypolicy {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._paid {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._publisher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._keywords {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._storeurl {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._cattax {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.App, rhs: Com_Google_Openrtb_BidRequest.App) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._cattax != rhs_storage._cattax {return false}
        if _storage._cat != rhs_storage._cat {return false}
        if _storage._sectioncat != rhs_storage._sectioncat {return false}
        if _storage._pagecat != rhs_storage._pagecat {return false}
        if _storage._ver != rhs_storage._ver {return false}
        if _storage._bundle != rhs_storage._bundle {return false}
        if _storage._privacypolicy != rhs_storage._privacypolicy {return false}
        if _storage._paid != rhs_storage._paid {return false}
        if _storage._publisher != rhs_storage._publisher {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._keywords != rhs_storage._keywords {return false}
        if _storage._storeurl != rhs_storage._storeurl {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Geo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Geo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "lon"),
    3: .same(proto: "country"),
    4: .same(proto: "region"),
    5: .same(proto: "regionfips104"),
    6: .same(proto: "metro"),
    7: .same(proto: "city"),
    8: .same(proto: "zip"),
    9: .same(proto: "type"),
    11: .same(proto: "accuracy"),
    12: .same(proto: "lastfix"),
    13: .same(proto: "ipservice"),
    10: .same(proto: "utcoffset"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._lat) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._lon) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._country) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._region) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._regionfips104) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._metro) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._city) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._zip) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._utcoffset) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self._accuracy) }()
      case 12: try { try decoder.decodeSingularInt32Field(value: &self._lastfix) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self._ipservice) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Geo.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._lat {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lon {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._country {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._region {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._regionfips104 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._metro {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._city {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._zip {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._utcoffset {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._accuracy {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._lastfix {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._ipservice {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Geo, rhs: Com_Google_Openrtb_BidRequest.Geo) -> Bool {
    if lhs._lat != rhs._lat {return false}
    if lhs._lon != rhs._lon {return false}
    if lhs._country != rhs._country {return false}
    if lhs._region != rhs._region {return false}
    if lhs._regionfips104 != rhs._regionfips104 {return false}
    if lhs._metro != rhs._metro {return false}
    if lhs._city != rhs._city {return false}
    if lhs._zip != rhs._zip {return false}
    if lhs._type != rhs._type {return false}
    if lhs._accuracy != rhs._accuracy {return false}
    if lhs._lastfix != rhs._lastfix {return false}
    if lhs._ipservice != rhs._ipservice {return false}
    if lhs._utcoffset != rhs._utcoffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Device"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "geo"),
    1: .same(proto: "dnt"),
    23: .same(proto: "lmt"),
    2: .same(proto: "ua"),
    31: .same(proto: "sua"),
    3: .same(proto: "ip"),
    9: .same(proto: "ipv6"),
    18: .same(proto: "devicetype"),
    12: .same(proto: "make"),
    13: .same(proto: "model"),
    14: .same(proto: "os"),
    15: .same(proto: "osv"),
    24: .same(proto: "hwv"),
    25: .same(proto: "w"),
    26: .same(proto: "h"),
    27: .same(proto: "ppi"),
    28: .same(proto: "pxratio"),
    16: .same(proto: "js"),
    29: .same(proto: "geofetch"),
    19: .same(proto: "flashver"),
    11: .same(proto: "language"),
    32: .same(proto: "langb"),
    10: .same(proto: "carrier"),
    30: .same(proto: "mccmnc"),
    17: .same(proto: "connectiontype"),
    20: .same(proto: "ifa"),
    5: .same(proto: "didsha1"),
    6: .same(proto: "didmd5"),
    7: .same(proto: "dpidsha1"),
    8: .same(proto: "dpidmd5"),
    21: .same(proto: "macsha1"),
    22: .same(proto: "macmd5"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _geo: Com_Google_Openrtb_BidRequest.Geo? = nil
    var _dnt: Bool? = nil
    var _lmt: Bool? = nil
    var _ua: String? = nil
    var _sua: Com_Google_Openrtb_BidRequest.Device.UserAgent? = nil
    var _ip: String? = nil
    var _ipv6: String? = nil
    var _devicetype: Com_Google_Openrtb_DeviceType? = nil
    var _make: String? = nil
    var _model: String? = nil
    var _os: String? = nil
    var _osv: String? = nil
    var _hwv: String? = nil
    var _w: Int32? = nil
    var _h: Int32? = nil
    var _ppi: Int32? = nil
    var _pxratio: Double? = nil
    var _js: Bool? = nil
    var _geofetch: Bool? = nil
    var _flashver: String? = nil
    var _language: String? = nil
    var _langb: String? = nil
    var _carrier: String? = nil
    var _mccmnc: String? = nil
    var _connectiontype: Com_Google_Openrtb_ConnectionType? = nil
    var _ifa: String? = nil
    var _didsha1: String? = nil
    var _didmd5: String? = nil
    var _dpidsha1: String? = nil
    var _dpidmd5: String? = nil
    var _macsha1: String? = nil
    var _macmd5: String? = nil
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _geo = source._geo
      _dnt = source._dnt
      _lmt = source._lmt
      _ua = source._ua
      _sua = source._sua
      _ip = source._ip
      _ipv6 = source._ipv6
      _devicetype = source._devicetype
      _make = source._make
      _model = source._model
      _os = source._os
      _osv = source._osv
      _hwv = source._hwv
      _w = source._w
      _h = source._h
      _ppi = source._ppi
      _pxratio = source._pxratio
      _js = source._js
      _geofetch = source._geofetch
      _flashver = source._flashver
      _language = source._language
      _langb = source._langb
      _carrier = source._carrier
      _mccmnc = source._mccmnc
      _connectiontype = source._connectiontype
      _ifa = source._ifa
      _didsha1 = source._didsha1
      _didmd5 = source._didmd5
      _dpidsha1 = source._dpidsha1
      _dpidmd5 = source._dpidmd5
      _macsha1 = source._macsha1
      _macmd5 = source._macmd5
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._geo, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._dnt) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._ua) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ip) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._geo) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._didsha1) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._didmd5) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._dpidsha1) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._dpidmd5) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._ipv6) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._carrier) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._make) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._model) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._os) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._osv) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._js) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._connectiontype) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._devicetype) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._flashver) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._ifa) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._macsha1) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._macmd5) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._lmt) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._hwv) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._w) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._h) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._ppi) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._pxratio) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._geofetch) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._mccmnc) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._sua) }()
        case 32: try { try decoder.decodeSingularStringField(value: &_storage._langb) }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Device.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._dnt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._ua {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ip {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._geo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._didsha1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._didmd5 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._dpidsha1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._dpidmd5 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._ipv6 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._carrier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._make {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._model {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._os {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._osv {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._js {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._connectiontype {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._devicetype {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._flashver {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._ifa {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._macsha1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._macmd5 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._lmt {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._hwv {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._w {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._h {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._ppi {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._pxratio {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._geofetch {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._mccmnc {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._sua {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._langb {
        try visitor.visitSingularStringField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Device, rhs: Com_Google_Openrtb_BidRequest.Device) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._geo != rhs_storage._geo {return false}
        if _storage._dnt != rhs_storage._dnt {return false}
        if _storage._lmt != rhs_storage._lmt {return false}
        if _storage._ua != rhs_storage._ua {return false}
        if _storage._sua != rhs_storage._sua {return false}
        if _storage._ip != rhs_storage._ip {return false}
        if _storage._ipv6 != rhs_storage._ipv6 {return false}
        if _storage._devicetype != rhs_storage._devicetype {return false}
        if _storage._make != rhs_storage._make {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._osv != rhs_storage._osv {return false}
        if _storage._hwv != rhs_storage._hwv {return false}
        if _storage._w != rhs_storage._w {return false}
        if _storage._h != rhs_storage._h {return false}
        if _storage._ppi != rhs_storage._ppi {return false}
        if _storage._pxratio != rhs_storage._pxratio {return false}
        if _storage._js != rhs_storage._js {return false}
        if _storage._geofetch != rhs_storage._geofetch {return false}
        if _storage._flashver != rhs_storage._flashver {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._langb != rhs_storage._langb {return false}
        if _storage._carrier != rhs_storage._carrier {return false}
        if _storage._mccmnc != rhs_storage._mccmnc {return false}
        if _storage._connectiontype != rhs_storage._connectiontype {return false}
        if _storage._ifa != rhs_storage._ifa {return false}
        if _storage._didsha1 != rhs_storage._didsha1 {return false}
        if _storage._didmd5 != rhs_storage._didmd5 {return false}
        if _storage._dpidsha1 != rhs_storage._dpidsha1 {return false}
        if _storage._dpidmd5 != rhs_storage._dpidmd5 {return false}
        if _storage._macsha1 != rhs_storage._macsha1 {return false}
        if _storage._macmd5 != rhs_storage._macmd5 {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Device.UserAgent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Device.protoMessageName + ".UserAgent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "browsers"),
    2: .same(proto: "platform"),
    3: .same(proto: "mobile"),
    4: .same(proto: "architecture"),
    5: .same(proto: "bitness"),
    6: .same(proto: "model"),
    7: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.browsers) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._platform) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._mobile) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._architecture) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._bitness) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self._source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.browsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.browsers, fieldNumber: 1)
    }
    try { if let v = self._platform {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._mobile {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._architecture {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._bitness {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._source {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Device.UserAgent, rhs: Com_Google_Openrtb_BidRequest.Device.UserAgent) -> Bool {
    if lhs.browsers != rhs.browsers {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._mobile != rhs._mobile {return false}
    if lhs._architecture != rhs._architecture {return false}
    if lhs._bitness != rhs._bitness {return false}
    if lhs._model != rhs._model {return false}
    if lhs._source != rhs._source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Device.UserAgent.protoMessageName + ".BrandVersion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "brand"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._brand) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._brand {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.version.isEmpty {
      try visitor.visitRepeatedStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion, rhs: Com_Google_Openrtb_BidRequest.Device.UserAgent.BrandVersion) -> Bool {
    if lhs._brand != rhs._brand {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Regs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Regs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coppa"),
    2: .same(proto: "gpp"),
    3: .standard(proto: "gpp_sid"),
    90: .same(proto: "ext"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._coppa) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._gpp) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.gppSid) }()
      case 90: try { try decoder.decodeSingularStringField(value: &self._ext) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Regs.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._coppa {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._gpp {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.gppSid.isEmpty {
      try visitor.visitPackedEnumField(value: self.gppSid, fieldNumber: 3)
    }
    try { if let v = self._ext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 90)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Regs, rhs: Com_Google_Openrtb_BidRequest.Regs) -> Bool {
    if lhs._coppa != rhs._coppa {return false}
    if lhs._gpp != rhs._gpp {return false}
    if lhs.gppSid != rhs.gppSid {return false}
    if lhs._ext != rhs._ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Regs.GppSectionId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TCFEUV1"),
    2: .same(proto: "TCFEUV2"),
    3: .same(proto: "GPP_HEADER"),
    4: .same(proto: "GPP_SIGNAL"),
    5: .same(proto: "TCFCA"),
    6: .same(proto: "USPV1"),
    7: .same(proto: "USNAT"),
    8: .same(proto: "USCA"),
    9: .same(proto: "USVA"),
    10: .same(proto: "USCO"),
    11: .same(proto: "USUT"),
    12: .same(proto: "USCT"),
  ]
}

extension Com_Google_Openrtb_BidRequest.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "segment"),
    90: .same(proto: "ext"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.segment) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.segment) }()
      case 90: try { try decoder.decodeSingularStringField(value: &self._ext) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.DataMessage.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.segment.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segment, fieldNumber: 3)
    }
    try { if let v = self._ext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 90)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.DataMessage, rhs: Com_Google_Openrtb_BidRequest.DataMessage) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs.segment != rhs.segment {return false}
    if lhs._ext != rhs._ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.DataMessage.Segment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.DataMessage.protoMessageName + ".Segment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.DataMessage.Segment.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.DataMessage.Segment, rhs: Com_Google_Openrtb_BidRequest.DataMessage.Segment) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "buyeruid"),
    3: .same(proto: "yob"),
    4: .same(proto: "gender"),
    5: .same(proto: "keywords"),
    9: .same(proto: "kwarray"),
    6: .same(proto: "customdata"),
    7: .same(proto: "geo"),
    8: .same(proto: "data"),
    10: .same(proto: "consent"),
    11: .same(proto: "eids"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _buyeruid: String? = nil
    var _yob: Int32? = nil
    var _gender: String? = nil
    var _keywords: String? = nil
    var _kwarray: [String] = []
    var _customdata: String? = nil
    var _geo: Com_Google_Openrtb_BidRequest.Geo? = nil
    var _data: [Com_Google_Openrtb_BidRequest.DataMessage] = []
    var _consent: String? = nil
    var _eids: [Com_Google_Openrtb_BidRequest.User.EID] = []
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _buyeruid = source._buyeruid
      _yob = source._yob
      _gender = source._gender
      _keywords = source._keywords
      _kwarray = source._kwarray
      _customdata = source._customdata
      _geo = source._geo
      _data = source._data
      _consent = source._consent
      _eids = source._eids
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._geo, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._data) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._eids) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._buyeruid) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._yob) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._gender) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._keywords) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._customdata) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._geo) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._data) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._kwarray) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._consent) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._eids) }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.User.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._buyeruid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._yob {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._gender {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._keywords {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._customdata {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._geo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 8)
      }
      if !_storage._kwarray.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._kwarray, fieldNumber: 9)
      }
      try { if let v = _storage._consent {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      if !_storage._eids.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._eids, fieldNumber: 11)
      }
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.User, rhs: Com_Google_Openrtb_BidRequest.User) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._buyeruid != rhs_storage._buyeruid {return false}
        if _storage._yob != rhs_storage._yob {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._keywords != rhs_storage._keywords {return false}
        if _storage._kwarray != rhs_storage._kwarray {return false}
        if _storage._customdata != rhs_storage._customdata {return false}
        if _storage._geo != rhs_storage._geo {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._consent != rhs_storage._consent {return false}
        if _storage._eids != rhs_storage._eids {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.User.EID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.User.protoMessageName + ".EID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "uids"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.uids) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._source) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.uids) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.User.EID.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._source {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.uids.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.uids, fieldNumber: 2)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.User.EID, rhs: Com_Google_Openrtb_BidRequest.User.EID) -> Bool {
    if lhs._source != rhs._source {return false}
    if lhs.uids != rhs.uids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.User.EID.UID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.User.EID.protoMessageName + ".UID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "atype"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._atype) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.User.EID.UID.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._atype {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.User.EID.UID, rhs: Com_Google_Openrtb_BidRequest.User.EID.UID) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._atype != rhs._atype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Source: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.protoMessageName + ".Source"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fd"),
    2: .same(proto: "tid"),
    3: .same(proto: "pchain"),
    4: .same(proto: "schain"),
    90: .same(proto: "ext"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._schain, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._fd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._tid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._pchain) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._schain) }()
      case 90: try { try decoder.decodeSingularStringField(value: &self._ext) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Source.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fd {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pchain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._schain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._ext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 90)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Source, rhs: Com_Google_Openrtb_BidRequest.Source) -> Bool {
    if lhs._fd != rhs._fd {return false}
    if lhs._tid != rhs._tid {return false}
    if lhs._pchain != rhs._pchain {return false}
    if lhs._schain != rhs._schain {return false}
    if lhs._ext != rhs._ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Source.SupplyChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Source.protoMessageName + ".SupplyChain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "complete"),
    2: .same(proto: "nodes"),
    3: .same(proto: "ver"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nodes) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._complete) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nodes) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._ver) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Source.SupplyChain.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._complete {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 2)
    }
    try { if let v = self._ver {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Source.SupplyChain, rhs: Com_Google_Openrtb_BidRequest.Source.SupplyChain) -> Bool {
    if lhs._complete != rhs._complete {return false}
    if lhs.nodes != rhs.nodes {return false}
    if lhs._ver != rhs._ver {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidRequest.Source.SupplyChain.SupplyChainNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidRequest.Source.SupplyChain.protoMessageName + ".SupplyChainNode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asi"),
    2: .same(proto: "sid"),
    3: .same(proto: "rid"),
    4: .same(proto: "name"),
    5: .same(proto: "domain"),
    6: .same(proto: "hp"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._asi) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._sid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._rid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._domain) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._hp) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidRequest.Source.SupplyChain.SupplyChainNode.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._asi {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._domain {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._hp {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidRequest.Source.SupplyChain.SupplyChainNode, rhs: Com_Google_Openrtb_BidRequest.Source.SupplyChain.SupplyChainNode) -> Bool {
    if lhs._asi != rhs._asi {return false}
    if lhs._sid != rhs._sid {return false}
    if lhs._rid != rhs._rid {return false}
    if lhs._name != rhs._name {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs._hp != rhs._hp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BidResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "seatbid"),
    3: .same(proto: "bidid"),
    4: .same(proto: "cur"),
    5: .same(proto: "customdata"),
    6: .same(proto: "nbr"),
    90: .same(proto: "ext"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._id == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.seatbid) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.seatbid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._bidid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._cur) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._customdata) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._nbr) }()
      case 90: try { try decoder.decodeSingularStringField(value: &self._ext) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidResponse.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.seatbid.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seatbid, fieldNumber: 2)
    }
    try { if let v = self._bidid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._cur {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._customdata {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._nbr {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._ext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 90)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidResponse, rhs: Com_Google_Openrtb_BidResponse) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.seatbid != rhs.seatbid {return false}
    if lhs._bidid != rhs._bidid {return false}
    if lhs._cur != rhs._cur {return false}
    if lhs._customdata != rhs._customdata {return false}
    if lhs._nbr != rhs._nbr {return false}
    if lhs._ext != rhs._ext {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidResponse.SeatBid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidResponse.protoMessageName + ".SeatBid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bid"),
    2: .same(proto: "seat"),
    3: .same(proto: "group"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.bid) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.bid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._seat) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._group) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidResponse.SeatBid.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bid.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bid, fieldNumber: 1)
    }
    try { if let v = self._seat {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._group {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidResponse.SeatBid, rhs: Com_Google_Openrtb_BidResponse.SeatBid) -> Bool {
    if lhs.bid != rhs.bid {return false}
    if lhs._seat != rhs._seat {return false}
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_BidResponse.SeatBid.Bid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_BidResponse.SeatBid.protoMessageName + ".Bid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    6: .same(proto: "adm"),
    50: .standard(proto: "adm_native"),
    1: .same(proto: "id"),
    2: .same(proto: "impid"),
    3: .same(proto: "price"),
    5: .same(proto: "nurl"),
    22: .same(proto: "burl"),
    23: .same(proto: "lurl"),
    4: .same(proto: "adid"),
    7: .same(proto: "adomain"),
    14: .same(proto: "bundle"),
    8: .same(proto: "iurl"),
    9: .same(proto: "cid"),
    10: .same(proto: "crid"),
    24: .same(proto: "tactic"),
    30: .same(proto: "cattax"),
    15: .same(proto: "cat"),
    11: .same(proto: "attr"),
    31: .same(proto: "apis"),
    18: .same(proto: "api"),
    19: .same(proto: "protocol"),
    20: .same(proto: "qagmediarating"),
    25: .same(proto: "language"),
    29: .same(proto: "langb"),
    13: .same(proto: "dealid"),
    16: .same(proto: "w"),
    17: .same(proto: "h"),
    26: .same(proto: "wratio"),
    27: .same(proto: "hratio"),
    21: .same(proto: "exp"),
    32: .same(proto: "dur"),
    28: .same(proto: "slotinpod"),
    33: .same(proto: "mtype"),
    90: .same(proto: "ext"),
  ]

  fileprivate class _StorageClass {
    var _admOneof: Com_Google_Openrtb_BidResponse.SeatBid.Bid.OneOf_AdmOneof?
    var _id: String? = nil
    var _impid: String? = nil
    var _price: Double? = nil
    var _nurl: String? = nil
    var _burl: String? = nil
    var _lurl: String? = nil
    var _adid: String? = nil
    var _adomain: [String] = []
    var _bundle: String? = nil
    var _iurl: String? = nil
    var _cid: String? = nil
    var _crid: String? = nil
    var _tactic: String? = nil
    var _cattax: Com_Google_Openrtb_CategoryTaxonomy? = nil
    var _cat: [String] = []
    var _attr: [Com_Google_Openrtb_CreativeAttribute] = []
    var _apis: [Com_Google_Openrtb_APIFramework] = []
    var _api: Com_Google_Openrtb_APIFramework? = nil
    var _protocol: Com_Google_Openrtb_Protocol? = nil
    var _qagmediarating: Com_Google_Openrtb_QAGMediaRating? = nil
    var _language: String? = nil
    var _langb: String? = nil
    var _dealid: String? = nil
    var _w: Int32? = nil
    var _h: Int32? = nil
    var _wratio: Int32? = nil
    var _hratio: Int32? = nil
    var _exp: Int32? = nil
    var _dur: Int32? = nil
    var _slotinpod: Com_Google_Openrtb_SlotPositionInPod? = nil
    var _mtype: Com_Google_Openrtb_CreativeMarkupType? = nil
    var _ext: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _admOneof = source._admOneof
      _id = source._id
      _impid = source._impid
      _price = source._price
      _nurl = source._nurl
      _burl = source._burl
      _lurl = source._lurl
      _adid = source._adid
      _adomain = source._adomain
      _bundle = source._bundle
      _iurl = source._iurl
      _cid = source._cid
      _crid = source._crid
      _tactic = source._tactic
      _cattax = source._cattax
      _cat = source._cat
      _attr = source._attr
      _apis = source._apis
      _api = source._api
      _protocol = source._protocol
      _qagmediarating = source._qagmediarating
      _language = source._language
      _langb = source._langb
      _dealid = source._dealid
      _w = source._w
      _h = source._h
      _wratio = source._wratio
      _hratio = source._hratio
      _exp = source._exp
      _dur = source._dur
      _slotinpod = source._slotinpod
      _mtype = source._mtype
      _ext = source._ext
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._impid == nil {return false}
      if _storage._price == nil {return false}
      if let v = _storage._admOneof, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._impid) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._price) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._adid) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._nurl) }()
        case 6: try {
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {
            if _storage._admOneof != nil {try decoder.handleConflictingOneOf()}
            _storage._admOneof = .adm(v)
          }
        }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._adomain) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._iurl) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._cid) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._crid) }()
        case 11: try { try decoder.decodeRepeatedEnumField(value: &_storage._attr) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._dealid) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._bundle) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._cat) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._w) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._h) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._api) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._protocol) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._qagmediarating) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._exp) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._burl) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._lurl) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._tactic) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._wratio) }()
        case 27: try { try decoder.decodeSingularInt32Field(value: &_storage._hratio) }()
        case 28: try { try decoder.decodeSingularEnumField(value: &_storage._slotinpod) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._langb) }()
        case 30: try { try decoder.decodeSingularEnumField(value: &_storage._cattax) }()
        case 31: try { try decoder.decodeRepeatedEnumField(value: &_storage._apis) }()
        case 32: try { try decoder.decodeSingularInt32Field(value: &_storage._dur) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._mtype) }()
        case 50: try {
          var v: Com_Google_Openrtb_NativeResponse?
          var hadOneofValue = false
          if let current = _storage._admOneof {
            hadOneofValue = true
            if case .admNative(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._admOneof = .admNative(v)
          }
        }()
        case 90: try { try decoder.decodeSingularStringField(value: &_storage._ext) }()
        case 100..<10000:
          try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_BidResponse.SeatBid.Bid.self, fieldNumber: fieldNumber) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._impid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._price {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._adid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._nurl {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if case .adm(let v)? = _storage._admOneof {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      if !_storage._adomain.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._adomain, fieldNumber: 7)
      }
      try { if let v = _storage._iurl {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._cid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._crid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      if !_storage._attr.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._attr, fieldNumber: 11)
      }
      try { if let v = _storage._dealid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._bundle {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      if !_storage._cat.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._cat, fieldNumber: 15)
      }
      try { if let v = _storage._w {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._h {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._api {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._protocol {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._qagmediarating {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._exp {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._burl {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._lurl {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._tactic {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._wratio {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._hratio {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._slotinpod {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._langb {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._cattax {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 30)
      } }()
      if !_storage._apis.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._apis, fieldNumber: 31)
      }
      try { if let v = _storage._dur {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._mtype {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 33)
      } }()
      try { if case .admNative(let v)? = _storage._admOneof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._ext {
        try visitor.visitSingularStringField(value: v, fieldNumber: 90)
      } }()
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_BidResponse.SeatBid.Bid, rhs: Com_Google_Openrtb_BidResponse.SeatBid.Bid) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._admOneof != rhs_storage._admOneof {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._impid != rhs_storage._impid {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._nurl != rhs_storage._nurl {return false}
        if _storage._burl != rhs_storage._burl {return false}
        if _storage._lurl != rhs_storage._lurl {return false}
        if _storage._adid != rhs_storage._adid {return false}
        if _storage._adomain != rhs_storage._adomain {return false}
        if _storage._bundle != rhs_storage._bundle {return false}
        if _storage._iurl != rhs_storage._iurl {return false}
        if _storage._cid != rhs_storage._cid {return false}
        if _storage._crid != rhs_storage._crid {return false}
        if _storage._tactic != rhs_storage._tactic {return false}
        if _storage._cattax != rhs_storage._cattax {return false}
        if _storage._cat != rhs_storage._cat {return false}
        if _storage._attr != rhs_storage._attr {return false}
        if _storage._apis != rhs_storage._apis {return false}
        if _storage._api != rhs_storage._api {return false}
        if _storage._protocol != rhs_storage._protocol {return false}
        if _storage._qagmediarating != rhs_storage._qagmediarating {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._langb != rhs_storage._langb {return false}
        if _storage._dealid != rhs_storage._dealid {return false}
        if _storage._w != rhs_storage._w {return false}
        if _storage._h != rhs_storage._h {return false}
        if _storage._wratio != rhs_storage._wratio {return false}
        if _storage._hratio != rhs_storage._hratio {return false}
        if _storage._exp != rhs_storage._exp {return false}
        if _storage._dur != rhs_storage._dur {return false}
        if _storage._slotinpod != rhs_storage._slotinpod {return false}
        if _storage._mtype != rhs_storage._mtype {return false}
        if _storage._ext != rhs_storage._ext {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NativeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ver"),
    7: .same(proto: "context"),
    8: .same(proto: "contextsubtype"),
    9: .same(proto: "plcmttype"),
    4: .same(proto: "plcmtcnt"),
    5: .same(proto: "seq"),
    6: .same(proto: "assets"),
    11: .same(proto: "aurlsupport"),
    12: .same(proto: "durlsupport"),
    13: .same(proto: "eventtrackers"),
    14: .same(proto: "privacy"),
    2: .same(proto: "layout"),
    3: .same(proto: "adunit"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.assets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.eventtrackers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._ver) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._layout) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._adunit) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._plcmtcnt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._seq) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self._context) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self._contextsubtype) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self._plcmttype) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._aurlsupport) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._durlsupport) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.eventtrackers) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self._privacy) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ver {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._layout {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._adunit {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._plcmtcnt {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._seq {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 6)
    }
    try { if let v = self._context {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._contextsubtype {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._plcmttype {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._aurlsupport {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._durlsupport {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    if !self.eventtrackers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventtrackers, fieldNumber: 13)
    }
    try { if let v = self._privacy {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest, rhs: Com_Google_Openrtb_NativeRequest) -> Bool {
    if lhs._ver != rhs._ver {return false}
    if lhs._context != rhs._context {return false}
    if lhs._contextsubtype != rhs._contextsubtype {return false}
    if lhs._plcmttype != rhs._plcmttype {return false}
    if lhs._plcmtcnt != rhs._plcmtcnt {return false}
    if lhs._seq != rhs._seq {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs._aurlsupport != rhs._aurlsupport {return false}
    if lhs._durlsupport != rhs._durlsupport {return false}
    if lhs.eventtrackers != rhs.eventtrackers {return false}
    if lhs._privacy != rhs._privacy {return false}
    if lhs._layout != rhs._layout {return false}
    if lhs._adunit != rhs._adunit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest.Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeRequest.protoMessageName + ".Asset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "title"),
    4: .same(proto: "img"),
    5: .same(proto: "video"),
    6: .same(proto: "data"),
    1: .same(proto: "id"),
    2: .same(proto: "required"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._id == nil {return false}
    if let v = self.assetOneof, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._required) }()
      case 3: try {
        var v: Com_Google_Openrtb_NativeRequest.Asset.Title?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .title(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .title(v)
        }
      }()
      case 4: try {
        var v: Com_Google_Openrtb_NativeRequest.Asset.Image?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .img(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .img(v)
        }
      }()
      case 5: try {
        var v: Com_Google_Openrtb_BidRequest.Imp.Video?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .video(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .video(v)
        }
      }()
      case 6: try {
        var v: Com_Google_Openrtb_NativeRequest.Asset.DataMessage?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .data(v)
        }
      }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.Asset.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._required {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    switch self.assetOneof {
    case .title?: try {
      guard case .title(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .img?: try {
      guard case .img(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .video?: try {
      guard case .video(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .data?: try {
      guard case .data(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest.Asset, rhs: Com_Google_Openrtb_NativeRequest.Asset) -> Bool {
    if lhs.assetOneof != rhs.assetOneof {return false}
    if lhs._id != rhs._id {return false}
    if lhs._required != rhs._required {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest.Asset.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeRequest.Asset.protoMessageName + ".Title"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "len"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._len == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._len) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.Asset.Title.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._len {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest.Asset.Title, rhs: Com_Google_Openrtb_NativeRequest.Asset.Title) -> Bool {
    if lhs._len != rhs._len {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest.Asset.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeRequest.Asset.protoMessageName + ".Image"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "w"),
    3: .same(proto: "h"),
    4: .same(proto: "wmin"),
    5: .same(proto: "hmin"),
    6: .same(proto: "mimes"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._w) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._h) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._wmin) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._hmin) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.mimes) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.Asset.Image.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._w {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._h {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._wmin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hmin {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    if !self.mimes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.mimes, fieldNumber: 6)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest.Asset.Image, rhs: Com_Google_Openrtb_NativeRequest.Asset.Image) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._w != rhs._w {return false}
    if lhs._h != rhs._h {return false}
    if lhs._wmin != rhs._wmin {return false}
    if lhs._hmin != rhs._hmin {return false}
    if lhs.mimes != rhs.mimes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest.Asset.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeRequest.Asset.protoMessageName + ".Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "len"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._type == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._len) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.Asset.DataMessage.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._len {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest.Asset.DataMessage, rhs: Com_Google_Openrtb_NativeRequest.Asset.DataMessage) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._len != rhs._len {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeRequest.EventTrackers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeRequest.protoMessageName + ".EventTrackers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "methods"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._event == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._event) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.methods) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeRequest.EventTrackers.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._event {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.methods.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.methods, fieldNumber: 2)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeRequest.EventTrackers, rhs: Com_Google_Openrtb_NativeRequest.EventTrackers) -> Bool {
    if lhs._event != rhs._event {return false}
    if lhs.methods != rhs.methods {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NativeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ver"),
    2: .same(proto: "assets"),
    6: .same(proto: "assetsurl"),
    7: .same(proto: "dcourl"),
    3: .same(proto: "link"),
    4: .same(proto: "imptrackers"),
    5: .same(proto: "jstracker"),
    8: .same(proto: "eventtrackers"),
    9: .same(proto: "privacy"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._link == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.assets) {return false}
    if let v = self._link, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.eventtrackers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._ver) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._link) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.imptrackers) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._jstracker) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._assetsurl) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._dcourl) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.eventtrackers) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._privacy) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ver {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 2)
    }
    try { if let v = self._link {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.imptrackers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.imptrackers, fieldNumber: 4)
    }
    try { if let v = self._jstracker {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._assetsurl {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._dcourl {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    if !self.eventtrackers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventtrackers, fieldNumber: 8)
    }
    try { if let v = self._privacy {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse, rhs: Com_Google_Openrtb_NativeResponse) -> Bool {
    if lhs._ver != rhs._ver {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs._assetsurl != rhs._assetsurl {return false}
    if lhs._dcourl != rhs._dcourl {return false}
    if lhs._link != rhs._link {return false}
    if lhs.imptrackers != rhs.imptrackers {return false}
    if lhs._jstracker != rhs._jstracker {return false}
    if lhs.eventtrackers != rhs.eventtrackers {return false}
    if lhs._privacy != rhs._privacy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "clicktrackers"),
    3: .same(proto: "fallback"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._url == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._url) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.clicktrackers) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._fallback) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Link.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.clicktrackers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clicktrackers, fieldNumber: 2)
    }
    try { if let v = self._fallback {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Link, rhs: Com_Google_Openrtb_NativeResponse.Link) -> Bool {
    if lhs._url != rhs._url {return false}
    if lhs.clicktrackers != rhs.clicktrackers {return false}
    if lhs._fallback != rhs._fallback {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.protoMessageName + ".Asset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "title"),
    4: .same(proto: "img"),
    5: .same(proto: "video"),
    6: .same(proto: "data"),
    1: .same(proto: "id"),
    2: .same(proto: "required"),
    7: .same(proto: "link"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._id == nil {return false}
    if let v = self.assetOneof, !v.isInitialized {return false}
    if let v = self._link, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._required) }()
      case 3: try {
        var v: Com_Google_Openrtb_NativeResponse.Asset.Title?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .title(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .title(v)
        }
      }()
      case 4: try {
        var v: Com_Google_Openrtb_NativeResponse.Asset.Image?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .img(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .img(v)
        }
      }()
      case 5: try {
        var v: Com_Google_Openrtb_NativeResponse.Asset.Video?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .video(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .video(v)
        }
      }()
      case 6: try {
        var v: Com_Google_Openrtb_NativeResponse.Asset.DataMessage?
        var hadOneofValue = false
        if let current = self.assetOneof {
          hadOneofValue = true
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.assetOneof = .data(v)
        }
      }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._link) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Asset.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._required {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    switch self.assetOneof {
    case .title?: try {
      guard case .title(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .img?: try {
      guard case .img(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .video?: try {
      guard case .video(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .data?: try {
      guard case .data(let v)? = self.assetOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try { if let v = self._link {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Asset, rhs: Com_Google_Openrtb_NativeResponse.Asset) -> Bool {
    if lhs.assetOneof != rhs.assetOneof {return false}
    if lhs._id != rhs._id {return false}
    if lhs._required != rhs._required {return false}
    if lhs._link != rhs._link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Asset.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.Asset.protoMessageName + ".Title"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "len"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._text == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._len) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Asset.Title.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._len {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Asset.Title, rhs: Com_Google_Openrtb_NativeResponse.Asset.Title) -> Bool {
    if lhs._text != rhs._text {return false}
    if lhs._len != rhs._len {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Asset.Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.Asset.protoMessageName + ".Image"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "type"),
    1: .same(proto: "url"),
    2: .same(proto: "w"),
    3: .same(proto: "h"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._url == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._url) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._w) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._h) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Asset.Image.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._w {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._h {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Asset.Image, rhs: Com_Google_Openrtb_NativeResponse.Asset.Image) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._url != rhs._url {return false}
    if lhs._w != rhs._w {return false}
    if lhs._h != rhs._h {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Asset.Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.Asset.protoMessageName + ".Video"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vasttag"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._vasttag == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._vasttag) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Asset.Video.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._vasttag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Asset.Video, rhs: Com_Google_Openrtb_NativeResponse.Asset.Video) -> Bool {
    if lhs._vasttag != rhs._vasttag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.Asset.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.Asset.protoMessageName + ".Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "type"),
    4: .same(proto: "len"),
    1: .same(proto: "label"),
    2: .same(proto: "value"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._value == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._label) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._len) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.Asset.DataMessage.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._label {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._len {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.Asset.DataMessage, rhs: Com_Google_Openrtb_NativeResponse.Asset.DataMessage) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._len != rhs._len {return false}
    if lhs._label != rhs._label {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Com_Google_Openrtb_NativeResponse.EventTracker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Google_Openrtb_NativeResponse.protoMessageName + ".EventTracker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "method"),
    3: .same(proto: "url"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._method == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._event) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._method) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._url) }()
      case 100..<10000:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Com_Google_Openrtb_NativeResponse.EventTracker.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._event {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._method {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10000)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Google_Openrtb_NativeResponse.EventTracker, rhs: Com_Google_Openrtb_NativeResponse.EventTracker) -> Bool {
    if lhs._event != rhs._event {return false}
    if lhs._method != rhs._method {return false}
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

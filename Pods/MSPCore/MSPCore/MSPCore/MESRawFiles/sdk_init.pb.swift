// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mes_events/sdk_init.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// sent when app starts up
struct Com_Newsbreak_Mes_Events_SdkInitEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientTsMs: UInt64 = 0

  var serverTsMs: UInt64 = 0

  var os: Com_Newsbreak_Monetization_Common_OsType = .unspecified

  var org: String = String()

  var app: String = String()

  var mspSdkVersion: String {
    get {return _mspSdkVersion ?? String()}
    set {_mspSdkVersion = newValue}
  }
  /// Returns true if `mspSdkVersion` has been explicitly set.
  var hasMspSdkVersion: Bool {return self._mspSdkVersion != nil}
  /// Clears the value of `mspSdkVersion`. Subsequent reads from it will return its default value.
  mutating func clearMspSdkVersion() {self._mspSdkVersion = nil}

  var latency: Int32 {
    get {return _latency ?? 0}
    set {_latency = newValue}
  }
  /// Returns true if `latency` has been explicitly set.
  var hasLatency: Bool {return self._latency != nil}
  /// Clears the value of `latency`. Subsequent reads from it will return its default value.
  mutating func clearLatency() {self._latency = nil}

  var totalCompleteTime: Int32 {
    get {return _totalCompleteTime ?? 0}
    set {_totalCompleteTime = newValue}
  }
  /// Returns true if `totalCompleteTime` has been explicitly set.
  var hasTotalCompleteTime: Bool {return self._totalCompleteTime != nil}
  /// Clears the value of `totalCompleteTime`. Subsequent reads from it will return its default value.
  mutating func clearTotalCompleteTime() {self._totalCompleteTime = nil}

  var completeTimeByAdNetwork: Dictionary<String,Int32> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mspSdkVersion: String? = nil
  fileprivate var _latency: Int32? = nil
  fileprivate var _totalCompleteTime: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.newsbreak.mes.events"

extension Com_Newsbreak_Mes_Events_SdkInitEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SdkInitEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_ts_ms"),
    2: .standard(proto: "server_ts_ms"),
    3: .same(proto: "os"),
    4: .same(proto: "org"),
    5: .same(proto: "app"),
    6: .standard(proto: "msp_sdk_version"),
    7: .same(proto: "latency"),
    8: .standard(proto: "total_complete_time"),
    9: .standard(proto: "complete_time_by_ad_network"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.clientTsMs) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.serverTsMs) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.os) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.org) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.app) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._mspSdkVersion) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._latency) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._totalCompleteTime) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &self.completeTimeByAdNetwork) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.clientTsMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.clientTsMs, fieldNumber: 1)
    }
    if self.serverTsMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.serverTsMs, fieldNumber: 2)
    }
    if self.os != .unspecified {
      try visitor.visitSingularEnumField(value: self.os, fieldNumber: 3)
    }
    if !self.org.isEmpty {
      try visitor.visitSingularStringField(value: self.org, fieldNumber: 4)
    }
    if !self.app.isEmpty {
      try visitor.visitSingularStringField(value: self.app, fieldNumber: 5)
    }
    try { if let v = self._mspSdkVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._latency {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._totalCompleteTime {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    if !self.completeTimeByAdNetwork.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: self.completeTimeByAdNetwork, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Newsbreak_Mes_Events_SdkInitEvent, rhs: Com_Newsbreak_Mes_Events_SdkInitEvent) -> Bool {
    if lhs.clientTsMs != rhs.clientTsMs {return false}
    if lhs.serverTsMs != rhs.serverTsMs {return false}
    if lhs.os != rhs.os {return false}
    if lhs.org != rhs.org {return false}
    if lhs.app != rhs.app {return false}
    if lhs._mspSdkVersion != rhs._mspSdkVersion {return false}
    if lhs._latency != rhs._latency {return false}
    if lhs._totalCompleteTime != rhs._totalCompleteTime {return false}
    if lhs.completeTimeByAdNetwork != rhs.completeTimeByAdNetwork {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

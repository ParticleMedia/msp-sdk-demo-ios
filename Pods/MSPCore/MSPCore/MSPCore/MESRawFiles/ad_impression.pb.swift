// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mes_events/ad_impression.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// it is not a dup of AdAuction, more fields will be added,
/// like ad position, viewability etc
struct Com_Newsbreak_Mes_Events_AdImpressionEvent: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tsMs: UInt64 {
    get {return _storage._tsMs}
    set {_uniqueStorage()._tsMs = newValue}
  }

  var requestContext: Com_Newsbreak_Monetization_Common_RequestContext {
    get {return _storage._requestContext ?? Com_Newsbreak_Monetization_Common_RequestContext()}
    set {_uniqueStorage()._requestContext = newValue}
  }
  /// Returns true if `requestContext` has been explicitly set.
  var hasRequestContext: Bool {return _storage._requestContext != nil}
  /// Clears the value of `requestContext`. Subsequent reads from it will return its default value.
  mutating func clearRequestContext() {_uniqueStorage()._requestContext = nil}

  var ad: Com_Newsbreak_Monetization_Common_Ad {
    get {return _storage._ad ?? Com_Newsbreak_Monetization_Common_Ad()}
    set {_uniqueStorage()._ad = newValue}
  }
  /// Returns true if `ad` has been explicitly set.
  var hasAd: Bool {return _storage._ad != nil}
  /// Clears the value of `ad`. Subsequent reads from it will return its default value.
  mutating func clearAd() {_uniqueStorage()._ad = nil}

  var os: Com_Newsbreak_Monetization_Common_OsType {
    get {return _storage._os}
    set {_uniqueStorage()._os = newValue}
  }

  var org: String {
    get {return _storage._org}
    set {_uniqueStorage()._org = newValue}
  }

  var app: String {
    get {return _storage._app}
    set {_uniqueStorage()._app = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.newsbreak.mes.events"

extension Com_Newsbreak_Mes_Events_AdImpressionEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdImpressionEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ts_ms"),
    2: .standard(proto: "request_context"),
    3: .same(proto: "ad"),
    4: .same(proto: "os"),
    5: .same(proto: "org"),
    6: .same(proto: "app"),
  ]

  fileprivate class _StorageClass {
    var _tsMs: UInt64 = 0
    var _requestContext: Com_Newsbreak_Monetization_Common_RequestContext? = nil
    var _ad: Com_Newsbreak_Monetization_Common_Ad? = nil
    var _os: Com_Newsbreak_Monetization_Common_OsType = .unspecified
    var _org: String = String()
    var _app: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _tsMs = source._tsMs
      _requestContext = source._requestContext
      _ad = source._ad
      _os = source._os
      _org = source._org
      _app = source._app
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._requestContext, !v.isInitialized {return false}
      if let v = _storage._ad, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt64Field(value: &_storage._tsMs) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._requestContext) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ad) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._os) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._org) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._app) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._tsMs != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._tsMs, fieldNumber: 1)
      }
      try { if let v = _storage._requestContext {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._os != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._os, fieldNumber: 4)
      }
      if !_storage._org.isEmpty {
        try visitor.visitSingularStringField(value: _storage._org, fieldNumber: 5)
      }
      if !_storage._app.isEmpty {
        try visitor.visitSingularStringField(value: _storage._app, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Newsbreak_Mes_Events_AdImpressionEvent, rhs: Com_Newsbreak_Mes_Events_AdImpressionEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tsMs != rhs_storage._tsMs {return false}
        if _storage._requestContext != rhs_storage._requestContext {return false}
        if _storage._ad != rhs_storage._ad {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._org != rhs_storage._org {return false}
        if _storage._app != rhs_storage._app {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
